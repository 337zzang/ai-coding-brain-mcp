#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
🚀 JSON REPL Session for AI Coding Brain v5.0
==============================================

Claude Desktop과 통신하는 간소화된 JSON REPL 세션
- claude_code_ai_brain과 직접 통합
- 네임스페이스 보호 (AIHelpers 클래스)
- 최소 의존성, 핵심 기능만 유지

작성일: 2025-06-14
"""

import sys
import os
import json
import io
import traceback
import time
import datetime as dt
import platform
import subprocess
from pathlib import Path
from typing import Dict, Any, Optional
from contextlib import redirect_stdout, redirect_stderr

# 기본 경로 설정
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

# ============================================================================
# 🛡️ AIHelpers - 네임스페이스 보호된 헬퍼 함수 모음
# ============================================================================

class AIHelpers:
    """AI Coding Brain 헬퍼 함수 네임스페이스"""
    
    def __init__(self):
        self._load_helpers()
        
    def _load_helpers(self):
        """헬퍼 함수들을 로드"""
        try:
            # Context 관리 (claude_code_ai_brain에서)
                        # TODO: claude_code_ai_brain_v7로 전환 필요
            from claude_code_ai_brain import (
                cmd_flow, initialize_context, save_context,
                update_cache, get_value,
                track_file_access, track_function_edit,
                get_work_tracking_summary, _context_manager,
                cmd_plan, cmd_task, cmd_next
            )
            
            self.cmd_flow = cmd_flow
            self.initialize_context = initialize_context
            self.save_context = save_context
            self.update_cache = update_cache
            self.get_value = get_value
            self.track_file_access = track_file_access
            self.track_function_edit = track_function_edit
            self.get_work_tracking_summary = get_work_tracking_summary
            self._context_manager = _context_manager
            self.cmd_plan = cmd_plan
            self.cmd_task = cmd_task
            self.cmd_next = cmd_next
            
        except ImportError as e:
            print(f"⚠️ claude_code_ai_brain 로드 실패: {e}")
            self._context_manager = None
        
        try:
            # 파일 작업 및 코드 분석 (auto_tracking_wrapper에서)
            from auto_tracking_wrapper import (
                create_file, read_file, backup_file, restore_backup,
                replace_block, insert_block,
                parse_with_snippets, get_snippet_preview,
                scan_directory, search_files_advanced, search_code_content
            )
            
            # 파일 작업
            self.create_file = create_file
            self.read_file = read_file
            self.backup_file = backup_file
            self.restore_backup = restore_backup
            
            # 코드 수정
            self.replace_block = replace_block
            self.insert_block = insert_block
            
            # 코드 분석
            self.parse_with_snippets = parse_with_snippets
            self.get_snippet_preview = get_snippet_preview
            
            # 검색

            self.scan_directory = scan_directory
            self.search_files_advanced = search_files_advanced
            self.search_code_content = search_code_content
        
        except ImportError as e:
            print(f"⚠️ auto_tracking_wrapper 로드 실패: {e}")
    
    def get_context(self):
        """현재 프로젝트 컨텍스트 반환"""
        if self._context_manager and self._context_manager.context:
            return self._context_manager.context
        return None
    
    def list_functions(self):
        """사용 가능한 함수 목록 표시"""
        funcs = [attr for attr in dir(self) 
                if not attr.startswith('_') and callable(getattr(self, attr))]
        print(f"🔧 사용 가능한 헬퍼 함수 ({len(funcs)}개):")
        for func in sorted(funcs):
            print(f"  • helpers.{func}()")
        return funcs
    
    def __repr__(self):
        return "<AIHelpers: 파일작업, 코드분석, 검색 등 헬퍼 함수>"

# ============================================================================
# 🌍 전역 변수
# ============================================================================

repl_globals = {}
execution_count = 0
session_start = dt.datetime.now()

# ============================================================================
# 🚀 초기화
# ============================================================================

def initialize_repl():
    """REPL 환경 초기화"""
    global repl_globals
    
    print("🚀 JSON REPL Session v5.0 초기화 중...")
    
    # 1. helpers 객체 생성
    helpers = AIHelpers()
    repl_globals['helpers'] = helpers
    repl_globals['h'] = helpers  # 짧은 별칭
    
    # 2. 자주 사용하는 함수들을 전역에도 노출 (선택적)
    critical_funcs = {
        'cmd_flow': helpers.cmd_flow,
        'save_context': helpers.save_context,
        'create_file': helpers.create_file,
        'read_file': helpers.read_file,
        'backup_file': helpers.backup_file,
        'replace_block': helpers.replace_block,
        'cmd_plan': helpers.cmd_plan,
        'cmd_task': helpers.cmd_task,
        'cmd_next': helpers.cmd_next
    }
    
    for name, func in critical_funcs.items():
        if callable(func):
            repl_globals[name] = func
    
    # 3. 기본 모듈들
    import numpy as np
    import pandas as pd
    
    repl_globals.update({
        'os': os,
        'sys': sys,
        'json': json,
        'Path': Path,
        'datetime': dt,
        'np': np,
        'pd': pd,
        'time': time,
    })
    
    # 4. context 연결
    context = helpers.get_context()
    if context:
        repl_globals['context'] = context
    
    # 5. 프로젝트 자동 초기화 (현재 디렉토리)
    try:
        project_path = os.getcwd()
        project_name = os.path.basename(project_path)
        if hasattr(helpers, 'initialize_context'):
            context = helpers.initialize_context(project_path, project_name)
            repl_globals['context'] = context
            print(f"✅ 프로젝트 '{project_name}' 자동 초기화")
    except Exception as e:
        print(f"⚠️ 프로젝트 자동 초기화 건너뜀: {e}")
    
    print("✅ REPL 초기화 완료!")
    print("💡 사용법: helpers.create_file('test.py') 또는 h.save_context()")
    print("📋 함수 목록: helpers.list_functions()")

# ============================================================================
# 💻 코드 실행
# ============================================================================

def execute_code(code: str) -> Dict[str, Any]:
    """Python 코드 실행"""
    global execution_count
    
    stdout_capture = io.StringIO()
    stderr_capture = io.StringIO()
    start_time = time.time()
    
    try:
        with redirect_stdout(stdout_capture), redirect_stderr(stderr_capture):
            # 코드 실행
            exec(code, repl_globals)
            
        execution_count += 1
        
        # 자동 저장 (10회마다)
        if execution_count % 10 == 0 and 'save_context' in repl_globals:
            try:
                repl_globals['save_context']()
            except:
                pass
        
        # 변수 개수 계산
        user_vars = [k for k in repl_globals.keys() 
                    if not k.startswith('_') and k not in ['__builtins__']]
        
        return {
            "success": True,
            "stdout": stdout_capture.getvalue(),
            "stderr": stderr_capture.getvalue(),
            "execution_time": time.time() - start_time,
            "variable_count": len(user_vars),
            "execution_count": execution_count,
            "session_mode": "JSON_REPL",
            "note": "JSON REPL Session - Variables persist"
        }
        
    except Exception as e:
        execution_count += 1
        
        return {
            "success": False,
            "stdout": stdout_capture.getvalue(),
            "stderr": stderr_capture.getvalue() + f"\n{type(e).__name__}: {str(e)}\n{traceback.format_exc()}",
            "execution_time": time.time() - start_time,
            "variable_count": len(repl_globals),
            "execution_count": execution_count,
            "error": str(e),
            "error_type": type(e).__name__,
            "session_mode": "JSON_REPL"
        }

# ============================================================================
# 🔌 JSON 통신
# ============================================================================

def read_json_input() -> Optional[str]:
    """EOT 문자로 종료되는 JSON 입력 읽기"""
    try:
        input_data = ""
        while True:
            char = sys.stdin.read(1)
            if not char:  # EOF
                return None
            if char == '\x04':  # EOT
                break
            input_data += char
        
        return input_data.strip()
    except Exception:
        return None

def send_json_response(response: Dict[str, Any]):
    """JSON 응답 전송 (EOT 문자로 종료)"""
    try:
        response['timestamp'] = dt.datetime.now().isoformat()
        response_json = json.dumps(response, ensure_ascii=False)
        sys.stdout.write(response_json)
        sys.stdout.write('\x04')  # EOT
        sys.stdout.flush()
    except Exception as e:
        error_response = {
            "success": False,
            "error": f"Response encoding error: {str(e)}",
            "error_type": "ResponseError"
        }
        sys.stdout.write(json.dumps(error_response))
        sys.stdout.write('\x04')
        sys.stdout.flush()

# ============================================================================
# 🔄 메인 루프
# ============================================================================

def main():
    """메인 실행 루프"""
    # Windows UTF-8 설정
    if platform.system() == 'Windows':
        try:
            subprocess.run(['chcp', '65001'], shell=True, capture_output=True)
        except:
            pass
    
    # 스트림 인코딩 설정
    if hasattr(sys.stdout, 'reconfigure'):
        # Python 3.7+ 
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
    else:
        # 구버전 Python을 위한 대체 방법
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'replace')
    
    if hasattr(sys.stderr, 'reconfigure'):
        # Python 3.7+
        sys.stderr.reconfigure(encoding='utf-8', errors='replace')
    else:
        # 구버전 Python을 위한 대체 방법
        import codecs
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'replace')
    
    # 초기화
    initialize_repl()
    
    # 준비 완료 신호
    print("__READY__", flush=True)
    
    # 메인 루프
    try:
        while True:
            # JSON 입력 읽기
            code_input = read_json_input()
            if code_input is None:
                break
            
            try:
                # 요청 파싱
                request = json.loads(code_input)
                request_id = request.get('id')
                code = request.get('code', '')
                language = request.get('language', 'python')
                
                if language != 'python':
                    response = {
                        "success": False,
                        "error": f"Unsupported language: {language}",
                        "error_type": "LanguageError"
                    }
                else:
                    # 코드 실행
                    response = execute_code(code)
                    response['language'] = language
                
                # 요청 ID 유지
                if request_id:
                    response['id'] = request_id
                    
            except json.JSONDecodeError as e:
                response = {
                    "success": False,
                    "error": f"Invalid JSON: {str(e)}",
                    "error_type": "JSONDecodeError"
                }
            
            # 응답 전송
            send_json_response(response)
    
    except KeyboardInterrupt:
        print("\n👋 JSON REPL Session 종료", file=sys.stderr)
    except Exception as e:
        print(f"\n❌ 치명적 오류: {e}", file=sys.stderr)
        traceback.print_exc(file=sys.stderr)
    finally:
        # 종료 시 컨텍스트 저장
        try:
            if 'save_context' in repl_globals:
                repl_globals['save_context']()
                print("✅ 최종 컨텍스트 저장", file=sys.stderr)
        except:
            pass

# ============================================================================
# 🎯 실행
# ============================================================================

if __name__ == "__main__":
    main()
