#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
🧠 AI Coding Brain - 간소화 버전 v4.0
=====================================

핵심 기능만 포함:
- Claude Desktop 설정에서 경로 읽기
- 프로젝트 전환 (/flow 명령어)
- Context 초기화 및 캐시 업데이트

작성일: 2025-06-14
"""

import os
import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional, List

# 로깅 설정
logging.basicConfig(
    level=logging.INFO,
    format='[%(levelname)s] %(message)s'
)
logger = logging.getLogger(__name__)

# Context Manager 임포트
try:
    from context_manager import (
        initialize_context,
        save_context,
        get_value
    )
    CONTEXT_MANAGER_AVAILABLE = True
    logger.info("✅ Context Manager 로드 완료")
except ImportError as e:
    CONTEXT_MANAGER_AVAILABLE = False
    logger.error(f"❌ Context Manager 로드 실패: {e}")

# ============================================
# 글로벌 상태 관리
# ============================================
class GlobalState:
    """글로벌 상태 관리"""
    def __init__(self):
        self.current_project = None
        self.project_path = None
        self.context = None

_global_state = GlobalState()

# ============================================
# 핵심 함수들
# ============================================

def get_paths_from_config() -> dict:
    """Claude Desktop 설정에서 PROJECT_ROOT와 MEMORY_BANK_ROOT 가져오기"""
    config_path = os.path.expanduser("~/AppData/Roaming/Claude/claude_desktop_config.json")
    paths = {
        'project_root': Path.home() / "Desktop",  # 기본값
        'memory_root': Path.home() / "Desktop" / "memory"  # 기본값
    }
    
    if os.path.exists(config_path):
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            # ai-coding-brain MCP 서버 설정에서 경로 가져오기
            mcp_servers = config.get('mcpServers', {})
            for server_name, server_config in mcp_servers.items():
                if 'ai-coding-brain' in server_name.lower():
                    env = server_config.get('env', {})
                    
                    if 'PROJECT_ROOT' in env:
                        paths['project_root'] = Path(env['PROJECT_ROOT'])
                    if 'MEMORY_BANK_ROOT' in env:
                        paths['memory_root'] = Path(env['MEMORY_BANK_ROOT'])
                    break
        except Exception as e:
            logger.error(f"Claude Desktop 설정 로드 실패: {e}")
    
    return paths

def list_available_projects() -> dict:
    """사용 가능한 프로젝트 목록"""
    paths = get_paths_from_config()
    projects = {}
    
    # PROJECT_ROOT의 프로젝트들
    if paths['project_root'].exists():
        for item in paths['project_root'].iterdir():
            if item.is_dir() and not item.name.startswith('.'):
                projects[item.name] = {
                    'path': item,
                    'location': 'project_root'
                }
    
    # MEMORY_ROOT의 프로젝트들 (우선순위가 높음)
    if paths['memory_root'].exists():
        for item in paths['memory_root'].iterdir():
            if item.is_dir() and not item.name.startswith('.'):
                projects[item.name] = {
                    'path': item,
                    'location': 'memory_root'
                }
    
    return projects

def switch_project(project_name: str) -> bool:
    """프로젝트 전환"""
    global _global_state
    
    # 이전 프로젝트 저장
    if _global_state.context and CONTEXT_MANAGER_AVAILABLE:
        logger.info(f"이전 프로젝트 '{_global_state.current_project}' 저장 중...")
        save_context()
    
    # 프로젝트 찾기
    projects = list_available_projects()
    
    if project_name not in projects:
        logger.error(f"프로젝트 '{project_name}'를 찾을 수 없습니다")
        return False
    
    project_info = projects[project_name]
    project_path = project_info['path']
    
    # 상태 업데이트
    _global_state.current_project = project_name
    _global_state.project_path = str(project_path)
    
    # 작업 디렉토리 변경
    os.chdir(project_path)
    
    # Context 초기화
    if CONTEXT_MANAGER_AVAILABLE:
        _global_state.context = initialize_context(str(project_path), project_name)
        logger.info(f"✅ 프로젝트 '{project_name}'로 전환 완료 ({project_info['location']})")
    else:
        logger.warning("Context Manager를 사용할 수 없습니다")
        _global_state.context = None
    
    return True

def initialize_ai_brain(project_name: str = None) -> Dict[str, Any]:
    """AI Brain 초기화"""
    logger.info("🚀 AI Brain 초기화")
    
    if project_name:
        if switch_project(project_name):
            return _global_state.context
        else:
            logger.warning("프로젝트 전환 실패")
    
    # 사용 가능한 프로젝트 표시
    projects = list_available_projects()
    if projects:
        logger.info(f"📋 사용 가능한 프로젝트: {len(projects)}개")
        for name in list(projects.keys())[:5]:
            logger.info(f"   • {name}")
    
    return None

# ============================================
# 명령어 처리
# ============================================

def cmd_flow(args: List[str]) -> None:
    """/flow 명령어 - 프로젝트 전환 및 상태 표시"""
    
    # 프로젝트 전환
    if args and len(args) > 0:
        project_name = args[0]
        print(f"\n🔄 프로젝트 '{project_name}'로 전환 중...")
        
        if switch_project(project_name):
            print(f"✅ 프로젝트 '{project_name}'로 전환 완료!")
            
            # 상태 표시
            if _global_state.context:
                analyzed = len(get_value(_global_state.context, 'analyzed_files', {}))
                print(f"\n📊 프로젝트 상태:")
                print(f"   • 경로: {_global_state.project_path}")
                print(f"   • 분석된 파일: {analyzed}개")
        else:
            print(f"❌ 프로젝트 전환 실패")
            show_available_projects()
        return
    
    # 현재 상태 표시
    if not _global_state.context:
        print("\n⚠️ 프로젝트가 선택되지 않았습니다")
        print("\n사용법: /flow [프로젝트명]")
        show_available_projects()
    else:
        print(f"\n🔥 현재 프로젝트: {_global_state.current_project}")
        print(f"📁 경로: {_global_state.project_path}")
        
        if CONTEXT_MANAGER_AVAILABLE:
            analyzed = len(get_value(_global_state.context, 'analyzed_files', {}))
            print(f"📊 분석된 파일: {analyzed}개")

def show_available_projects():
    """사용 가능한 프로젝트 목록 표시"""
    projects = list_available_projects()
    if projects:
        print("\n📋 사용 가능한 프로젝트:")
        print("-" * 60)
        
        # 위치별로 그룹화
        project_root_list = []
        memory_root_list = []
        
        for name, info in projects.items():
            if info['location'] == 'project_root':
                project_root_list.append(name)
            else:
                memory_root_list.append(name)
        
        paths = get_paths_from_config()
        
        if project_root_list:
            print(f"\n📁 PROJECT_ROOT ({paths['project_root']}):")
            for name in sorted(project_root_list):
                print(f"   • {name}")
        
        if memory_root_list:
            print(f"\n💾 MEMORY_ROOT ({paths['memory_root']}):")
            for name in sorted(memory_root_list):
                print(f"   • {name}")

# ============================================
# 메인 명령어 처리
# ============================================

def process_command(command: str, *args) -> Any:
    """명령어 처리 (간소화)"""
    if command == '/flow':
        return cmd_flow(list(args))
    else:
        return f"❌ 알 수 없는 명령어: {command}"

# ============================================
# 초기화 메시지
# ============================================

logger.info("🧠 AI Coding Brain v4.0 (간소화 버전) 준비 완료!")
logger.info("💡 사용법: /flow [프로젝트명]")
