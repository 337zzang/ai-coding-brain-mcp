"""
Auto-Tracking Wrapper v4.0 - 간소화된 작업 추적 시스템
======================================================
모든 핵심 헬퍼 함수들을 래핑하여 자동으로 작업을 추적합니다.

v4.0 변경사항:
- claude_code_ai_brain과 직접 통합
- context_manager 의존성 제거
- 코드 구조 단순화
"""
import functools
from typing import Callable, Any, Optional
import os
import sys
from pathlib import Path

# Add python directory to path
python_dir = Path(__file__).parent
if str(python_dir) not in sys.path:
    sys.path.insert(0, str(python_dir))

# ============================================================================
# 1. 원본 헬퍼 함수들 임포트
# ============================================================================

# 파일 시스템 헬퍼들
from file_system_helpers import (
    create_file as original_create_file,
    read_file as original_read_file,
    backup_file as original_backup_file,
    restore_backup as original_restore_backup,
    replace_block as original_replace_block,
    insert_block as original_insert_block
)

# AST 파서 헬퍼들
from ast_parser_helpers import (
    parse_with_snippets as original_parse_with_snippets,
    get_snippet_preview as original_get_snippet_preview
)

# 검색 헬퍼들
from search_helpers import (
    scan_directory as original_scan_directory,
    search_files_advanced as original_search_files_advanced,
    search_code_content as original_search_code_content
)

from integrated_search import (
    integrated_search as original_integrated_search,
    search_by_date as original_search_by_date,
    search_by_file as original_search_by_file
)

# ============================================================================
# 2. claude_code_ai_brain의 추적 함수들 임포트
# ============================================================================

try:
    from claude_code_ai_brain import (
        track_file_access,
        track_function_edit,
        update_cache,
        _context_manager,
        get_current_context,
        track_task_operation
    )
    TRACKING_AVAILABLE = True
except ImportError:
    # 추적 기능 없이도 작동하도록 더미 함수
    def track_file_access(file_path, operation): pass
    def track_function_edit(file_path, func_name, class_name=None): pass
    def update_cache(key, value): pass
    def get_current_context(): return None
    def track_task_operation(operation_type, details=None): pass
    _context_manager = None
    TRACKING_AVAILABLE = False

# ============================================================================
# 3. 프로젝트 컨텍스트 접근
# ============================================================================

def _get_project_context():
    """프로젝트 컨텍스트를 안전하게 가져옵니다."""
    try:
        # 1. claude_code_ai_brain의 get_current_context 사용 (가장 안전)
        context = get_current_context()
        if context:
            return context
            
        # 2. execute_code 환경의 전역 변수 확인
        import __main__
        if hasattr(__main__, 'context'):
            return __main__.context
            
        # 3. globals()에서 직접 찾기
        for key, value in globals().items():
            if key == 'context' and isinstance(value, dict):
                return value
                
        # 4. 실행 프레임에서 찾기
        frame = sys._getframe()
        max_depth = 10  # 무한 루프 방지
        depth = 0
        while frame and depth < max_depth:
            if 'context' in frame.f_globals:
                ctx = frame.f_globals['context']
                if isinstance(ctx, dict) and 'project_name' in ctx:
                    return ctx
            if 'context' in frame.f_locals:
                ctx = frame.f_locals['context']
                if isinstance(ctx, dict) and 'project_name' in ctx:
                    return ctx
            frame = frame.f_back
            depth += 1
                
        return None
    except Exception as e:
        # 디버깅용
        # print(f"⚠️ Context 찾기 실패: {e}")
        return None

# ============================================================================
# 4. 래퍼 데코레이터
# ============================================================================

def track_file_operation(operation_type: str) -> Callable:
    """파일 작업 추적 데코레이터"""
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(*args, **kwargs) -> Any:
            # 파일 경로 추출
            file_path = args[0] if args else kwargs.get('file_path', None)
            
            # 추적 (가능한 경우)
            if TRACKING_AVAILABLE and file_path:
                try:
                    track_file_access(file_path, f"{func.__name__}_{operation_type}")
                except:
                    pass
            
            # 원본 함수 실행
            return func(*args, **kwargs)
        return wrapper
    return decorator

def track_block_operation(operation_type: str) -> Callable:
    """블록(함수/클래스) 작업 추적 데코레이터"""
    def decorator(func: Callable) -> Callable:
        @functools.wraps(func)
        def wrapper(file_path: str, block_name: str, *args, **kwargs) -> Any:
            # 추적 (가능한 경우)
            if TRACKING_AVAILABLE:
                try:
                    track_function_edit(file_path, block_name)
                except:
                    pass
            
            # 원본 함수 실행
            return func(file_path, block_name, *args, **kwargs)
        return wrapper
    return decorator

# ============================================================================
# 5. 래핑된 헬퍼 함수들
# ============================================================================

# === 파일 시스템 함수들 ===

@track_file_operation('create')
def create_file(file_path: str, content: str = "") -> str:
    return original_create_file(file_path, content)

@track_file_operation('read')
def read_file(file_path: str) -> str:
    return original_read_file(file_path)

@track_file_operation('backup')
def backup_file(file_path: str, reason: str = "") -> str:
    return original_backup_file(file_path, reason)

@track_file_operation('restore')
def restore_backup(backup_path: str, target_path: str = None) -> str:
    return original_restore_backup(backup_path, target_path)

@track_block_operation('replace')
def replace_block(file_path: str, block_name: str, new_content: str) -> str:
    return original_replace_block(file_path, block_name, new_content)

@track_block_operation('insert')
def insert_block(file_path: str, target_block: str, position: str, new_content: str) -> str:
    return original_insert_block(file_path, target_block, position, new_content)

# === AST 분석 함수들 ===

@track_file_operation('analyze')
def parse_with_snippets(file_path: str, language: str = 'auto') -> dict:
    result = original_parse_with_snippets(file_path, language)
    
    # 성공한 경우 캐시 업데이트
    if TRACKING_AVAILABLE and result.get('parsing_success'):
        context = _get_project_context()
        if context:
            try:
                analyzed_files = context.get('cache', {}).get('analyzed_files', {})
                analyzed_files[file_path] = result
                update_cache('analyzed_files', analyzed_files)
            except:
                pass
    
    return result

@track_file_operation('preview')
def get_snippet_preview(file_path: str, element_name: str = None, element_type: str = None) -> str:
    return original_get_snippet_preview(file_path, element_name, element_type)

# === 검색 함수들 ===

@track_file_operation('scan')
def scan_directory(path: str = '.', level: int = 1) -> list:
    return original_scan_directory(path, level)

@track_file_operation('search')
def search_files_advanced(path: str = '.', pattern: str = '*',
                         recursive: bool = True, max_results: int = 100,
                         include_dirs: bool = False, 
                         project_context: Optional[dict] = None) -> dict:
    # Context 자동 전달
    if project_context is None:
        project_context = _get_project_context()
    
    return original_search_files_advanced(
        path, pattern, recursive, max_results, 
        include_dirs, project_context
    )

@track_file_operation('search')
def search_code_content(path: str = '.', pattern: str = '',
                       file_pattern: str = '*', max_results: int = 50,
                       case_sensitive: bool = False, whole_word: bool = False,
                       project_context: Optional[dict] = None) -> dict:
    # Context 자동 전달
    if project_context is None:
        project_context = _get_project_context()
    
    return original_search_code_content(
        path, pattern, file_pattern, max_results,
        case_sensitive, whole_word, project_context
    )

def integrated_search(query: str, search_type: str = 'all',
                     limit: int = 20,
                     project_context: Optional[dict] = None) -> dict:
    # Context 자동 전달
    if project_context is None:
        project_context = _get_project_context()
    
    return original_integrated_search(query, search_type, limit, project_context)

def search_by_date(date_range: str, 
                  project_context: Optional[dict] = None) -> dict:
    # Context 자동 전달
    if project_context is None:
        project_context = _get_project_context()
    
    return original_search_by_date(date_range, project_context)

def search_by_file(file_pattern: str,
                  project_context: Optional[dict] = None) -> dict:
    # Context 자동 전달
    if project_context is None:
        project_context = _get_project_context()
    
    return original_search_by_file(file_pattern, project_context)

# ============================================================================
# 6. 공개 함수 목록
# ============================================================================

__all__ = [
    # 파일 시스템
    'create_file', 
    'read_file', 
    'backup_file', 
    'restore_backup',
    'replace_block', 
    'insert_block',
    
    # AST 분석
    'parse_with_snippets', 
    'get_snippet_preview',
    
    # 검색
    'scan_directory',
    'search_files_advanced',
    'search_code_content',
    'integrated_search',
    'search_by_date',
    'search_by_file',
]

# ============================================================================
# 7. 초기화 메시지
# ============================================================================

if __name__ != '__main__':
    print(f"✅ Auto-tracking wrapper v4.0 로드 - {len(__all__)}개 함수")
    if TRACKING_AVAILABLE:
        print("   • 작업 추적 활성화 (claude_code_ai_brain 연동)")
    else:
        print("   • 작업 추적 비활성화")
