    # parse_with_snippets는 특별 처리 (context 인자 제외)
    def parse_with_snippets(*args, **kwargs):
        """파일을 파싱하여 구조화된 정보와 코드 스니펫 추출"""
        # context 인자가 있다면 제거
        if 'context' in kwargs:
            kwargs.pop('context')
        
        # 원본 함수 호출
        result = _parse_with_snippets(*args, **kwargs)
        
        # 파일 접근 추적 (첫 번째 인자가 파일 경로인 경우)
        if args and isinstance(args[0], str) and os.path.exists(args[0]):
            try:
                track_file_access(args[0], 'parse')
            except:
                pass  # 추적 실패 시 무시
        
        return result
    search_code_content = _search_code_content
    
    # find_blocks는 특별 처리
    @auto_update_context
    def find_blocks(*args, **kwargs):
        result = _find_blocks(*args, **kwargs)
        context = _get_project_context()
        if context and result:
            file_path = args[0] if args else kwargs.get('file_path', '')
            if 'analyzed_files' not in context:
                context['analyzed_files'] = {}
            context['analyzed_files'][file_path] = {
                'blocks': result,
                'analyzed_at': datetime.now().isoformat()
            }
        return result
        
except ImportError as e:
    print(f"⚠️ 함수 import 실패: {e}")

# 검색 함수들도 context 자동 전달
try:
    from integrated_search import (
        integrated_search as _integrated_search,
        search_by_date as _search_by_date,
        search_by_file as _search_by_file
    )
    
    @auto_update_context
    def integrated_search(*args, **kwargs):
        return _integrated_search(*args, **kwargs)
    
    @auto_update_context
    def search_by_date(*args, **kwargs):
        return _search_by_date(*args, **kwargs)
        
    @auto_update_context
    def search_by_file(*args, **kwargs):
        return _search_by_file(*args, **kwargs)
        
except ImportError as e:
    print(f"⚠️ integrated_search import 실패: {e}")
print("✅ auto_tracking_wrapper.py v6.1 로드 완료 - Task 추적 기능 추가")
