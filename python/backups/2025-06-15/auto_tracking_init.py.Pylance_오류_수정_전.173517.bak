
# ===== 자동 추적 시스템 초기화 =====
# JSON REPL 세션 시작 시 자동으로 실행되는 코드

def _apply_auto_tracking(helpers_obj, context_obj):
    """helpers 객체에 자동 추적 기능 적용"""
    
    # 원본 메서드 백업
    originals = {
        'read_file': helpers_obj.read_file,
        'create_file': helpers_obj.create_file,
        'replace_block': helpers_obj.replace_block,
        'save_context': helpers_obj.save_context,
        'cmd_next': helpers_obj.cmd_next if hasattr(helpers_obj, 'cmd_next') else None
    }
    
    # read_file 래핑
    def tracked_read_file(filepath):
        result = originals['read_file'](filepath)
        if 'work_tracking' in context_obj:
            work = context_obj['work_tracking'].get('current_task_work', {})
            if 'files_accessed' not in work:
                work['files_accessed'] = []
            entry = f"{filepath} (read)"
            if entry not in work['files_accessed']:
                work['files_accessed'].append(entry)
        return result
    
    # replace_block 래핑
    def tracked_replace_block(filepath, old_block, new_block):
        result = originals['replace_block'](filepath, old_block, new_block)
        if 'work_tracking' in context_obj:
            work = context_obj['work_tracking'].get('current_task_work', {})
            if 'files_accessed' not in work:
                work['files_accessed'] = []
            if 'functions_edited' not in work:
                work['functions_edited'] = []
            work['files_accessed'].append(f"{filepath} (modified)")
            work['functions_edited'].append(f"{filepath}::{old_block[:30]}...")
        return result
    
    # save_context 래핑 (MD 파일 자동 업데이트)
    def tracked_save_context():
        result = originals['save_context']()
        try:
            # coding_flow.md 자동 생성
            import claude_code_ai_brain
            flow_content = claude_code_ai_brain._generate_coding_flow(context_obj)
            with open('coding_flow.md', 'w', encoding='utf-8') as f:
                f.write(flow_content)
        except:
            pass
        return result
    
    # 메서드 교체
    helpers_obj.read_file = tracked_read_file
    helpers_obj.replace_block = tracked_replace_block
    helpers_obj.save_context = tracked_save_context
    
    # cmd_next 래핑 (있다면)
    if originals['cmd_next']:
        def tracked_cmd_next():
            result = originals['cmd_next']()
            helpers_obj.save_context()  # 자동 저장
            return result
        helpers_obj.cmd_next = tracked_cmd_next
    
    return helpers_obj

# 자동 적용
if 'helpers' in globals() and 'context' in globals():
    _apply_auto_tracking(helpers, context)
    print("✅ 자동 추적 시스템 활성화")
