{
  "answer": "아래 내용은  \n\n1) v31.0 에서 요구하는 명령어( /wf … ) 가 동작하도록 Router 를 손보는 방법  \n2) 그 명령어들이 실제로 일을 하게 해 주는 FlowManager 의 인터페이스와 내부 자료구조  \n\n를 동시에 제시한 것입니다.  \nRouter-쪽 코드는 “어떻게 분기해야 하는가” 위주로, FlowManager 는 “무엇을 제공해야 하는가” 위주로 보시면 됩니다.\n\n────────────────────────────\n1. Router (CommandRouter) 수정 요약\n────────────────────────────\n• v30.0 까지는 “/flow …” 만 있었지만 v31.0 부터는 다음 여섯 가지 엔드포인트가 필요합니다.  \n\n  /flow                – 목록  \n  /flow create <name>  – 새 Flow  \n  /plan  add <name>    – 현재 Flow 에 Plan  추가  \n  /task  add <plan_id> <name>   – Plan 에 Task 추가  \n  /start   <task_id>   – Task 상태 planning ➜ in-progress  \n  /complete <task_id>  – Task 상태 in-progress ➜ completed  \n\n• 따라서 Router 쪽에서는 “토큰[0]” 만 보고 어떤 핸들러로 넘길지 결정하도록\n  아래처럼 얇은 dispatcher 를 두면 충분합니다.\n\n```python\n# router/dispatch.py\nfrom .router import command\n\n@command('', '')                               # ① '/'만 입력했을 때\ndef empty_command(manager, _):\n    return {'ok': True, 'message': '도움말: /flow, /plan, /task …'}\n\n@command('flow', 'f')\ndef flow_cmd(manager, args):\n    if not args:                                              # ② /flow\n        return manager.list_flows_view()\n    if args[0] == 'create':                                   # ③ /flow create\n        if len(args) < 2:\n            return {'ok': False, 'message': 'Flow 이름이 없습니다'}\n        return manager.create_flow_view(' '.join(args[1:]))\n    # ④ /flow <id or name>  : 선택\n    return manager.select_flow_view(args[0])\n\n@command('plan', 'pl')\ndef plan_cmd(manager, args):\n    if len(args) >= 2 and args[0] == 'add':                   # /plan add\n        return manager.add_plan_view(' '.join(args[1:]))\n    return manager.list_plans_view()                          # /plan\n\n@command('task', 't')\ndef task_cmd(manager, args):\n    if len(args) >= 3 and args[0] == 'add':                   # /task add\n        return manager.add_task_view(args[1], ' '.join(args[2:]))\n    return manager.help_unknown('task')\n\n@command('start', 's')\ndef start_cmd(manager, args):                                 # /start\n    return manager.start_task_view(args[0] if args else None)\n\n@command('complete', 'c')\ndef complete_cmd(manager, args):                              # /complete\n    return manager.complete_task_view(args[0] if args else None)\n```\n\n핸들러 안에서 “view” 라는 이름을 쓰는 이유는  \nFlowManager 가 실제 업무(+ 문자열 가공) 까지 담당하게 해 두면 Router 가 얇아져서 테스트가 편해지기 때문입니다.\n\n\n────────────────────────────\n2. FlowManager 설계(필수 메서드)\n────────────────────────────\n아래처럼 “데이터 계층 ↔ 문자열/응답생성 계층” 을 FlowManager 하나에 합쳐 두면\nCLI 기반에서는 충분히 단순합니다.\n\n```\nclass FlowManager:\n    ├── list_flows()               -> List[FlowDTO]              # 순수 데이터\n    ├── create_flow(name)          -> FlowDTO\n    ├── select_flow(flow_id)       -> bool                       # 현재 Flow 변경\n    ├── get_current_flow()         -> Optional[Flow]\n    ├── add_plan(name)             -> PlanDTO\n    ├── list_plans(flow_id=None)   -> List[PlanDTO]\n    ├── add_task(plan_id, name)    -> TaskDTO\n    ├── start_task(task_id)        -> bool\n    ├── complete_task(task_id)     -> bool\n    ├── ----------------------------------------------------------------\n    ├── list_flows_view()          -> Dict[str,Any]  # ↓ CLI 응답(문자열) 생성\n    ├── create_flow_view(name)     -> \"\n    ├── select_flow_view(flow_id)  -> \"\n    ├── list_plans_view()          -> \"\n    ├── add_plan_view(name)        -> \"\n    ├── add_task_view(plan_id,name)-> \"\n    ├── start_task_view(task_id)   -> \"\n    ├── complete_task_view(task_id)-> \"\n    └── help_unknown(scope)        -> \"\n```\n\n(굵은 줄 위쪽은 “순수 서비스 메서드”, 아래쪽은 “문자열 포매팅/응답”)\n\n아래는 실제 구현 골격 예시입니다.  \n설명용으로 dataclass 와 In-Memory dict 를 사용했지만, JSON 을 파일에 저장하도록\n `_save()` / `_load()` 만 추가하면 바로 영속화도 됩니다.\n\n```python\nimport uuid, json, os\nfrom dataclasses import dataclass, asdict\nfrom enum import Enum\nfrom typing import Dict, List, Optional, Any\n\nclass TaskStatus(str, Enum):\n    PLANNING   = 'planning'\n    INPROGRESS = 'in-progress'\n    DONE       = 'completed'\n\n@dataclass\nclass Task:\n    id: str\n    name: str\n    status: TaskStatus = TaskStatus.PLANNING\n\n@dataclass\nclass Plan:\n    id: str\n    name: str\n    tasks: Dict[str, Task] = None   # task_id -> Task\n\n    def __post_init__(self):\n        if self.tasks is None:\n            self.tasks = {}\n\n@dataclass\nclass Flow:\n    id: str\n    name: str\n    plans: Dict[str, Plan] = None   # plan_id -> Plan\n\n    def __post_init__(self):\n        if self.plans is None:\n            self.plans = {}\n\nclass FlowManager:\n    def __init__(self, storage='~/.flows.json'):\n        self._store_path = os.path.expanduser(storage)\n        self._flows: Dict[str, Flow] = {}\n        self._current: Optional[str] = None\n        self._load()\n\n    # ────────────────── 순수 서비스 레이어 ──────────────────\n    def list_flows(self) -> List[Dict[str, Any]]:\n        out = []\n        for f in self._flows.values():\n            out.append({\n                'id': f.id,\n                'name': f.name,\n                'plans': len(f.plans),\n                'tasks': sum(len(p.tasks) for p in f.plans.values())\n            })\n        return out\n\n    def create_flow(self, name: str) -> Dict[str, Any]:\n        new_id = str(uuid.uuid4())[:8]\n        self._flows[new_id] = Flow(id=new_id, name=name)\n        self._current = new_id\n        self._save()\n        return {'id': new_id, 'name': name}\n\n    def select_flow(self, flow_id: str) -> bool:\n        if flow_id in self._flows:\n            self._current = flow_id\n            self._save()\n            return True\n        # 이름으로도 찾기\n        for f in self._flows.values():\n            if f.name == flow_id:\n                self._current = f.id\n                self._save()\n                return True\n        return False\n\n    def get_current_flow(self) -> Optional[Flow]:\n        return self._flows.get(self._current)\n\n    def add_plan(self, name: str) -> Optional[Dict[str, Any]]:\n        flow = self.get_current_flow()\n        if not flow:\n            return None\n        pl_id = str(uuid.uuid4())[:8]\n        flow.plans[pl_id] = Plan(id=pl_id, name=name)\n        self._save()\n        return {'id': pl_id, 'name': name}\n\n    def list_plans(self, flow_id: Optional[str] = None) -> List[Dict[str,Any]]:\n        flow = self._flows.get(flow_id or self._current)\n        if not flow:\n            return []\n        res = []\n        for p in flow.plans.values():\n            res.append({'id': p.id,\n                        'name': p.name,\n                        'tasks': len(p.tasks)})\n        return res\n\n    def add_task(self, plan_id: str, name: str) -> Optional[Dict[str,Any]]:\n        flow = self.get_current_flow()\n        if not flow or plan_id not in flow.plans:\n            return None\n        t_id = str(uuid.uuid4())[:8]\n        flow.plans[plan_id].tasks[t_id] = Task(id=t_id, name=name)\n        self._save()\n        return {'id': t_id, 'name': name}\n\n    def start_task(self, task_id: str) -> bool:\n        task = self._find_task(task_id)\n        if task and task.status == TaskStatus.PLANNING:\n            task.status = TaskStatus.INPROGRESS\n            self._save()\n            return True\n        return False\n\n    def complete_task(self, task_id: str) -> bool:\n        task = self._find_task(task_id)\n        if task and task.status != TaskStatus.DONE:\n            task.status = TaskStatus.DONE\n            self._save()\n            return True\n        return False\n\n    # ────────────────── View / 메시지 생성 레이어 ──────────────────\n    def list_flows_view(self):\n        flows = self.list_flows()\n        if not flows:\n            return {'ok': True, 'message': 'Flow가 없습니다'}\n        lines = ['Flow 목록', '-'*40]\n        for i,f in enumerate(flows,1):\n            lines.append(f'{i}. {f[\"name\"]} ({f[\"plans\"]} plans, {f[\"tasks\"]} tasks) [{f[\"id\"]}]')\n        return {'ok': True, 'message':'\\n'.join(lines)}\n\n    def create_flow_view(self, name):\n        info = self.create_flow(name)\n        return {'ok': True,\n                'message': f'새 Flow 생성: {info[\"name\"]} [{info[\"id\"]}]'}\n\n    def select_flow_view(self, fid):\n        if self.select_flow(fid):\n            cur = self.get_current_flow()\n            return {'ok': True, 'message': f'Flow 선택: {cur.name} [{cur.id}]'}\n        return {'ok': False, 'message': '해당 Flow 를 찾을 수 없습니다'}\n\n    def list_plans_view(self):\n        plans = self.list_plans()\n        if not plans:\n            return {'ok': True, 'message': 'Plan 이 없습니다'}\n        lines=['Plan 목록','-'*30]\n        for i,p in enumerate(plans,1):\n            lines.append(f'{i}. {p[\"name\"]} ({p[\"tasks\"]} tasks) [{p[\"id\"]}]')\n        return {'ok': True,'message':'\\n'.join(lines)}\n\n    def add_plan_view(self, name):\n        res = self.add_plan(name)\n        if res:\n            return {'ok':True,\n                'message':f'Plan 추가: {res[\"name\"]} [{res[\"id\"]}]'}\n        return {'ok':False,'message':'먼저 Flow 를 선택하세요'}\n\n    def add_task_view(self, plan_id, name):\n        res = self.add_task(plan_id, name)\n        if res:\n            return {'ok':True,\n                'message':f'Task 추가: {res[\"name\"]} [{res[\"id\"]}]'}\n        return {'ok':False,'message':'Plan ID 가 잘못되었거나 Flow 가 선택되지 않았습니다'}\n\n    def start_task_view(self, task_id):\n        if not task_id:\n            return {'ok':False,'message':'task_id 가 필요합니다'}\n        return {'ok':self.start_task(task_id),\n                'message':('Task 시작' if self.start_task(task_id)\n                           else '시작할 수 없는 Task')}\n\n    def complete_task_view(self, task_id):\n        if not task_id:\n            return {'ok':False,'message':'task_id 가 필요합니다'}\n        return {'ok':self.complete_task(task_id),\n                'message':('Task 완료' if self.complete_task(task_id)\n                           else '완료할 수 없는 Task')}\n\n    def help_unknown(self, scope):\n        return {'ok':False,'message':f'알 수 없는 {scope} 명령'}\n\n    # ────────────────── 내부 helper / persistence ──────────────────\n    def _find_task(self, task_id) -> Optional[Task]:\n        flow = self.get_current_flow()\n        if not flow:\n            return None\n        for p in flow.plans.values():\n            if task_id in p.tasks:\n                return p.tasks[task_id]\n        return None\n\n    def _load(self):\n        try:\n            with open(self._store_path) as fp:\n                raw=json.load(fp)\n            self._current = raw.get('current')\n            for fid,fdata in raw.get('flows',{}).items():\n                flow = Flow(id=fid, name=fdata['name'])\n                for plid,pldata in fdata.get('plans',{}).items():\n                    plan = Plan(id=plid, name=pldata['name'])\n                    for tid,tdata in pldata.get('tasks',{}).items():\n                        plan.tasks[tid] = Task(id=tid,\n                                               name=tdata['name'],\n                                               status=TaskStatus(tdata['status']))\n                    flow.plans[plid]=plan\n                self._flows[fid]=flow\n        except FileNotFoundError:\n            pass\n\n    def _save(self):\n        os.makedirs(os.path.dirname(self._store_path), exist_ok=True)\n        obj={'current':self._current,'flows':{}}\n        for fid,f in self._flows.items():\n            obj['flows'][fid]={'name':f.name,'plans':{}}\n            for plid,p in f.plans.items():\n                obj['flows'][fid]['plans'][plid]={'name':p.name,'tasks':{}}\n                for tid,t in p.tasks.items():\n                    obj['flows'][fid]['plans'][plid]['tasks'][tid]={\n                        'name':t.name,'status':t.status.value}\n        with open(self._store_path,'w') as fp:\n            json.dump(obj,fp,indent=2)\n```\n\n────────────────────────────\n3. 적용 방법\n────────────────────────────\n1) `router/dispatch.py`(또는 기존 CommandRouter 모듈)에          위 1-번 코드를 추가  \n2) `flow_manager.py`(또는 기존 FlowManager 모듈)에               위 2-번 클래스를 추가/교체  \n3) 기존 CommandRouter 가 `manager = FlowManager()` 식으로\n   싱글턴(or DI) 주입받도록 수정\n\n이렇게 하면 v31.0 에서 요구하는 모든 명령이 다음과 같이 동작합니다.\n\n```\n/flow create 프로젝트A\n/plan add UI개선\n/task add 92af0ce2 메인화면 디자인\n/start 57ab3aa1\n/complete 57ab3aa1\n/flow                         # 목록 확인\n```\n\n“planning → in-progress → completed” 의 상태 전이 역시 정상적으로 기록되며  \n프로그램을 종료했다가 재실행해도 `~/.flows.json` 에 저장된 내용이 그대로 복원됩니다.",
  "reasoning_effort": "high",
  "usage": {
    "prompt_tokens": 418,
    "completion_tokens": 4716,
    "total_tokens": 5134,
    "reasoning_tokens": 0
  }
}