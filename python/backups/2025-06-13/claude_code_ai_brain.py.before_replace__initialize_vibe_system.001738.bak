"""
🤖 클로드코드 통합 AI Brain 시스템 v2.0
=======================================

클로드코드 execute_code 환경을 위한 완전 통합 AI 두뇌 시스템
- 리팩토링된 context_manager와 vibe_memory_system 통합
- 자동 세션 복원
- 프로젝트 관리  
- 지식 베이스
- 메모리 시스템 통합

작성자: Claude + 사용자 협업
생성일: 2025-06-04
수정일: 2025-06-12 (v2.0 - 모듈 구조 개선)
"""

import os
import json
import logging
import datetime as dt
from pathlib import Path
from typing import Union, Optional, Dict, Any
import sys

# Auto-tracking wrapper import
try:
    from auto_tracking_wrapper import *
    print("✅ 자동 추적 래퍼 로드 - 모든 파일 작업이 자동으로 추적됩니다")
except ImportError:
    print("⚠️ 자동 추적 래퍼 로드 실패 - 원본 모듈 사용")
    from file_system_helpers import *
    from ast_parser_helpers import *

# Context Manager 공개 API import
try:
    from context_manager import (
        initialize_context,
        save_context,
        update_cache,
        get_value,
        find_symbol,
        track_file_access,
        track_function_edit,
        get_work_tracking_summary
    )
    CONTEXT_MANAGER_AVAILABLE = True
    print("✅ Context Manager v2.0 로드 완료")
except ImportError as e:
    CONTEXT_MANAGER_AVAILABLE = False
    print(f"⚠️ Context Manager 로드 실패: {e}")

# Vibe Memory System 공개 API import
try:
    from vibe_memory_system import (
        sync_to_files,
        auto_save,
        force_sync,
        save_coding_experience,
        search_coding_solutions,
        get_coding_insights
    )
    VIBE_MEMORY_AVAILABLE = True
    print("✅ Vibe Memory System v2.0 로드 완료")
except ImportError as e:
    VIBE_MEMORY_AVAILABLE = False
    print(f"⚠️ Vibe Memory System 로드 실패: {e}")

# Vibe 내부 함수들 (필요시)
try:
    import vibe_memory_system
    VIBE_MODULE_AVAILABLE = True
except ImportError:
    vibe_memory_system = None
    VIBE_MODULE_AVAILABLE = False


class SimpleLogger:
    """간단한 로거 클래스 - 모든 메시지를 콘솔에 출력"""
    def info(self, msg): print(f"[INFO] {msg}")
    def warning(self, msg): print(f"[WARNING] {msg}")
    def error(self, msg): print(f"[ERROR] {msg}")
    def debug(self, msg): print(f"[DEBUG] {msg}")


class ClaudeCodeAIBrain:
    """
    클로드코드 환경을 위한 완전 통합 AI 두뇌 시스템 v2.0
    - 리팩토링된 모듈 구조 통합
    - 자동 세션 복원 + 프로젝트 관리 + 지식 베이스 + 메모리 시스템
    """
    
    def __init__(self, project_path: Optional[str] = None):
        """AI Brain 초기화 - v2.0"""
        # 기본 속성 초기화
        self.initialized: bool = False
        self.project_context: Optional[Dict[str, Any]] = None
        self.session_manager: Dict[str, Any] = {}
        self.task_manager: Dict[str, Any] = {}
        self.vibe_manager = None
        self.vibe_commands = None
        self.hierarchical_manager = None
        self.knowledge_manager = None
        self.memory_systems: Dict[str, Any] = {}
        
        # logger 초기화
        self.logger = self._setup_logger()
        
        # project_path 초기화
        if project_path:
            self.project_path = os.path.abspath(project_path)
        else:
            self.project_path = os.path.dirname(os.path.abspath(__file__))
        
        self.logger.info(f"ClaudeCodeAIBrain v2.0 초기화 - 프로젝트 경로: {self.project_path}")
        self.session_file_path = os.path.join(self.project_path, 'session_cache', 'latest_session.json')
    
    def _setup_logger(self) -> Union[logging.Logger, SimpleLogger]:
        """로거 설정"""
        try:
            logger = logging.getLogger('ClaudeCodeAIBrain')
            
            if logger.handlers:
                return logger
            
            logger.setLevel(logging.INFO)
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.INFO)
            
            formatter = logging.Formatter(
                '[%(asctime)s] %(name)s - %(levelname)s: %(message)s',
                datefmt='%H:%M:%S'
            )
            console_handler.setFormatter(formatter)
            logger.addHandler(console_handler)
            
            return logger
            
        except Exception as e:
            print(f"Logger 설정 실패, 기본 출력 모드: {e}")
            return SimpleLogger()

    def auto_initialize(self, project_path: Optional[str] = None, force_reinit: bool = False) -> bool:
        """AI Brain 자동 초기화 - v2.0"""
        try:
            self.logger.info("=== AI Brain v2.0 초기화 시작 ===")
            
            # project_path 업데이트
            if project_path:
                self.project_path = os.path.abspath(project_path)
                self.logger.info(f"프로젝트 경로 업데이트: {self.project_path}")
            
            # 1. Context Manager를 통한 초기화
            if CONTEXT_MANAGER_AVAILABLE:
                self.logger.info("Context Manager v2.0 사용하여 초기화...")
                project_name = os.path.basename(self.project_path)
                
                # 새 컨텍스트 초기화
                self.project_context = initialize_context(self.project_path, project_name)
                
                # AI Brain 상태 업데이트
                update_cache(self.project_context, 'ai_brain_status', 'initializing')
                update_cache(self.project_context, 'ai_brain_version', 'v2.0')
                
                self.logger.info(f"Context 초기화 완료 - 세션 ID: {self.project_context.get('session_id', 'unknown')}")
            else:
                # Context Manager 없이 기본 초기화
                self._initialize_minimal_context()
            
            # 2. Vibe Memory System 초기화
            if VIBE_MODULE_AVAILABLE and self.project_context:
                self._initialize_vibe_system()
            
            # 3. 기본 컴포넌트 초기화
            self._initialize_basic_components()
            
            # 4. 초기 세션 백업
            self._create_session_backup()
            
            # 5. 상태 업데이트
            if CONTEXT_MANAGER_AVAILABLE and self.project_context:
                update_cache(self.project_context, 'ai_brain_status', 'active')
            
            self.logger.info("AI Brain v2.0 초기화 완료")
            self.initialized = True
            return True
            
        except Exception as e:
            self.logger.error(f"AI Brain 초기화 실패: {e}")
            
            # 최소 모드로 초기화
            try:
                self._initialize_minimal_mode()
                self.logger.info("최소 모드로 초기화 완료")
                self.initialized = True
                return True
            except Exception as minimal_error:
                self.logger.error(f"최소 모드 초기화도 실패: {minimal_error}")
                return False

    def _initialize_minimal_context(self):
        """최소한의 컨텍스트 초기화"""
        import uuid
        self.project_context = {
            'session_id': str(uuid.uuid4()),
            'project_name': os.path.basename(self.project_path),
            'project_path': self.project_path,
            'version': 'v2.0-minimal',
            'created_at': dt.datetime.now().isoformat(),
            'cache': {},
            'stats': {}
        }
        self.logger.info("최소 컨텍스트 초기화 완료")

    def _initialize_vibe_system(self):
        """Vibe Memory System 초기화"""
        try:
            if not VIBE_MODULE_AVAILABLE or not vibe_memory_system:
                self.logger.warning("Vibe Memory System 모듈 사용 불가")
                return
            
            # VibeMemoryManager 초기화
            self.vibe_manager = vibe_memory_system.VibeMemoryManager(
                self.project_context,
                self.project_context.get('project_name', 'ai-coding-brain-mcp')
            )
            
            # VibeCommandSystem 초기화
            self.vibe_commands = vibe_memory_system.VibeCommandSystem(self.project_context)
            
            self.logger.info("✅ Vibe Memory System v2.0 초기화 완료")
            self.logger.info("   사용 가능한 명령어: /task, /flow, /done, /focus, /roadmap, /vision, /stats, help")
            
            # 명령어 처리 메서드 추가
            def process_vibe_command(command_text: str) -> str:
                if self.vibe_commands:
                    return self.vibe_commands.execute(command_text)
                else:
                    return "❌ Vibe system not initialized"
            
            self.process_vibe_command = process_vibe_command
            
        except Exception as e:
            self.logger.error(f"Vibe System 초기화 실패: {e}")

    def _initialize_basic_components(self):
        """기본 컴포넌트 초기화"""
        self.session_manager = {
            "status": "active",
            "initialized": True,
            "version": "v2.0"
        }
        
        self.task_manager = {
            "status": "active",
            "initialized": True,
            "tasks": []
        }
        
        self.logger.info("기본 컴포넌트 초기화 완료")

    def _create_session_backup(self):
        """세션 백업 생성"""
        try:
            # 세션 캐시 디렉토리 생성
            session_cache_dir = os.path.join(self.project_path, 'session_cache')
            os.makedirs(session_cache_dir, exist_ok=True)
            
            # 세션 백업 데이터
            backup_data = {
                'session_id': self.project_context.get('session_id') if self.project_context else None,
                'timestamp': dt.datetime.now().isoformat(),
                'version': 'v2.0',
                'project_context': self.project_context,
                'status': 'active'
            }
            
            # 백업 파일 저장
            backup_file = os.path.join(session_cache_dir, 'latest_session.json')
            with open(backup_file, 'w', encoding='utf-8') as f:
                json.dump(backup_data, f, ensure_ascii=False, indent=2)
            
            self.logger.info(f"세션 백업 생성 완료: {backup_file}")
            
        except Exception as e:
            self.logger.warning(f"세션 백업 생성 실패 (무시): {e}")

    def _initialize_minimal_mode(self):
        """최소 모드 초기화"""
        self._initialize_minimal_context()
        self.session_manager = {"status": "minimal"}
        self.task_manager = {"status": "minimal"}

    def save_session(self) -> bool:
        """세션 저장"""
        try:
            # Context Manager를 통한 저장
            if CONTEXT_MANAGER_AVAILABLE and self.project_context:
                save_context()
                self.logger.info("Context Manager를 통한 세션 저장 완료")
            
            # Vibe Memory 동기화
            if VIBE_MEMORY_AVAILABLE:
                sync_to_files()
                self.logger.info("Vibe Memory 동기화 완료")
            
            # 백업 생성
            self._create_session_backup()
            
            return True
            
        except Exception as e:
            self.logger.error(f"세션 저장 실패: {e}")
            return False

    def track_operation(self, operation_type: str, details: Dict[str, Any]):
        """작업 추적"""
        if CONTEXT_MANAGER_AVAILABLE and self.project_context:
            if operation_type == 'file_access':
                track_file_access(self.project_context, details.get('file_path', ''), details.get('operation', 'read'))
            elif operation_type == 'function_edit':
                track_function_edit(
                    self.project_context,
                    details.get('file_path', ''),
                    details.get('function_name', ''),
                    details.get('class_name')
                )

    def save_experience(self, experience_data: Union[str, Dict[str, Any]]):
        """개발 경험 저장"""
        if VIBE_MEMORY_AVAILABLE:
            result = save_coding_experience(experience_data, self.project_context)
            self.logger.info(f"경험 저장: {result}")

    def search_solutions(self, query: str, limit: int = 10) -> Dict[str, Any]:
        """해결책 검색"""
        if VIBE_MEMORY_AVAILABLE:
            return search_coding_solutions(query, self.project_context, limit=limit)
        return {"status": "error", "message": "Vibe Memory not available", "results": []}

    def get_insights(self) -> Dict[str, Any]:
        """코딩 인사이트 조회"""
        if VIBE_MEMORY_AVAILABLE:
            return get_coding_insights(self.project_context)
        return {"status": "error", "message": "Vibe Memory not available"}


class DummyAIBrain:
    """Fallback AI Brain - ClaudeCodeAIBrain 생성 실패시 사용"""
    
    def __init__(self, project_path: Optional[str] = None):
        """더미 AI Brain 초기화"""
        self.initialized: bool = False
        self.project_context: Dict[str, Any] = {
            'name': 'dummy',
            'base_path': project_path or '.',
            'version': 'dummy'
        }
        self.session_manager: Dict[str, Any] = {'status': 'dummy'}
        self.task_manager: Dict[str, Any] = {'status': 'dummy'}
        self.vibe_manager = None
        self.vibe_commands = None
        self.logger = SimpleLogger()
        self.project_path: str = project_path or '.'
    
    def save_session(self) -> bool:
        """더미 세션 저장"""
        return True
    
    def process_vibe_command(self, command: str) -> str:
        """더미 Vibe 명령어 처리"""
        return "Dummy AI Brain - Vibe commands not available"
    
    def save_experience(self, experience_data: Union[str, Dict[str, Any]]):
        """더미 경험 저장 메서드"""
        self.logger.info("DummyAIBrain - save_experience called (no-op)")
        return {"status": "dummy", "message": "Experience not saved in dummy mode"}
    
    def track_operation(self, operation_type: str, details: Dict[str, Any]):
        """더미 작업 추적"""
        self.logger.info(f"DummyAIBrain - track_operation: {operation_type}")
    
    def search_solutions(self, query: str, limit: int = 10) -> Dict[str, Any]:
        """더미 솔루션 검색"""
        return {"status": "dummy", "message": "Search not available in dummy mode", "results": []}
    
    def get_insights(self) -> Dict[str, Any]:
        """더미 인사이트 조회"""
        return {"status": "dummy", "message": "Insights not available in dummy mode"}


def create_ai_brain(project_path: Optional[str] = None, restore_session: Optional[bool] = None) -> Union[ClaudeCodeAIBrain, DummyAIBrain]:
    """
    AI Brain 인스턴스 생성 및 초기화 (v2.0)
    
    Args:
        project_path: 프로젝트 경로
        restore_session: 세션 복원 여부
    
    Returns:
        AI Brain 인스턴스
    """
    try:
        print("🤖 AI Brain v2.0 시작...")
        print("   • Context Manager v2.0 통합")
        print("   • Vibe Memory System v2.0 통합")
        
        # 프로젝트 경로 설정
        if not project_path:
            project_path = os.path.dirname(os.path.abspath(__file__))
        
        # AI Brain 인스턴스 생성
        brain = ClaudeCodeAIBrain(project_path=project_path)
        
        # 초기화
        force_reinit = restore_session is None
        success = brain.auto_initialize(project_path=project_path, force_reinit=force_reinit)
        
        if success:
            print("✅ ClaudeCodeAIBrain v2.0 초기화 성공!")
            
            # 초기화 상태 요약
            if brain.project_context:
                print(f"   • 세션 ID: {brain.project_context.get('session_id', 'unknown')[:8]}...")
                print(f"   • 프로젝트: {brain.project_context.get('project_name', 'unknown')}")
                
                if brain.vibe_commands:
                    print("   • Vibe Commands: 활성화")
                
                if CONTEXT_MANAGER_AVAILABLE:
                    summary = get_work_tracking_summary(brain.project_context)
                    total_files = summary.get('total_files_accessed', 0)
                    if total_files > 0:
                        print(f"   • 작업 추적: {total_files}개 파일")
            
            return brain
        else:
            print("⚠️ ClaudeCodeAIBrain 초기화 부분 실패 - 기본 모드")
            return brain
            
    except Exception as e:
        print(f"❌ ClaudeCodeAIBrain 생성 실패: {e}")
        
        # 더미 객체 반환
        try:
            dummy_brain = DummyAIBrain(project_path=project_path)
            print("ℹ️ 더미 AI Brain 객체 생성됨")
            return dummy_brain
        except:
            # 최악의 경우 기본 더미 객체
            return DummyAIBrain()


def claude_code_bootstrap():
    """execute_code 첫 실행시 자동 부트스트랩"""
    print("🚀 클로드코드 AI Brain v2.0 부트스트랩 시작...")
    
    # AI Brain 생성 및 초기화
    brain = create_ai_brain()
    
    # 글로벌 변수 설정
    if brain and brain.initialized:
        globals()['ai_brain'] = brain
        print("✅ AI Brain이 글로벌 변수로 설정됨")
        
        # 사용 가능한 기능 안내
        print("\n📌 사용 가능한 기능:")
        print("   • ai_brain.process_vibe_command('/task \"작업 내용\"')")
        print("   • ai_brain.save_experience('경험 내용')")
        print("   • ai_brain.search_solutions('검색어')")
        print("   • ai_brain.get_insights()")
        print("   • ai_brain.save_session()")
    
    print("\n✅ 부트스트랩 완료!")


# 테스트 함수들
def test_ai_brain_v2():
    """AI Brain v2.0 통합 테스트"""
    print("\n" + "="*70)
    print("🧪 AI Brain v2.0 통합 테스트")
    print("="*70)
    
    # 1. AI Brain 생성
    print("\n1️⃣ AI Brain 생성 테스트...")
    brain = create_ai_brain()
    
    if not brain or not brain.initialized:
        print("❌ AI Brain 생성 실패")
        return False
    
    print("✅ AI Brain 생성 성공")
    
    # 2. Vibe 명령어 테스트
    if hasattr(brain, 'process_vibe_command'):
        print("\n2️⃣ Vibe 명령어 테스트...")
        
        test_commands = [
            ('/task "AI Brain v2.0 테스트"', "작업 추가"),
            ('/focus "테스트 단계"', "포커스 설정"),
            ('/flow', "현재 상태 확인"),
            ('/stats', "통계 확인")
        ]
        
        for cmd, desc in test_commands:
            print(f"\n   • {desc}: {cmd}")
            try:
                result = brain.process_vibe_command(cmd)
                print(f"     → 결과: {result[:100]}..." if len(result) > 100 else f"     → 결과: {result}")
            except Exception as e:
                print(f"     → 오류: {e}")
    
    # 3. 경험 저장 테스트
    if hasattr(brain, 'save_experience'):
        print("\n3️⃣ 경험 저장 테스트...")
        try:
            brain.save_experience({
                'task': 'AI Brain v2.0 테스트',
                'solution': '리팩토링된 모듈 구조로 성공적으로 통합',
                'tech_stack': ['Python', 'Context Manager', 'Vibe Memory']
            })
            print("   ✅ 경험 저장 성공")
        except Exception as e:
            print(f"   ❌ 경험 저장 실패: {e}")
    
    # 4. 세션 저장 테스트
    print("\n4️⃣ 세션 저장 테스트...")
    try:
        success = brain.save_session()
        print(f"   {'✅' if success else '❌'} 세션 저장 {'성공' if success else '실패'}")
    except Exception as e:
        print(f"   ❌ 세션 저장 오류: {e}")
    
    print("\n" + "="*70)
    print("✅ AI Brain v2.0 테스트 완료!")
    print("="*70)
    
    return True


# 메인 실행
if __name__ == "__main__":
    print("\n🤖 Claude Code AI Brain v2.0")
    print("   리팩토링된 모듈 구조 통합 완료")
    print("   - Context Manager v2.0")
    print("   - Vibe Memory System v2.0")
    
    # 테스트 실행
    test_ai_brain_v2()
