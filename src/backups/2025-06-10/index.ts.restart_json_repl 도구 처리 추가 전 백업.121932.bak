/**
 * AI Coding Brain MCP Server v2.0.0
 * Integrated MCP server with 15 tools (1 implemented, 14 pending)
 */

import { Server } from '@modelcontextprotocol/sdk/server/index.js';
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';
import { 
  CallToolRequestSchema, 
  ErrorCode, 
  ListToolsRequestSchema, 
  McpError 
} from '@modelcontextprotocol/sdk/types.js';

import { createLogger } from './services/logger';
import { defaultRepositoryFactory } from './core/infrastructure/index';
import { toolDefinitions } from './tools/tool-definitions';

// 핸들러 클래스들 import
import { ExecuteCodeHandler } from './handlers/execute-code-handler';
import { SessionManagementHandler } from './handlers/session-management-handler';

// 로거 초기화
const logger = createLogger('ai-coding-brain-mcp');

/**
 * AI Coding Brain MCP 서버 클래스 (리팩토링 버전)
 */
class AICodingBrainMCP {
  private server: Server;

  constructor() {
    this.server = new Server(
      {
        name: 'ai-coding-brain-mcp',
        version: '2.0.0',
      },
      {
        capabilities: {
          tools: {},
        },
      }
    );

    this.setupToolHandlers();
    this.setupErrorHandling();
  }

  /**
   * 도구 핸들러 설정
   */
  private setupToolHandlers(): void {
    // 도구 목록 제공
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      return {
        tools: toolDefinitions,
      };
    });

    // 도구 실행 핸들러 (간소화된 라우팅)
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params;

      try {
        // AI 엔진 - execute_code (주요 도구)
        if (name === 'execute_code') {
          // 도구별 처리
          if (name === 'execute_code') {
            return await ExecuteCodeHandler.handleExecuteCode(args as { code: string; language?: string });
          } else if (name === 'restart_session') {
            const sessionHandler = new SessionManagementHandler();
            return await sessionHandler.handleRestartSession(request);
          } else {
            throw new McpError(
              ErrorCode.MethodNotFound,
              `Unknown tool: ${name}`
            );
          }
        }

        // TODO: Implement remaining 14 tools
        throw new McpError(
          ErrorCode.MethodNotFound,
          `Tool '${name}' not implemented yet. Only 'execute_code' available.`
        );
      } catch (error) {
        logger.error(`Tool execution error [${name}]:`, error);
        
        if (error instanceof McpError) {
          throw error;
        }
        
        throw new McpError(
          ErrorCode.InternalError,
          `Tool execution failed: ${error instanceof Error ? error.message : String(error)}`
        );
      }
    });
  }

  /**
   * 에러 핸들링 설정
   */
  private setupErrorHandling(): void {
    this.server.onerror = (error) => {
      logger.error('MCP Server error:', error);
    };

    process.on('SIGINT', async () => {
      logger.info('Shutting down AI Coding Brain MCP server...');
      await this.server.close();
      process.exit(0);
    });
  }

  /**
   * 서버 시작
   */
  public async start(): Promise<void> {
    const transport = new StdioServerTransport();
    await this.server.connect(transport);
    
    // Repository 헬스 체크 (로깅 최소화)
    const healthCheck = await defaultRepositoryFactory.healthCheck();
    if (healthCheck.status === 'unhealthy') {
      logger.error(`Repository health check failed: ${healthCheck.rootDir}`);
    }
    
    logger.info('AI Coding Brain MCP server v2.0.0 started successfully');
    logger.info('1 tool loaded: execute_code (AI Engine)');
  }
}

/**
 * 메인 실행 함수
 */
async function main(): Promise<void> {
  try {
    const mcpServer = new AICodingBrainMCP();
    await mcpServer.start();
  } catch (error) {
    logger.error('Failed to start MCP server:', error);
    process.exit(1);
  }
}

// 서버 시작
if (require.main === module) {
  main().catch((error) => {
    console.error('Fatal error:', error);
    process.exit(1);
  });
}

export { AICodingBrainMCP };
