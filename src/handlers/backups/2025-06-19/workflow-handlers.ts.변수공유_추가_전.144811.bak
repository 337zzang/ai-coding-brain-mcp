import { ExecuteCodeHandler } from './execute-code-handler.js';

// ========== 프로젝트 워크플로우 핸들러 ==========

interface ToolResponse {
    content: Array<{
        type: string;
        text: string;
    }>;
}

/**
 * 프로젝트 전환 핸들러
 */
export async function handleFlowProject(params: { project_name: string }): Promise<ToolResponse> {
    const code = `
# 프로젝트 전환
result = helpers.cmd_flow("${params.project_name}")
print(result)
`;
    return ExecuteCodeHandler.handleExecuteCode({ code, language: 'python' });
}

/**
 * 계획 수립 핸들러
 */
export async function handlePlanProject(params: { plan_name?: string, description?: string }): Promise<ToolResponse> {
    const code = `
# 계획 수립
result = helpers.cmd_plan(${params.plan_name ? `"${params.plan_name}"` : 'None'}, ${params.description ? `"${params.description}"` : 'None'})
print(result)
`;
    return ExecuteCodeHandler.handleExecuteCode({ code, language: 'python' });
}

/**
 * 작업 관리 핸들러
 */
export async function handleTaskManage(params: { action: string, args?: string[] }): Promise<ToolResponse> {
    const argsStr = params.args ? params.args.map(arg => `"${arg}"`).join(', ') : '';
    const code = `
# 작업 관리
helpers.cmd_task("${params.action}"${argsStr ? ', ' + argsStr : ''})
`;
    return ExecuteCodeHandler.handleExecuteCode({ code, language: 'python' });
}

/**
 * 다음 작업 핸들러
 */
export async function handleNextTask(_params: {}): Promise<ToolResponse> {
    const code = `
# 다음 작업 진행
helpers.cmd_next()
`;
    return ExecuteCodeHandler.handleExecuteCode({ code, language: 'python' });
}
