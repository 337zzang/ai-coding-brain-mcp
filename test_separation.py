"\"\"\"\nstart_project / flow_project 분리 테스트\n\"\"\"\nimport os\nimport sys\nfrom pathlib import Path\n\n# Python 경로 설정\nsys.path.insert(0, './python')\n\nfrom enhanced_flow import start_project, flow_project\nfrom helper_result import HelperResult\n\ndef test_start_project():\n    \"\"\"새 프로젝트 생성 테스트\"\"\"\n    print(\"\\n=== Test 1: 새 프로젝트 생성 ===\")\n\n    # 테스트 프로젝트 이름\n    test_project = \"test-separation-demo\"\n\n    # 1. 새 프로젝트 생성\n    result = start_project(test_project, init_git=False)\n\n    if hasattr(result, 'ok'):\n        if result.ok:\n            print(f\"✅ 프로젝트 '{test_project}' 생성 성공\")\n            print(f\"   데이터: {type(result.data)}\")\n        else:\n            print(f\"❌ 프로젝트 생성 실패: {result.error}\")\n    else:\n        print(f\"❓ 예상치 못한 결과: {type(result)}\")\n\n    return test_project\n\ndef test_flow_existing():\n    \"\"\"기존 프로젝트 진입 테스트\"\"\"\n    print(\"\\n=== Test 2: 기존 프로젝트 진입 ===\")\n\n    # ai-coding-brain-mcp로 돌아오기\n    result = flow_project(\"ai-coding-brain-mcp\")\n\n    if hasattr(result, 'ok'):\n        if result.ok:\n            print(\"✅ 기존 프로젝트 진입 성공\")\n        else:\n            print(f\"❌ 진입 실패: {result.error}\")\n    else:\n        # dict 형태로 반환된 경우\n        if isinstance(result, dict) and result.get('success'):\n            print(\"✅ 기존 프로젝트 진입 성공 (dict)\")\n        else:\n            print(\"❌ 진입 실패\")\n\ndef test_flow_nonexistent():\n    \"\"\"존재하지 않는 프로젝트 진입 시도\"\"\"\n    print(\"\\n=== Test 3: 존재하지 않는 프로젝트 진입 ===\")\n\n    try:\n        result = flow_project(\"nonexistent-project-xyz\")\n        print(f\"❌ 예외가 발생하지 않음: {result}\")\n    except FileNotFoundError as e:\n        print(f\"✅ 예상된 FileNotFoundError 발생: {e}\")\n    except Exception as e:\n        print(f\"❓ 다른 예외 발생: {type(e).__name__}: {e}\")\n\ndef test_duplicate_creation():\n    \"\"\"중복 생성 시도\"\"\"\n    print(\"\\n=== Test 4: 중복 프로젝트 생성 시도 ===\")\n\n    # 이미 존재하는 프로젝트 생성 시도\n    result = start_project(\"ai-coding-brain-mcp\", init_git=False)\n\n    if hasattr(result, 'ok'):\n        if not result.ok and \"이미 존재\" in str(result.error):\n            print(\"✅ 중복 생성 방지 동작\")\n            print(f\"   에러 메시지: {result.error}\")\n        else:\n            print(\"❌ 중복 생성이 허용됨\")\n    else:\n        print(f\"❓ 예상치 못한 결과: {type(result)}\")\n\nif __name__ == \"__main__\":\n    print(\"=== start_project / flow_project 분리 테스트 시작 ===\")\n\n    # 테스트 실행\n    test_project = test_start_project()\n    test_flow_existing()\n    test_flow_nonexistent()\n    test_duplicate_creation()\n\n    # 정리 - 테스트 프로젝트 삭제\n    if test_project:\n        import shutil\n        test_path = Path.home() / \"Desktop\" / test_project\n        if test_path.exists():\n            shutil.rmtree(test_path)\n            print(f\"\\n🧹 테스트 프로젝트 '{test_project}' 정리 완료\")\n\n    print(\"\\n=== 테스트 완료 ===\")\n"