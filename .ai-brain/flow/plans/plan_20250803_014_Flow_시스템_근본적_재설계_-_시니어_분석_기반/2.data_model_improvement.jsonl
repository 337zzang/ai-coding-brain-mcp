{"timestamp": "2025-08-03T23:18:43.907225", "event_type": "TASK_INFO", "ts": "2025-08-03T23:18:43.907225", "type": "TASK_INFO", "title": "[높음] Plan.tasks 데이터 모델 개선", "priority": "high", "estimate": "4h", "description": ""}
{"timestamp": "2025-08-03T23:18:56.154685", "event_type": "ANALYZE", "ts": "2025-08-03T23:18:56.154685", "type": "ANALYZE", "target": "python/ai_helpers_new/domain/models.py", "findings": "\n현재 구조 분석:\n1. Plan.tasks는 Dict[str, Task] 타입\n2. 이로 인해 for task in plan.tasks 시 key(string)만 반환\n3. 순서 보장이 안되고 직관적이지 않음\n"}
{"timestamp": "2025-08-03T23:19:27.767121", "event_type": "DESIGN", "ts": "2025-08-03T23:19:27.767121", "type": "DESIGN", "content": "\n## 🎯 Task 2: Plan.tasks 데이터 모델 개선\n\n### 목표\nPlan.tasks를 더 직관적이고 사용하기 쉬운 구조로 개선\n\n### 현재 문제점\n1. `Dict[str, Task]` 구조로 인한 순회 시 혼란\n2. `for task in plan.tasks` → task는 문자열(key)\n3. 순서 보장 안됨\n4. 번호 기반 접근 불편\n\n### 설계 옵션 비교\n\n#### Option 1: List 구조 (직관성 최우선)\n```python\n@dataclass\nclass Plan:\n    tasks: List[Task] = field(default_factory=list)\n    _task_index: Dict[str, int] = field(default_factory=dict, init=False, repr=False)\n\n    def add_task(self, task: Task) -> None:\n        self.tasks.append(task)\n        self._task_index[task.id] = len(self.tasks) - 1\n\n    def get_task(self, task_id: str) -> Optional[Task]:\n        idx = self._task_index.get(task_id)\n        return self.tasks[idx] if idx is not None else None\n```\n\n**장점:**\n- 직관적인 순회: `for task in plan.tasks`\n- 순서 보장\n- 번호 접근 쉬움: `plan.tasks[0]`\n\n**단점:**\n- ID 검색 시 O(n) → 인덱스로 개선 필요\n- 삭제 시 인덱스 재계산 필요\n\n#### Option 2: OrderedDict 구조 (균형형)\n```python\nfrom collections import OrderedDict\n\n@dataclass \nclass Plan:\n    tasks: OrderedDict[str, Task] = field(default_factory=OrderedDict)\n\n    def get_task_list(self) -> List[Task]:\n        return list(self.tasks.values())\n\n    def get_task_by_number(self, number: int) -> Optional[Task]:\n        tasks = self.get_task_list()\n        if 0 <= number-1 < len(tasks):\n            return tasks[number-1]\n        return None\n\n    def iter_tasks(self):\n        \"\"\"직관적인 순회를 위한 헬퍼\"\"\"\n        return self.tasks.values()\n```\n\n**장점:**\n- 순서 보장 (Python 3.7+)\n- ID 검색 O(1) 유지\n- 기존 코드와 호환성 좋음\n\n**단점:**\n- 여전히 `.values()` 필요\n- OrderedDict import 필요\n\n### 결정: Option 2 (OrderedDict) 선택\n\n**이유:**\n1. 기존 코드와의 호환성\n2. 성능 특성 유지 (O(1) 검색)\n3. 헬퍼 메서드로 직관성 보완 가능\n4. 마이그레이션 리스크 최소화\n"}
{"timestamp": "2025-08-03T23:19:27.767121", "event_type": "TODO", "ts": "2025-08-03T23:19:27.767121", "type": "TODO", "items": ["models.py의 Plan 클래스 수정 - OrderedDict 적용", "헬퍼 메서드 추가 - get_task_list(), get_task_by_number(), iter_tasks()", "FlowRepository 수정 - JSON 저장/로드 시 순서 유지", "기존 데이터 마이그레이션 스크립트 작성", "단위 테스트 작성 - 순서 보장, 헬퍼 메서드 검증"]}
{"timestamp": "2025-08-03T23:20:06.931756", "event_type": "CODE", "ts": "2025-08-03T23:20:06.931756", "type": "CODE", "action": "modify", "file": "python/ai_helpers_new/domain/models.py", "summary": "Plan.tasks를 OrderedDict로 변경하고 헬퍼 메서드 추가"}
{"timestamp": "2025-08-03T23:21:15.473375", "event_type": "CODE", "ts": "2025-08-03T23:21:15.473375", "type": "CODE", "action": "modify", "file": "python/ai_helpers_new/repository/ultra_simple_repository.py", "summary": "JSON 로드 시 tasks를 OrderedDict로 변환"}
{"timestamp": "2025-08-03T23:21:44.671418", "event_type": "CODE", "ts": "2025-08-03T23:21:44.671418", "type": "CODE", "action": "create", "file": "scripts/migrate_plan_tasks.py", "summary": "Plan.tasks 마이그레이션 스크립트"}
{"timestamp": "2025-08-03T23:22:21.806791", "event_type": "CODE", "ts": "2025-08-03T23:22:21.806791", "type": "CODE", "action": "create", "file": "test/test_plan_tasks_improvement.py", "summary": "Plan.tasks 개선 단위 테스트"}
{"timestamp": "2025-08-03T23:22:45.232061", "event_type": "COMPLETE", "ts": "2025-08-03T23:22:45.232061", "type": "COMPLETE", "summary": "\nTask 2 완료: Plan.tasks 데이터 모델 개선\n\n구현 내용:\n1. OrderedDict 적용으로 순서 보장\n2. 4개의 헬퍼 메서드 추가로 사용성 개선\n3. 기존 코드와의 호환성 유지\n4. 마이그레이션 스크립트 제공\n5. 단위 테스트로 검증\n\n주요 개선사항:\n- for task in plan.iter_tasks() 로 직관적 순회 가능\n- plan.get_task_by_number(1) 로 번호 접근 가능\n- 순서가 보장되는 Task 목록\n"}
