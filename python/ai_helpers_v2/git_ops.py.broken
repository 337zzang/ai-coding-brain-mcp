import subprocess
import os
from typing import List, Dict, Any, Optional
import platform
import shutil


import os
import platform
import subprocess
import shutil
from typing import Optional

def find_git_executable() -> Optional[str]:
    """Git 실행 파일을 자동으로 찾는 함수"""

    # 1. shutil.which 시도 (PATH에 있는 경우)
    git_path = shutil.which('git')
    if git_path and verify_git_works(git_path):
        return git_path

    # 2. where/which 명령 사용
    if platform.system() == 'Windows':
        try:
            result = subprocess.run(['where', 'git'], capture_output=True, text=True)
            if result.returncode == 0:
                paths = result.stdout.strip().split('\n')
                for path in paths:
                    if path and verify_git_works(path):
                        return path
        except:
            pass

    # 3. 일반적인 설치 경로 확인
    common_paths = get_common_git_paths()
    for path in common_paths:
        if os.path.exists(path) and verify_git_works(path):
            return path

    # 4. PATH 환경변수 직접 검색
    path_dirs = os.environ.get('PATH', '').split(os.pathsep)
    for path_dir in path_dirs:
        if os.path.exists(path_dir):
            git_exe = os.path.join(path_dir, 'git.exe' if platform.system() == 'Windows' else 'git')
            if os.path.exists(git_exe) and verify_git_works(git_exe):
                return git_exe

    return None

def get_common_git_paths() -> List[str]:
    """일반적인 Git 설치 경로 목록 반환"""
    paths = []

    if platform.system() == 'Windows':
        # Windows 환경변수 사용
        program_files = os.environ.get('ProgramFiles', 'C:\\Program Files')
        program_files_x86 = os.environ.get('ProgramFiles(x86)', 'C:\\Program Files (x86)')
        local_app_data = os.environ.get('LOCALAPPDATA', '')

        # 우선순위 순으로 경로 추가
        paths.extend([
            os.path.join(program_files, 'Git', 'bin', 'git.exe'),
            os.path.join(program_files, 'Git', 'cmd', 'git.exe'),
            os.path.join(program_files_x86, 'Git', 'bin', 'git.exe'),
            os.path.join(program_files_x86, 'Git', 'cmd', 'git.exe'),
        ])

        if local_app_data:
            paths.extend([
                os.path.join(local_app_data, 'Programs', 'Git', 'bin', 'git.exe'),
                os.path.join(local_app_data, 'Programs', 'Git', 'cmd', 'git.exe'),
            ])

        # 추가 가능한 경로들
        for drive in ['C:', 'D:', 'E:']:
            if os.path.exists(drive + '\\'):
                paths.extend([
                    os.path.join(drive, 'Git', 'bin', 'git.exe'),
                    os.path.join(drive, 'Tools', 'Git', 'bin', 'git.exe'),
                ])
    else:
        # Unix-like 시스템
        paths.extend([
            '/usr/bin/git',
            '/usr/local/bin/git',
            '/opt/git/bin/git',
            os.path.expanduser('~/.local/bin/git'),
        ])

    return paths

def verify_git_works(git_path: str) -> bool:
    """Git 실행 파일이 실제로 작동하는지 확인"""
    try:
        result = subprocess.run(
            [git_path, '--version'],
            capture_output=True,
            text=True,
            timeout=2
        )
        return result.returncode == 0
    except:
        return False

# Git 실행 파일 캐시 (성능 향상)
_git_executable_cache = None

def get_git_command() -> str:
    """Git 명령어 반환 (캐시 사용)"""
    global _git_executable_cache

    if _git_executable_cache is None:
        _git_executable_cache = find_git_executable()

    if _git_executable_cache:
        return _git_executable_cache
    else:
        # 기본값 (에러 메시지를 위해)
        return 'git'



def run_git_command(args: List[str], cwd: str = ".") -> Dict[str, Any]:
    """Git 명령 실행 헬퍼 (스마트 Git 탐색 포함)"""

    # Git 실행 파일 찾기
    git_cmd = get_git_command()

    # Git을 찾지 못한 경우
    if git_cmd == 'git' and not verify_git_works(git_cmd):
        # 재시도 (캐시 초기화)
        global _git_executable_cache
        _git_executable_cache = None
        git_cmd = get_git_command()

        if git_cmd == 'git' and not verify_git_works(git_cmd):
            return {
                'success': False,
                'stdout': '',
                'stderr': 'Git을 찾을 수 없습니다. Git이 설치되어 있는지 확인하세요. (https://git-scm.com/downloads)',
                'returncode': -1
            }

    try:
        result = subprocess.run(
            [git_cmd] + args,
            cwd=cwd,
            capture_output=True,
            text=True,
            encoding='utf-8'
        )

        return {
            'success': result.returncode == 0,
            'stdout': result.stdout.strip(),
            'stderr': result.stderr.strip(),
            'returncode': result.returncode
        }

    except Exception as e:
        return {
            'success': False,
            'stdout': '',
            'stderr': f'Git 명령 실행 중 오류 발생: {str(e)}',
            'returncode': -1
        }

def git_status(cwd: str = ".") -> Dict[str, Any]:
    """Git 상태 확인"""
    result = run_git_command(['status', '--porcelain'], cwd)

    if not result['success']:
        return result

    # 상태 파싱
    modified = []
    untracked = []
    staged = []

    for line in result['stdout'].split('\n'):
        if not line:
            continue

        status = line[:2]
        filepath = line[3:]

        if status == '??':
            untracked.append(filepath)
        elif status[0] in ['M', 'A', 'D', 'R']:
            staged.append(filepath)
        elif status[1] in ['M', 'D']:
            modified.append(filepath)

    return {
        'success': True,
        'modified': modified,
        'untracked': untracked,
        'staged': staged,
        'clean': not (modified or untracked or staged)
    }

@track_execution
def git_add(files: Union[str, List[str]] = None, all: bool = False, cwd: str = ".") -> Dict[str, Any]:
    """파일을 스테이징"""
    if all:
        args = ['add', '-A']
    elif files:
        # 문자열이면 리스트로 변환
        if isinstance(files, str):
            files = [files]
        args = ['add'] + files
    else:
        return {
            'success': False,
            'error': 'No files specified'
        }

    return run_git_command(args, cwd)

@track_execution
def git_commit(message: str, cwd: str = ".") -> Dict[str, Any]:
    """커밋 생성"""
    if not message:
        return {
            'success': False,
            'error': 'Commit message is required'
        }

    result = run_git_command(['commit', '-m', message], cwd)

    if result['success']:
        # 커밋 해시 추출
        commit_info = run_git_command(['rev-parse', 'HEAD'], cwd)
        if commit_info['success']:
            result['commit_hash'] = commit_info['stdout'][:7]

    return result

@track_execution
def git_push(remote: str = 'origin', branch: str = None, cwd: str = ".") -> Dict[str, Any]:
    """원격 저장소에 푸시"""
    if not branch:
        # 현재 브랜치 가져오기
        branch_result = run_git_command(['branch', '--show-current'], cwd)
        if not branch_result['success']:
            return branch_result
        branch = branch_result['stdout']

    return run_git_command(['push', remote, branch], cwd)

@track_execution
def git_pull(remote: str = 'origin', branch: str = None, cwd: str = ".") -> Dict[str, Any]:
    """원격 저장소에서 풀"""
    if not branch:
        # 현재 브랜치 가져오기
        branch_result = run_git_command(['branch', '--show-current'], cwd)
        if not branch_result['success']:
            return branch_result
        branch = branch_result['stdout']

    return run_git_command(['pull', remote, branch], cwd)

@track_execution
def git_branch(cwd: str = ".") -> Dict[str, Any]:
    """브랜치 목록 조회"""
    result = run_git_command(['branch', '-a'], cwd)

    if not result['success']:
        return result

    branches = []
    current_branch = None

    for line in result['stdout'].split('\n'):
        if not line:
            continue

        if line.startswith('*'):
            current_branch = line[2:].strip()
            branches.append(current_branch)
        else:
            branches.append(line.strip())

    return {
        'success': True,
        'branches': branches,
        'current': current_branch
    }

# 사용 가능한 함수 목록
__all__ = [
    'git_status', 'git_add', 'git_commit', 
    'git_push', 'git_pull', 'git_branch'
]
