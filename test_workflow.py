{'content': '"""\n워크플로우 테스트용 Python 스크립트\nCreated by: Claude Code 워크플로우 시스템\n"""\n\ndef calculate_sum(a, b):\n    """두 숫자의 합을 계산합니다."""\n    return a + b\n\ndef calculate_product(a, b):\n    """두 숫자의 곱을 계산합니다."""\n    return a * b\n\ndef greet_user(name):\n    """사용자에게 인사합니다."""\n    return f"안녕하세요, {name}님!"\n\nclass WorkflowTester:\n    """워크플로우 테스트를 위한 클래스"""\n\n    def __init__(self):\n        self.test_count = 0\n        self.results = []\n\n    def run_test(self, test_name, expected, actual):\n        """테스트를 실행합니다."""\n        self.test_count += 1\n        passed = expected == actual\n        result = {\n            "test_name": test_name,\n            "expected": expected,\n            "actual": actual,\n            "passed": passed\n        }\n        self.results.append(result)\n        return passed\n\n    def get_summary(self):\n        """테스트 결과 요약을 반환합니다."""\n        passed = sum(1 for r in self.results if r["passed"])\n        total = len(self.results)\n        return {\n            "total_tests": total,\n            "passed": passed,\n            "failed": total - passed,\n            "success_rate": passed / total if total > 0 else 0\n        }\n\nif __name__ == "__main__":\n    print("워크플로우 테스트 스크립트 실행됨")\n    tester = WorkflowTester()\n\n    # 기본 테스트 실행\n    tester.run_test("덧셈 테스트", 5, calculate_sum(2, 3))\n    tester.run_test("곱셈 테스트", 6, calculate_product(2, 3))\n    tester.run_test("인사 테스트", "안녕하세요, Claude님!", greet_user("Claude"))\n\n    summary = tester.get_summary()\n    print(f"테스트 결과: {summary[\'passed\']}/{summary[\'total\']} 통과")\n', 'path': 'C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\test_workflow.py', 'size': 1860, 'modified': 1752379316.4668953, 'format': 'text'}