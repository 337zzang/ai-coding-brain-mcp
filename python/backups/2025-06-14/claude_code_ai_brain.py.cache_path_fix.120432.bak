#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
🧠 AI Coding Brain - 통합 버전 v6.1
==========================================

claude_code_ai_brain.py와 context_manager.py를 통합한 단일 파일.
핵심 기능만 유지하고 간소화함.

주요 기능:
- /flow 명령어로 프로젝트 전환
- 메모리 루트에 캐시 중앙 저장
- 프로젝트 루트에서 작업 수행
- 작업 추적 및 심볼 인덱싱
- 싱글톤 패턴 컨텍스트 관리

v6.1 변경사항:
- 캐시를 메모리 루트에 중앙 저장
- 작업은 프로젝트 루트에서 수행

작성일: 2025-06-14
"""

import os
import json
import datetime as dt
from pathlib import Path
from typing import Dict, Any, Optional, List
from collections import defaultdict
import copy

# ===========================================
# 통합 컨텍스트 관리자
# ===========================================

class UnifiedContextManager:
    """통합 컨텍스트 관리자 - 싱글톤 패턴"""
    
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self):
        if not hasattr(self, 'initialized'):
            self.context = None
            self.project_path = None
            self.project_name = None
            self.memory_root = None  # 캐시 저장 위치
            self.initialized = True
    
    def initialize(self, project_path: str, project_name: str, memory_root: str = None) -> Dict[str, Any]:
        """프로젝트 컨텍스트 초기화"""
        self.project_path = project_path
        self.project_name = project_name
        
        # 메모리 루트 설정 (없으면 기본값 사용)
        if memory_root:
            self.memory_root = memory_root
        else:
            # 기본값: 홈/Desktop/memory
            self.memory_root = str(Path.home() / "Desktop" / "memory")
        
        # 캐시된 컨텍스트 로드 시도
        cached_context = self._try_load_cached_context()
        if cached_context:
            self.context = cached_context
            print(f"✅ 캐시된 컨텍스트 로드: {project_name}")
        else:
            self.context = self._create_new_context()
            print(f"✅ 새 컨텍스트 생성: {project_name}")
        
        # 구조 정규화
        self._normalize_context_structure()
        return self.context
    
    def _get_cache_file_path(self) -> str:
        """캐시 파일 경로 반환 (메모리 루트 기준)"""
        cache_dir = os.path.join(self.memory_root, '.cache', self.project_name)
        os.makedirs(cache_dir, exist_ok=True)
        return os.path.join(cache_dir, 'cache.json')
    
    def _create_new_context(self) -> Dict[str, Any]:
        """새로운 컨텍스트 생성"""
        return {
            'project_name': self.project_name,
            'project_id': self.project_name,
            'project_path': self.project_path,
            'memory_root': self.memory_root,
            'created_at': dt.datetime.now().isoformat(),
            'updated_at': dt.datetime.now().isoformat(),
            'version': '6.1',
            
            # 캐시 구조
            'cache': {
                'analyzed_files': {},
                'symbol_index': {},
                'work_tracking': {
                    'file_access': {},
                    'file_edits': {},
                    'function_edits': {},
                    'session_start': dt.datetime.now().isoformat(),
                    'total_operations': 0
                }
            },
            
            # 작업 관리
            'tasks': {'next': [], 'done': []},
            'current_focus': '',
            
            # AI 학습 데이터
            'coding_experiences': []
        }
    
    def _try_load_cached_context(self) -> Optional[Dict[str, Any]]:
        """캐시된 컨텍스트 로드 (메모리 루트에서)"""
        if not self.memory_root or not self.project_name:
            return None
        
        cache_file = self._get_cache_file_path()
        
        if os.path.exists(cache_file):
            try:
                with open(cache_file, 'r', encoding='utf-8') as f:
                    loaded_context = json.load(f)
                
                # 프로젝트 경로 업데이트 (경로가 변경되었을 수 있음)
                loaded_context['project_path'] = self.project_path
                loaded_context['memory_root'] = self.memory_root
                
                return loaded_context
            except Exception as e:
                print(f"⚠️ 캐시 로드 실패: {e}")
        return None
    
    def _normalize_context_structure(self):
        """컨텍스트 구조 정규화"""
        if not self.context:
            return
            
        # 필수 키 확인
        self.context.setdefault('cache', {})
        self.context.setdefault('tasks', {'next': [], 'done': []})
        self.context.setdefault('coding_experiences', [])
        
        # 경로 정보 업데이트
        self.context['project_path'] = self.project_path
        self.context['memory_root'] = self.memory_root
        
        # 캐시 구조 확인
        cache = self.context['cache']
        cache.setdefault('analyzed_files', {})
        cache.setdefault('symbol_index', {})
        
        # work_tracking 구조
        work_tracking = cache.setdefault('work_tracking', {})
        work_tracking.setdefault('file_access', {})
        work_tracking.setdefault('file_edits', {})
        work_tracking.setdefault('function_edits', {})
        work_tracking.setdefault('session_start', dt.datetime.now().isoformat())
        work_tracking.setdefault('total_operations', 0)
    
    def save(self) -> bool:
        """컨텍스트 저장 (메모리 루트에)"""
        if not self.context:
            print("⚠️ 저장할 컨텍스트가 없습니다")
            return False
        
        try:
            # 업데이트 시간 갱신
            self.context['updated_at'] = dt.datetime.now().isoformat()
            
            # 캐시 파일 경로
            cache_file = self._get_cache_file_path()
            
            # JSON 직렬화 가능한 형태로 변환
            serializable_context = self._prepare_serializable_context()
            
            with open(cache_file, 'w', encoding='utf-8') as f:
                json.dump(serializable_context, f, indent=2, ensure_ascii=False)
            
            print(f"✅ 캐시 저장: {cache_file}")
            return True
            
        except Exception as e:
            print(f"❌ 캐시 저장 실패: {e}")
            return False
    
    def _prepare_serializable_context(self) -> Dict[str, Any]:
        """JSON 직렬화 가능한 형태로 변환"""
        def convert(obj):
            if isinstance(obj, defaultdict):
                return dict(obj)
            elif isinstance(obj, set):
                return list(obj)
            elif isinstance(obj, (dt.datetime, dt.date)):
                return obj.isoformat()
            elif isinstance(obj, dict):
                return {k: convert(v) for k, v in obj.items()}
            elif isinstance(obj, (list, tuple)):
                return [convert(item) for item in obj]
            else:
                return obj
        
        return convert(self.context)
    
    # ===========================================
    # 캐시 관리 메서드
    # ===========================================
    
    def update_cache(self, key: str, value: Any) -> None:
        """캐시 업데이트 (중첩 키 지원)"""
        if not self.context:
            return
        
        cache = self.context.setdefault('cache', {})
        keys = key.split('.')
        current = cache
        
        for k in keys[:-1]:
            current = current.setdefault(k, {})
        
        current[keys[-1]] = value
    
    def get_value(self, key: str, default: Any = None) -> Any:
        """캐시 값 조회"""
        if not self.context:
            return default
        
        cache = self.context.get('cache', {})
        keys = key.split('.')
        current = cache
        
        for k in keys:
            if isinstance(current, dict) and k in current:
                current = current[k]
            else:
                return default
        
        return current
    
    # ===========================================
    # 심볼 및 작업 추적
    # ===========================================
    
    def find_symbol(self, symbol_name: str) -> Optional[Dict[str, Any]]:
        """심볼 검색"""
        if not self.context:
            return None
        
        symbol_index = self.context.get('cache', {}).get('symbol_index', {})
        return symbol_index.get(symbol_name)
    
    def track_file_access(self, file_path: str, operation: str = 'read'):
        """파일 접근 추적"""
        if not self.context:
            return
        
        work_tracking = self.context.get('cache', {}).get('work_tracking', {})
        file_access = work_tracking.setdefault('file_access', {})
        
        # 상대 경로로 정규화
        if self.project_path and file_path.startswith(self.project_path):
            file_path = os.path.relpath(file_path, self.project_path)
        
        file_access[file_path] = file_access.get(file_path, 0) + 1
        work_tracking['total_operations'] = work_tracking.get('total_operations', 0) + 1
    
    def track_function_edit(self, file_path: str, function_name: str, 
                          class_name: Optional[str] = None):
        """함수 수정 추적"""
        if not self.context:
            return
        
        work_tracking = self.context.get('cache', {}).get('work_tracking', {})
        function_edits = work_tracking.setdefault('function_edits', {})
        
        # 함수 키 생성
        func_key = f"{class_name}.{function_name}" if class_name else function_name
        
        # 상대 경로로 정규화
        if self.project_path and file_path.startswith(self.project_path):
            file_path = os.path.relpath(file_path, self.project_path)
        
        # 편집 정보 업데이트
        if func_key not in function_edits:
            function_edits[func_key] = {'count': 0, 'operations': []}
        
        function_edits[func_key]['count'] += 1
        function_edits[func_key]['operations'].append({
            'timestamp': dt.datetime.now().isoformat(),
            'file': file_path
        })
        
        # 파일 편집도 추적
        file_edits = work_tracking.setdefault('file_edits', {})
        file_edits[file_path] = file_edits.get(file_path, 0) + 1
        
        work_tracking['total_operations'] = work_tracking.get('total_operations', 0) + 1
    
    def get_work_tracking_summary(self) -> str:
        """작업 추적 요약"""
        if not self.context:
            return "컨텍스트가 초기화되지 않았습니다."
        
        work_tracking = self.context.get('cache', {}).get('work_tracking', {})
        
        # 세션 시간 계산
        session_start = work_tracking.get('session_start')
        if session_start:
            start_time = dt.datetime.fromisoformat(session_start)
            duration = dt.datetime.now() - start_time
            duration_str = str(duration).split('.')[0]
        else:
            duration_str = "Unknown"
        
        # 통계 수집
        file_access = work_tracking.get('file_access', {})
        file_edits = work_tracking.get('file_edits', {})
        function_edits = work_tracking.get('function_edits', {})
        total_ops = work_tracking.get('total_operations', 0)
        
        # 요약 생성
        summary = f"""
📊 작업 추적 요약
================
• 프로젝트: {self.project_name}
• 작업 경로: {self.project_path}
• 캐시 경로: {self.memory_root}
• 세션 시간: {duration_str}
• 전체 작업: {total_ops}회
• 접근한 파일: {len(file_access)}개
• 수정한 파일: {len(file_edits)}개
• 수정한 함수: {len(function_edits)}개
"""
        
        # Top 5 파일
        if file_access:
            summary += "\n🔥 가장 많이 접근한 파일:\n"
            sorted_files = sorted(file_access.items(), key=lambda x: x[1], reverse=True)[:5]
            for file_path, count in sorted_files:
                summary += f"  • {file_path}: {count}회\n"
        
        # Top 5 함수
        if function_edits:
            summary += "\n✏️ 가장 많이 수정한 함수:\n"
            sorted_funcs = sorted(function_edits.items(), 
                                key=lambda x: x[1]['count'], reverse=True)[:5]
            for func_name, info in sorted_funcs:
                summary += f"  • {func_name}: {info['count']}회\n"
        
        return summary


# ===========================================
# 글로벌 컨텍스트 관리자
# ===========================================
_context_manager = UnifiedContextManager()


# ===========================================
# Public API
# ===========================================

def initialize_context(project_path: str, project_name: str, memory_root: str = None) -> Dict[str, Any]:
    """프로젝트 컨텍스트 초기화"""
    return _context_manager.initialize(project_path, project_name, memory_root)

def save_context() -> bool:
    """컨텍스트 저장"""
    return _context_manager.save()

def update_cache(key: str, value: Any):
    """캐시 업데이트"""
    _context_manager.update_cache(key, value)

def get_value(key: str, default: Any = None) -> Any:
    """캐시 값 조회"""
    return _context_manager.get_value(key, default)

def find_symbol(symbol_name: str) -> Optional[Dict[str, Any]]:
    """심볼 찾기"""
    return _context_manager.find_symbol(symbol_name)

def track_file_access(file_path: str, operation: str = 'read'):
    """파일 접근 추적"""
    _context_manager.track_file_access(file_path, operation)

def track_function_edit(file_path: str, function_name: str, class_name: Optional[str] = None):
    """함수 수정 추적"""
    _context_manager.track_function_edit(file_path, function_name, class_name)

def get_work_tracking_summary() -> str:
    """작업 추적 요약"""
    return _context_manager.get_work_tracking_summary()


# ===========================================
# Claude Desktop 설정 및 명령어 처리
# ===========================================

def get_paths_from_config() -> dict:
    """Claude Desktop 설정에서 경로 가져오기"""
    config_path = os.path.expanduser("~/AppData/Roaming/Claude/claude_desktop_config.json")
    paths = {
        'project_root': Path.home() / "Desktop",
        'memory_root': Path.home() / "Desktop" / "memory"
    }
    
    if os.path.exists(config_path):
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            mcp_servers = config.get('mcpServers', {})
            for server_name, server_config in mcp_servers.items():
                if 'ai-coding-brain' in server_name.lower():
                    env = server_config.get('env', {})
                    if 'PROJECT_ROOT' in env:
                        paths['project_root'] = Path(env['PROJECT_ROOT'])
                    if 'MEMORY_BANK_ROOT' in env:
                        paths['memory_root'] = Path(env['MEMORY_BANK_ROOT'])
                    break
        except Exception as e:
            print(f"⚠️ 설정 로드 실패: {e}")
    
    return paths


def cmd_flow(project_name: str = None) -> None:
    """/flow 명령어 - 프로젝트 전환"""
    
    if not project_name:
        # 현재 상태 표시
        if _context_manager.project_name:
            print(f"\n🔥 현재 프로젝트: {_context_manager.project_name}")
            print(f"📁 작업 경로: {_context_manager.project_path}")
            print(f"💾 캐시 경로: {_context_manager.memory_root}")
            print(get_work_tracking_summary())
        else:
            print("\n⚠️ 프로젝트가 선택되지 않았습니다")
            print("사용법: /flow [프로젝트명]")
        return
    
    # 이전 컨텍스트 저장
    if _context_manager.context:
        save_context()
    
    # 경로 가져오기
    paths = get_paths_from_config()
    memory_root = str(paths['memory_root'])
    
    # 프로젝트 경로 찾기 (메모리 우선, 그 다음 프로젝트 루트)
    project_path = paths['memory_root'] / project_name
    location = 'memory'
    
    if not project_path.exists():
        # 프로젝트 루트 확인
        project_path = paths['project_root'] / project_name
        location = 'project'
        
        if not project_path.exists():
            print(f"\n❌ 프로젝트 '{project_name}'를 찾을 수 없습니다")
            print(f"   • 메모리: {paths['memory_root'] / project_name}")
            print(f"   • 프로젝트: {paths['project_root'] / project_name}")
            return
    
    # 작업 디렉토리 변경 (코드 작업을 위해)
    os.chdir(project_path)
    
    # Context 초기화 (메모리 루트 전달)
    context = initialize_context(str(project_path), project_name, memory_root)
    
    print(f"\n✅ 프로젝트 '{project_name}'로 전환 완료!")
    print(f"📁 작업 경로: {project_path} ({location}_root)")
    print(f"💾 캐시 경로: {memory_root}/.cache/{project_name}/")
    print(f"📊 캐시 버전: {context.get('version', 'Unknown')}")
    
    # 간단한 통계 표시
    analyzed_files = context.get('cache', {}).get('analyzed_files', {})
    tasks = context.get('tasks', {})
    print(f"📈 분석된 파일: {len(analyzed_files)}개")
    print(f"📋 남은 작업: {len(tasks.get('next', []))}개")
    print(f"✅ 완료된 작업: {len(tasks.get('done', []))}개")


# ===========================================
# 메인 진입점
# ===========================================

def process_command(command: str, *args):
    """명령어 처리"""
    if command == '/flow':
        return cmd_flow(args[0] if args else None)
    elif command == '/save':
        return save_context()
    elif command == '/summary':
        return get_work_tracking_summary()
    return f"❌ 알 수 없는 명령어: {command}"


if __name__ == "__main__":
    print("🧠 AI Coding Brain v6.1 (통합 버전) 준비 완료!")
    print("사용 가능한 명령어:")
    print("  • /flow [프로젝트명] - 프로젝트 전환")
    print("  • /save - 컨텍스트 저장")
    print("  • /summary - 작업 요약 보기")
