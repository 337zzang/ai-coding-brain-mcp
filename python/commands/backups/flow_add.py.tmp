
def cmd_flow_with_context(project_name: str = None, existing_context: Dict[str, Any] = None) -> Dict[str, Any]:
    """
    프로젝트 전환 + 컨텍스트 자동 업데이트 + Wisdom 로드
    
    v22.0 기능:
    - 프로젝트 전환 시 context 자동 업데이트
    - Wisdom 시스템 자동 초기화
    - project_vision.md 자동 로드
    - execute_code 환경과 동기화
    
    Args:
        project_name: 전환할 프로젝트명
        existing_context: 기존 컨텍스트 (선택사항)
        
    Returns:
        dict: 프로젝트 전환 결과 + 업데이트된 컨텍스트
    """
    
    # 1. 기본 flow 실행
    result = cmd_flow(project_name, existing_context)
    
    if not result.get('success'):
        return result
    
    # 2. 컨텍스트 업데이트 강화
    manager = get_context_manager()
    if manager and manager.context:
        # execute_code 환경의 글로벌 context 업데이트
        if 'context' in globals():
            globals()['context'] = manager.context
        
        # __main__ 모듈의 context도 업데이트
        try:
            import __main__
            if hasattr(__main__, 'context'):
                __main__.context = manager.context
        except:
            pass
        
        # sys.modules에서 실행 중인 세션의 context 업데이트
        for module_name, module in sys.modules.items():
            if hasattr(module, 'context') and module_name in ['__main__', 'json_repl_session']:
                module.context = manager.context
    
    # 3. Wisdom 시스템 로드 및 초기화
    wisdom_loaded = False
    wisdom_stats = {}
    
    if WISDOM_AVAILABLE:
        try:
            wisdom = get_wisdom_manager()
            hooks = get_wisdom_hooks()
            
            # Wisdom 통계
            wisdom_stats = {
                'common_mistakes': len(wisdom.wisdom_data.get('common_mistakes', {})),
                'error_patterns': len(wisdom.wisdom_data.get('error_patterns', {})),
                'best_practices': len(wisdom.wisdom_data.get('best_practices', {})),
                'last_updated': wisdom.wisdom_data.get('last_updated', 'Never')
            }
            
            wisdom_loaded = True
            print(f"\n🧠 Wisdom 시스템 로드 완료:")
            print(f"  - 추적된 실수: {wisdom_stats['common_mistakes']}개")
            print(f"  - 오류 패턴: {wisdom_stats['error_patterns']}개")
            print(f"  - 베스트 프랙티스: {wisdom_stats['best_practices']}개")
            
        except Exception as e:
            print(f"⚠️ Wisdom 로드 실패: {e}")
    
    # 4. project_vision.md 로드
    vision_loaded = False
    vision_content = None
    
    if project_name and result.get('project_root'):
        vision_path = os.path.join(result['project_root'], 'project_vision.md')
        if os.path.exists(vision_path):
            try:
                with open(vision_path, 'r', encoding='utf-8') as f:
                    vision_content = f.read()
                vision_loaded = True
                print(f"\n📌 프로젝트 비전 문서 로드 완료")
                
                # 컨텍스트에 비전 추가
                if manager and manager.context:
                    manager.update_cache('project_vision', vision_content)
                    
            except Exception as e:
                print(f"⚠️ project_vision.md 로드 실패: {e}")
    
    # 5. 결과에 추가 정보 포함
    result['wisdom_loaded'] = wisdom_loaded
    result['wisdom_stats'] = wisdom_stats
    result['vision_loaded'] = vision_loaded
    
    # 컨텍스트 정보 강화
    if 'context' in result and manager and manager.context:
        result['context'].update({
            'wisdom_available': WISDOM_AVAILABLE,
            'wisdom_loaded': wisdom_loaded,
            'vision_loaded': vision_loaded,
            'context_synchronized': True
        })
    
    return result
