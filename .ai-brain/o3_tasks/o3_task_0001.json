{
  "id": "o3_task_0001",
  "status": "completed",
  "question": "웹 자동화 시스템의 Task Queue 아키텍처와 Playwright 통합 방식을 분석해주세요",
  "start_time": "2025-08-25T01:07:56.005542",
  "reasoning_effort": "medium",
  "last_update": "2025-08-25T01:08:41.465599",
  "result": {
    "answer": "아래는 주어진 정보(7개 파일, 1350LOC, 주요 클래스: Playwright/Browser/BrowserContext, Task Queue, Overlay UI)만으로 일반화한 아키텍처 분석과, 성능·안정성을 극대화하기 위한 설계/운영 포인트입니다. 실제 코드가 없으므로, 핵심 패턴과 점검 리스트 중심으로 정리합니다.\n\n1) 전체 아키텍처 개요\n- 구성요소\n  - Producer: 상위 서비스 또는 UI에서 작업 생성(예: “로그인 후 보고서 다운로드” 같은 구조화된 작업).\n  - Task Queue: 작업 메타데이터를 저장·스케줄링하는 큐(메모리/Redis/Rabbit/SQS 등).\n  - Scheduler/Dispatcher: 우선순위, 동시성, 라우팅 정책에 따라 Worker에 작업 할당.\n  - Worker: Playwright 실행 주체. Browser Manager와 연계해 Context/Page를 확보하고 작업 수행.\n  - Browser Manager: 브라우저 프로세스 라이프사이클 관리(런치, 헬스체크, 재시작, Context 풀링).\n  - Overlay UI: 페이지 안에 주입되어(Playwright evaluate/addInitScript 등) 사용자에게 시각적 피드백 제공.\n  - Storage/Result Sink: 작업 결과/로그/트레이스/스크린샷/비디오 저장소.\n\n- 데이터 흐름(간략 시퀀스)\n  1) Producer가 구조화된 Task를 생성하여 Queue에 Push(우선순위/타임아웃/리트라이 정책 포함).\n  2) Scheduler가 가용 Worker와 시스템 자원(CPU/RAM/브라우저 슬롯)에 맞춰 팝.\n  3) Worker가 Browser Manager에게 Context/Page를 요청(가능하면 재사용).\n  4) Overlay 스크립트 선주입 후, Task의 단계별 액션을 Playwright API로 실행.\n  5) 단계 이벤트를 Overlay와 로그 시스템으로 스트리밍(진행률, 하이라이트, 경고).\n  6) 완료/실패 상태를 Queue에 Ack/Nack, 결과를 저장.\n\n2) Task Queue 아키텍처 설계 포인트\n- 작업 모델(권장 스키마)\n  - id, type(액션 묶음), priority, payload(DOM selector/입력값/URL/자격증명 id 등)\n  - timeouts(per-step 및 overall), retry 정책(횟수/backoff/재시도 시 idempotency key)\n  - isolation 레벨(브라우저/컨텍스트 재사용 여부), rate-limit 키(도메인/테넌트별)\n  - tracing 옵션(스크린샷/비디오/Playwright trace on/off)\n- 상태 머신\n  - queued -> running -> (waiting for selector | waiting for network | human-in-the-loop) -> completed/failed/cancelled\n  - DLQ(Dead Letter Queue)로 장애 패턴 격리, 원인 태깅(타임아웃/네트워크/셀렉터 실패/권한 오류)\n- 스케줄링/동시성\n  - 글로벌 동시성 vs 도메인/테넌트별 동시성 제한(사이트 차단 방지)\n  - 우선순위 큐 + 공정성(aging) + backpressure(워커/브라우저 포화 시 생산 억제)\n  - 작업 길이 예측 기반의 단기 vs 장기 작업 풀 분리(짧은 작업의 대기 감소)\n- 신뢰성/정합성\n  - idempotency key로 중복 실행 방지\n  - lease/visibility timeout: 워커 장애 시 작업 자동 재배치\n  - 결과 저장 시 원자적 커밋(실패 시 재시도 가능)\n\n3) Playwright 통합 방식(브라우저/컨텍스트/페이지)\n- 프로세스 전략\n  - 1 Browser per Worker(권장): 브라우저 런치 비용 amortize, Worker 장애 격리.\n  - Context per Task: 보안 격리·쿠키/스토리지 분리·메모리 회수 용이. 세션 재사용이 필요하면 Context Pool + storageState로 최적화.\n  - Page per Step or per Flow: 대부분 per Flow 권장(탭 1개로 흐름 유지). 멀티탭 요구 시 명시적 관리.\n- 리소스/수명 관리\n  - Warm-up: 서비스 시작 시 브라우저 예열(빈 페이지 오픈, 폰트/엔진 로딩).\n  - Health check: 브라우저/컨텍스트/페이지 크래시 감지 후 재시작.\n  - Timeout 정책: page/locator default timeout, navigation timeout, 전체 작업 timeout을 계층적으로 설정.\n  - 메모리/핸들 누수: context.close()/page.close() 보장, route/unroute, event listener 해제.\n- 안정성 패턴\n  - Auto-wait 적극 활용(locator.click(), getByRole 등)\n  - 네트워크 안정화(waitForLoadState, API response waitForResponse)\n  - Anti-flake: 재시도 가능(단, 멱등성 유지), soft selectors(여러 후보 fallback), 시맨틱 locator(getByRole, name)\n  - Tracing: 실패 시 자동 스크린샷/비디오/trace-on-first-retry\n- 스토리지/세션\n  - storageState 기반 로그인 캐시, 만료 시 자동 리프레시\n  - 민감정보는 Vault/KMS에서 주입, page.exposeFunction로 최소한만 전달\n- 브라우저 옵션\n  - headless 모드 기본, 디버그 시 headful+slowMo\n  - sandbox/args 제한, 프록시/UA 지정, geolocation/permissions 제어\n\n4) Task -> Playwright 액션 브릿지\n- 액션 DSL 권장\n  - open(url), click(selector|role), type(selector, text, secure?), select, check/uncheck, waitFor(selector|state), expect(조건), download(경로)\n  - 각 액션에 timeout, retries, screenshotOnStep 옵션\n- 매핑 계층\n  - Validation: selector/schema 유효성, 위험 JS 차단\n  - Resolution: 우선 role/name 기반 → testId → CSS/XPath 순\n  - Execution: locator 기반 실행, auto-wait 내장, 에러를 명시적 코드(TimeoutError/NotFoundError/DeterministicFail)로 매핑\n- 결과/이벤트\n  - 각 스텝 시작/성공/실패 이벤트를 스트림(Overlay·로그·메트릭)\n  - 산출물: 스크린샷/다운로드 파일/추출 데이터(JSON)·콘솔 로그\n\n5) Overlay UI 연동\n- 주입 시점/방법\n  - addInitScript로 일찍 주입, 스타일 격리(Shadow DOM 또는 네임스페이스 CSS)\n  - 포인터 이벤트 비활성화(pointer-events: none), 성능 저하 방지(리플로 최소화)\n- 시각적 피드백\n  - 현재 타겟 엘리먼트 하이라이트(박스/툴팁), 진행률/현재 단계 표시\n  - 오류 시 명확한 메시지와 스택 요약 제공\n- 이벤트 채널\n  - page.exposeFunction 또는 window.postMessage로 워커→페이지 이벤트 전달\n  - 반대로 페이지 내 관측(콘솔/네트워크/DOM 변화)도 워커로 전송 가능\n- 보안/안정성\n  - Overlay 스크립트 사이즈/의존성 최소화, 비신뢰 콘텐츠 평가 금지\n  - 작업 종료 시 확실한 제거(cleanup)로 누수 방지\n\n6) 성능 관점: “자연어 대비 20x”\n- 원인\n  - 구조화된 Task DSL로 파싱/해석 비용 제거(LLM 호출/프롬프트 반복 없음)\n  - 브라우저/컨텍스트 재사용과 워밍업으로 콜드 스타트 감소\n  - 큐 기반 백프레셔와 동시성 제어로 CPU/RAM 스로틀링 최소화\n  - Auto-wait/locator 최적화로 플레이크 감소 → 재시도 비용 절감\n- 추가 가속 팁\n  - 한 워커에서 Context 풀(예: 4~8) 운용, CPU 코어·메모리 감안해 동시 작업 수 자동 튜닝\n  - 도메인별 rate-limit 적용(차단 방지), 네트워크/리소스 차단(광고/트래커)으로 로딩 시간 절감\n  - 캐시된 스토리지 상태/쿠키로 로그인 스킵\n\n7) 관측 가능성(Observability)\n- 메트릭\n  - 큐 길이/대기 시간, 처리율, 성공률, 재시도률, 평균 스텝 시간\n  - 브라우저·컨텍스트 수, 메모리/FD 사용량, 페이지 크래시율\n- 로깅/트레이싱\n  - Task id 단위 구조 로그, Playwright trace artifacts 보관 정책\n  - 실패 샘플 자동 수집, DLQ 대시보드\n- 알림\n  - 특정 오류 패턴 증가, 외부 사이트 차단 신호, 메모리 고수준 알림\n\n8) 장애/엣지 케이스\n- Renderer crash/target closed: 브라우저 재시작 및 작업 재시도(멱등 체크)\n- 셀렉터 드리프트: 시맨틱 locator 우선, Backup selector/모델 기반 유사 매칭 옵션\n- 파일 다운로드/업로드: downloadDir 격리, 파일 시스템 정리\n- 인증: MFA/캡차 시 human-in-the-loop 모드로 전환(큐 상태 waiting-human)\n- 반자동 방지: 속도 랜덤화, UA/viewport 다양화, 로봇 차단 정책 준수\n\n9) 코드 구조(7파일/1350LOC 가정) 권장 분리\n- queue.ts: enqueue/dequeue/schedule/retry/DLQ\n- task.ts: Task/Step/Result/Errors 스키마와 상태 머신\n- worker.ts: 소비 루프, backpressure, graceful shutdown\n- browserManager.ts: launch/health/context pool/tracing\n- actions.ts: DSL→Playwright 매핑 계층(locator 전략 포함)\n- overlay.ts: 주입 스크립트 관리, 이벤트 브릿지\n- observability.ts: 로그/메트릭/트레이스/알림\n\n10) 빠른 점검 체크리스트\n- 컨텍스트/페이지/라우트/리스너 정리(close/unroute/removeListener) 누락 없는가\n- default timeout/overall timeout/네트워크 idle 기준이 일관적인가\n- 재시도 시 멱등성 보장되는가(중복 결제/전송 방지)\n- 우선순위/도메인 rate-limit/동시성 상한이 있는가\n- 브라우저 헬스체크 및 자동 재시작 루틴이 있는가\n- Overlay 주입/제거가 안정적인가(충돌/성능 이슈 없는가)\n- 실패 아티팩트(trace/screenshot/log) 수집이 자동화되어 있는가\n\n원하시면 현재 저장소의 파일 구조/핵심 코드(특히 큐 소비 루프, Browser/Context 라이프사이클, 액션 매핑, Overlay 주입 부분)를 공유해 주시면, 구체적인 병목 지점과 리팩터링 포인트를 코드 레벨로 피드백 드리겠습니다.",
    "reasoning_effort": "medium",
    "usage": {
      "prompt_tokens": 102,
      "completion_tokens": 3782,
      "total_tokens": 3884,
      "reasoning_tokens": 0
    }
  },
  "end_time": "2025-08-25T01:08:41.465599"
}