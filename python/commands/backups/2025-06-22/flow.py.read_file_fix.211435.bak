#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
FLOW Command - AI Coding Brain MCP
/flow 명령어 처리

작성일: 2025-06-20
"""

import os
from datetime import datetime
import json
import datetime as dt
from pathlib import Path
from typing import Dict, Any, Optional

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from core.context_manager import get_context_manager
from core.config import get_paths_from_config
from api.public import initialize_context
from core.project_summary import generate_project_context_summary

# ===========================================
# FLOW 명령어
# ===========================================

def cmd_flow(project_name: str = None, existing_context: Dict[str, Any] = None) -> Dict[str, Any]:
    """/flow 명령어 - 프로젝트 전환"""
    
    paths = get_paths_from_config()
    memory_root = str(paths['memory_root'])
    
    if not project_name:
        # 프로젝트 목록 표시
        print("\n📋 등록된 프로젝트 목록:")
        print("="*60)
        
        project_count = 0
        if os.path.exists(memory_root):
            import re
            version_patterns = [
                r'^[a-zA-Z]+-\d+\.\d+\.\d+$',
                r'^app-\d+\.\d+\.\d+$',
                r'^project-\d+\.\d+\.\d+$',
                r'^v\d+\.\d+\.\d+$'
            ]
            
            for item in sorted(os.listdir(memory_root)):
                is_version_pattern = any(re.match(pattern, item) for pattern in version_patterns)
                if is_version_pattern:
                    continue
                    
                item_path = os.path.join(memory_root, item)
                if os.path.isdir(item_path) and item != 'common':
                    # 새로운 캐시 파일 위치 확인
                    cache_file = os.path.join(item_path, '.cache', 'cache_core.json')
                    if os.path.exists(cache_file):
                        try:
                            with open(cache_file, 'r', encoding='utf-8') as f:
                                cache_data = json.load(f)
                                actual_path = cache_data.get('project_path', 'Unknown')
                                last_accessed = cache_data.get('updated_at', 'Unknown')
                                
                                current_marker = " 🔥" if get_context_manager().project_name == item else ""
                                print(f"  • {item}{current_marker}")
                                print(f"    📁 경로: {actual_path}")
                                print(f"    🕐 최근 접근: {last_accessed[:10] if last_accessed != 'Unknown' else 'Unknown'}")
                                project_count += 1
                        except:
                            print(f"  • {item} (캐시 읽기 실패)")
        
        if project_count == 0:
            print("  등록된 프로젝트가 없습니다.")
        else:
            print(f"\n총 {project_count}개의 프로젝트")
            
        print("\n사용법: /flow [프로젝트명]")
        return {
            'success': True,
            'message': '프로젝트 목록 표시 완료',
            'project_count': project_count,
            'action': 'list_projects'
        }
    
    # 이전 컨텍스트 저장
    if get_context_manager().context and get_context_manager().project_name:
        import re
        version_patterns = [
            r'^[a-zA-Z]+-\d+\.\d+\.\d+$',
            r'^app-\d+\.\d+\.\d+$',
            r'^project-\d+\.\d+\.\d+$',
            r'^v\d+\.\d+\.\d+$'
        ]
        is_version_pattern = any(re.match(pattern, get_context_manager().project_name) for pattern in version_patterns)
        
        if not is_version_pattern:
            prev_cache_dir = os.path.join(memory_root, get_context_manager().project_name, '.cache')
            if os.path.exists(prev_cache_dir):
                get_context_manager().save()
    
    # Memory 폴더에서 프로젝트 캐시 확인
    project_cache_dir = os.path.join(memory_root, project_name, '.cache')
    cache_file = os.path.join(project_cache_dir, 'cache_core.json')
    
    project_path = None
    location = 'unknown'
    
    if os.path.exists(cache_file):
        # 캐시에서 프로젝트 경로 읽기
        try:
            with open(cache_file, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
                cached_path = cache_data.get('project_path')
                
                if cached_path and os.path.exists(cached_path):
                    project_path = Path(cached_path)
                    location = 'cached'
                    print(f"\n✅ Memory에서 프로젝트 찾음: {project_name}")
        except Exception as e:
            print(f"\n⚠️ 캐시 읽기 실패: {e}")
    
    # 캐시에 없거나 경로가 유효하지 않으면 새로 찾기
    if not project_path:
        desktop_path = paths['project_path'] / project_name
        if desktop_path.exists():
            project_path = desktop_path
            location = 'desktop'
        else:
            if os.path.basename(os.getcwd()) == project_name:
                project_path = Path(os.getcwd())
                location = 'current'
            else:
                if existing_context:
                    project_path = Path(os.getcwd())
                    location = 'current'
                else:
                    print(f"\n❌ 프로젝트 '{project_name}'를 찾을 수 없습니다")
                    return {
                        'success': False,
                        'message': f'프로젝트 경로를 찾을 수 없습니다: {project_name}',
                        'project_name': project_name
                    }
    
    # 작업 디렉토리 변경
    directory_changed = False
    directory_error = None
    
    try:
        # 디렉토리 존재 확인
        if not os.path.exists(str(project_path)):
            print(f"⚠️ 프로젝트 디렉토리가 존재하지 않습니다: {project_path}")
            # 디렉토리 생성 시도
            try:
                os.makedirs(str(project_path), exist_ok=True)
                print(f"✅ 프로젝트 디렉토리 생성됨: {project_path}")
            except Exception as create_err:
                print(f"❌ 디렉토리 생성 실패: {create_err}")
                directory_error = str(create_err)
        
        # 디렉토리 변경 시도
        os.chdir(str(project_path))
        current_dir = os.getcwd()
        if os.path.samefile(current_dir, str(project_path)):
            print(f"📂 작업 디렉토리 변경 성공: {project_path}")
            directory_changed = True
        else:
            print(f"⚠️ 작업 디렉토리 변경 실패: 현재 {current_dir}")
            directory_error = "디렉토리 변경 후 경로 불일치"
    except Exception as e:
        print(f"\n⚠️ 디렉토리 변경 실패: {e}")
        directory_error = str(e)
        # 실패해도 계속 진행 (캐시는 사용 가능)
    
    # 컨텍스트 초기화
    if 'context' in globals():
        globals()['context'].clear()
    
    context = initialize_context(
        project_path=str(project_path),
        project_name=project_name,
        memory_root=memory_root,
        existing_context=existing_context
    )
    
    print(f"\n✅ 프로젝트 '{project_name}'로 전환 완료!")
    print(f"📁 작업 경로: {project_path} ({location})")
    if directory_error:
        print(f"⚠️ 디렉토리 관련 경고: {directory_error}")
    print(f"💾 캐시 경로: {memory_root}/{project_name}/.cache/")
    print(f"📊 캐시 버전: {context.get('version', 'unknown')}")
    print(f"📈 분석된 파일: {len(context.get('analyzed_files', {}))}개")
    
    tasks = context.get('tasks', {})
    if isinstance(tasks, dict):
        next_count = len(tasks.get('next', []))
        done_count = len(tasks.get('done', []))
        print(f"📋 남은 작업: {next_count}개")
        print(f"✅ 완료된 작업: {done_count}개")

    
    # 현재 계획 정보 표시
    plan = context.get('plan')
    if plan:
        print(f"\n📅 현재 계획: {plan.get('name', 'N/A')}")
        current_task_id = context.get('current_task')
        if current_task_id:
            # 현재 작업 찾기
            for phase_id, phase in plan.get('phases', {}).items():
                for task in phase.get('tasks', []):
                    if task.get('id') == current_task_id:
                        print(f"🎯 현재 작업: [{task['id']}] {task.get('title', 'N/A')}")
                        print(f"   상태: {task.get('status', 'pending')}")
                        break
        
        # Phase별 진행 상황
        print("\n📊 Phase별 진행 상황:")
        for phase_id, phase in plan.get('phases', {}).items():
            tasks = phase.get('tasks', [])
            completed = sum(1 for t in tasks if t.get('status') == 'completed')
            in_progress = sum(1 for t in tasks if t.get('status') == 'in_progress')
            
            status_icon = "✅" if phase.get('status') == 'completed' else "🔄" if in_progress > 0 else "📝"
            print(f"   {status_icon} {phase.get('name', phase_id)}: {completed}/{len(tasks)} 완료")

    # 글로벌 context 업데이트 - 개선된 방법
    # 1. 현재 모듈의 globals() 업데이트
    if 'context' in globals():
        globals()['context'].update(context)
    else:
        globals()['context'] = context

    # 🧠 프로젝트 지혜 관리 시스템 (항상 실행)
    # 1. project_vision.md 로드
    vision_path = os.path.join(project_path, "project_vision.md")
    if os.path.exists(vision_path):
        try:
            vision_content = read_file(vision_path)
            context['project_vision'] = {
                'content': vision_content[:500] + "..." if len(vision_content) > 500 else vision_content,
                'sections': [],
                'last_loaded': datetime.now().isoformat(),
                'file_path': 'project_vision.md'
            }
            print("📌 project_vision.md 로드 완료")
        except Exception as e:
            print(f"⚠️ project_vision.md 로드 실패: {e}")

    # 2. project_wisdom 초기화 또는 로드
    if 'project_wisdom' not in context:
        context['project_wisdom'] = {
            'error_patterns': {},
            'common_mistakes': {},
            'best_practices': [],
            'last_updated': datetime.now().isoformat()
        }
    
    # 3. 전역 context 재업데이트 (wisdom 포함)
    if 'context' in globals():
        globals()['context'].update(context)

# 명령어 처리 함수들 (cmd_plan, cmd_task, cmd_next)은 동일하므로 생략...


# ===========================================
# 메인 진입점
# ===========================================

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = ' '.join(sys.argv[1:])
        # process_command(command)
    else:
        print("AI Coding Brain v7.0 (캐시 구조 개선)")
        print("사용법: python claude_code_ai_brain.py [명령어]")
        print("명령어: /flow, /plan, /task, /next, /save")

