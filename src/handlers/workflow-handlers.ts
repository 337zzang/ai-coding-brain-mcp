"import { ToolResult } from '../types/tool-interfaces';\nimport { logger } from '../services/logger';\n// import { getActiveReplSession } from './repl-session-manager'; // Not exported\n\ninterface FlowProjectResult {\n    success: boolean;\n    project_name?: string;\n    path?: string;\n    git_branch?: string;\n    workflow_status?: any;\n    error?: string;\n    details?: any;\n}\n\nexport async function handleFlowProject(params: { project_name: string }): Promise<ToolResult> {\n    const code = `\n# 개선된 flow_project 핸들러 - 명시적 에러 처리\nimport sys\nimport os\nimport json\nimport traceback\nfrom pathlib import Path\n\nproject_name = \"${params.project_name}\"\nresult = {\n    \"success\": False,\n    \"project_name\": project_name,\n    \"error\": None,\n    \"details\": {}\n}\n\n# 로그 출력을 억제하기 위한 설정\nimport logging\nlogging.getLogger().setLevel(logging.CRITICAL)\n\n# stdout 캡처를 위한 설정\nfrom io import StringIO\ncaptured_output = StringIO()\n\ntry:\n    # 1. Python 경로 설정\n    current_dir = Path.cwd()\n    python_dir = current_dir / 'python'\n    if python_dir.exists() and str(python_dir) not in sys.path:\n        sys.path.insert(0, str(python_dir))\n\n    # 2. enhanced_flow import\n    try:\n        from enhanced_flow import cmd_flow_with_context\n    except ImportError as e:\n        result[\"error\"] = f\"enhanced_flow 모듈 import 실패: {str(e)}\"\n        result[\"details\"][\"import_error\"] = traceback.format_exc()\n        print(f\"JSON_RESULT_START{json.dumps(result, ensure_ascii=False)}JSON_RESULT_END\")\n        sys.exit(1)\n\n    # 3. stdout 리다이렉트\n    original_stdout = sys.stdout\n    sys.stdout = captured_output\n    \n    try:\n        # 4. 프로젝트 전환 실행\n        flow_result = cmd_flow_with_context(project_name)\n\n        if flow_result and isinstance(flow_result, dict):\n            result[\"success\"] = True\n            result[\"path\"] = flow_result.get(\"context\", {}).get(\"project_path\", os.getcwd())\n            result[\"git_branch\"] = flow_result.get(\"context\", {}).get(\"git\", {}).get(\"branch\", \"unknown\")\n            result[\"workflow_status\"] = flow_result.get(\"workflow_status\", {})\n            # 추가 데이터 수집 (README, file_directory, workflow)\n            project_path = flow_result.get(\"path\", \".\")\n            if not project_path:\n                project_path = flow_result.get(\"context\", {}).get(\"project_path\", \".\")\n            \n            # 1. flow_project_view 데이터 수집\n            flow_project_view = {}\n            \n            # README.md 읽기\n            try:\n                readme_path = Path(project_path) / \"README.md\"\n                if readme_path.exists():\n                    with open(readme_path, 'r', encoding='utf-8') as f:\n                        flow_project_view[\"readme\"] = f.read()\n                else:\n                    flow_project_view[\"readme\"] = \"⚠️ README.md not found\"\n            except Exception as e:\n                flow_project_view[\"readme\"] = f\"⚠️ Error reading README.md: {str(e)}\"\n            \n            # file_directory.md 읽기\n            try:\n                file_dir_path = Path(project_path) / \"file_directory.md\"\n                if file_dir_path.exists():\n                    with open(file_dir_path, 'r', encoding='utf-8') as f:\n                        flow_project_view[\"fileDirectoryMd\"] = f.read()\n                else:\n                    flow_project_view[\"fileDirectoryMd\"] = \"⚠️ file_directory.md not found\"\n            except Exception as e:\n                flow_project_view[\"fileDirectoryMd\"] = f\"⚠️ Error reading file_directory.md: {str(e)}\"\n            \n            # workflow 정보 읽기\n            try:\n                workflow_path = Path(project_path) / \"memory\" / \"workflow.json\"\n                if not workflow_path.exists():\n                    workflow_path = Path(project_path) / \"memory\" / \"workflow_data.json\"\n                if workflow_path.exists():\n                    with open(workflow_path, 'r', encoding='utf-8') as f:\n                        flow_project_view[\"workflowDetail\"] = f.read()\n                else:\n                    flow_project_view[\"workflowDetail\"] = \"⚠️ workflow files not found\"\n            except Exception as e:\n                flow_project_view[\"workflowDetail\"] = f\"⚠️ Error reading workflow: {str(e)}\"\n            \n            # flow_project_view를 결과에 추가\n            flow_result[\"flow_project_view\"] = flow_project_view\n            \n            # 2. file_access_history를 최근 5개로 제한\n            if \"context\" in flow_result and \"file_access_history\" in flow_result.get(\"context\", {}):\n                history = flow_result[\"context\"][\"file_access_history\"]\n                if isinstance(history, list) and len(history) > 5:\n                    # 최근 5개만 선택하고 역순으로 정렬 (최신이 먼저)\n                    flow_result[\"context\"][\"file_access_history\"] = history[-5:][::-1]\n            \n            result[\"details\"] = flow_result\n        else:\n            result[\"error\"] = f\"예상치 못한 반환값: {type(flow_result)}\"\n            result[\"details\"][\"return_value\"] = str(flow_result)\n\n    except Exception as e:\n        result[\"error\"] = f\"프로젝트 전환 중 오류: {str(e)}\"\n        result[\"details\"][\"traceback\"] = traceback.format_exc()\n        result[\"details\"][\"exception_type\"] = type(e).__name__\n    finally:\n        # stdout 복원\n        sys.stdout = original_stdout\n        captured_logs = captured_output.getvalue()\n        result[\"details\"][\"logs\"] = captured_logs\n\n    # 5. 결과 출력 (JSON만 출력)\n    print(f\"JSON_RESULT_START{json.dumps(result, ensure_ascii=False)}JSON_RESULT_END\")\n\nexcept Exception as e:\n    # 최상위 예외 처리\n    result[\"error\"] = f\"치명적 오류: {str(e)}\"\n    result[\"details\"][\"fatal_traceback\"] = traceback.format_exc()\n    print(f\"JSON_RESULT_START{json.dumps(result, ensure_ascii=False)}JSON_RESULT_END\")\n    sys.exit(1)`;\n\n    try {\n        // ExecuteCodeHandler를 사용하여 Python 코드 실행\n        const { ExecuteCodeHandler } = await import('./execute-code-handler');\n        const toolResult = await ExecuteCodeHandler.handleExecuteCode({ code, language: 'python' });\n        \n        // ToolResult에서 실제 결과 추출\n        let execResult: any;\n        try {\n            // toolResult.content[0].text는 JSON 문자열\n            const resultText = toolResult.content[0]?.text || '';\n            execResult = JSON.parse(resultText);\n        } catch (e) {\n            logger.error('Failed to parse ExecuteCodeHandler result:', e);\n            return {\n                content: [{\n                    type: 'text',\n                    text: `❌ 결과 형식 오류\\n\\n${toolResult.content[0]?.text || ''}`\n                }]\n            };\n        }\n        \n        // 에러 확인\n        if (!execResult.success || execResult.error) {\n            logger.error('Python execution failed:', execResult.error);\n            return {\n                content: [{\n                    type: 'text',\n                    text: `❌ Python 실행 실패\\n\\n에러: ${execResult.error || 'Unknown error'}\\n\\n${execResult.stderr || ''}`\n                }]\n            };\n        }\n\n        // stdout에서 JSON 결과 추출\n        let result: FlowProjectResult;\n        try {\n            // stdout에서 JSON_RESULT_START와 JSON_RESULT_END 마커로 감싸진 JSON 추출\n            const stdout = execResult.stdout || '';\n            const jsonMatch = stdout.match(/JSON_RESULT_START(.+?)JSON_RESULT_END/s);\n\n            if (jsonMatch && jsonMatch[1]) {\n                result = JSON.parse(jsonMatch[1]);\n            } else {\n                throw new Error('No valid JSON found in output');\n            }\n        } catch (parseError) {\n            logger.error('Failed to parse result:', parseError);\n            return {\n                content: [{\n                    type: 'text',\n                    text: `❌ 결과 파싱 실패\\n\\n출력:\\n${execResult.stdout}\\n\\n에러:\\n${execResult.stderr}`\n                }]\n            };\n        }\n\n        // 결과 처리\n        if (!result.success) {\n            logger.error('Flow project failed:', result.error);\n            return {\n                content: [{\n                    type: 'text',\n                    text: `❌ 프로젝트 전환 실패: ${params.project_name}\\n\\n에러: ${result.error}\\n\\n${result.details?.traceback ? '\\n스택 트레이스:\\n' + result.details.traceback : ''}`\n                }]\n            };\n        }\n\n        // 성공 응답 - 실제 데이터를 포함하여 반환\n        const successMessage = `✅ 프로젝트 전환 성공: ${result.project_name}`;\n        \n        // 전체 결과 데이터 구성\n        const responseData = {\n            success: true,\n            project_name: result.project_name,\n            path: result.path || 'Unknown',\n            git_branch: result.git_branch || 'Unknown',\n            context: result.details?.context || {},\n            workflow_status: result.workflow_status || {},\n            message: successMessage\n        };\n\n        // Python의 flat 구조를 처리하도록 수정\n        const workflowInfo = result.workflow_status?.status === 'active' ?\n            `\\n📋 활성 워크플로우: ${result.workflow_status.plan_name || 'Unknown'}\\n` +\n            `   진행률: ${result.workflow_status.completed_tasks || 0}/${result.workflow_status.total_tasks || 0}` :\n            '\\n⚠️ 활성 워크플로우 없음';\n\n        return {\n            content: [{\n                type: 'text',\n                text: successMessage + '\\n\\n' + \n                      `📍 경로: ${responseData.path}\\n` +\n                      `🌿 Git 브랜치: ${responseData.git_branch}` +\n                      workflowInfo\n            }, {\n                type: 'text',\n                text: '```json\\n' + JSON.stringify(responseData, null, 2) + '\\n```'\n            }]\n        };\n\n    } catch (error) {\n        logger.error('handleFlowProject error:', error);\n        return {\n            content: [{\n                type: 'text',\n                text: `❌ 핸들러 오류\\n\\n${error instanceof Error ? error.message : String(error)}`\n            }]\n        };\n    }\n}\n\n// 기타 워크플로우 관련 핸들러들...\n"