#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
🧠 AI Coding Brain 시스템 v3.0 - 통합 지능형 개발 환경
=====================================================

Claude Desktop execute_code 환경을 위한 완전 통합 AI 브레인 시스템

v3.0 주요 특징:
- UnifiedContextManager와 VibeMemoryManager 완전 통합
- 싱글톤 패턴으로 안정적인 인스턴스 관리
- 자동 세션 복원 및 지속성
- 지능형 코드 분석 및 추적
- 통합 메모리 뱅크 시스템

작성자: Claude + 사용자 협업
생성일: 2025-06-04
수정일: 2025-06-13 (v3.0 - 완전 통합 구조)
"""

import os
import json
import logging
import datetime as dt
from pathlib import Path
from typing import Union, Optional, Dict, Any, List, Callable
import sys
import traceback
from collections import defaultdict

# ============================================
# 로깅 설정
# ============================================
logging.basicConfig(
    level=logging.INFO,
    format='[%(levelname)s %(asctime)s] %(message)s',
    datefmt='%H:%M:%S'
)
logger = logging.getLogger(__name__)

# ============================================
# 모듈 임포트 및 초기화
# ============================================

# 1. Auto-tracking wrapper
try:
    from auto_tracking_wrapper import *
    logger.info("✅ 자동 추적 래퍼 로드 - 모든 파일 작업이 자동으로 추적됩니다")
    AUTO_TRACKING_ENABLED = True
except ImportError:
    logger.warning("⚠️ 자동 추적 래퍼 로드 실패 - 원본 모듈 사용")
    from file_system_helpers import *
    from ast_parser_helpers import *
    AUTO_TRACKING_ENABLED = False

# 2. Context Manager v3.0
try:
    from context_manager import (
        initialize_context,
        save_context,
        update_cache,
        get_value,
        find_symbol,
        track_file_access,
        track_function_edit,
        get_work_tracking_summary,
        build_index,
        propose_next_steps
    )
    CONTEXT_MANAGER_AVAILABLE = True
    logger.info("✅ Context Manager v3.0 로드 완료")
except ImportError as e:
    CONTEXT_MANAGER_AVAILABLE = False
    logger.error(f"❌ Context Manager 로드 실패: {e}")

# 3. Vibe Memory System
try:
    from vibe_memory_system import VibeMemoryManager, get_vibe_commands
    VIBE_MEMORY_AVAILABLE = True
    logger.info("✅ Vibe Memory System 로드 완료")
except ImportError as e:
    VIBE_MEMORY_AVAILABLE = False
    logger.warning(f"⚠️ Vibe Memory System 로드 실패: {e}")

# ============================================
# 글로벌 상태 관리
# ============================================
class GlobalState:
    """글로벌 상태 관리 싱글톤"""
    _instance = None
    
    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance.initialized = False
        return cls._instance
    
    def __init__(self):
        if not self.initialized:
            self.context: Optional[Dict[str, Any]] = None
            self.project_path: Optional[str] = None
            self.project_name: Optional[str] = None
            self.session_start: dt.datetime = dt.datetime.now()
            self.initialized: bool = True

_global_state = GlobalState()

# ============================================
# 핵심 헬퍼 함수
# ============================================

def initialize_ai_brain(project_path: str = None, project_name: str = None) -> Dict[str, Any]:
    """
    AI Brain 시스템 초기화
    
    Args:
        project_path: 프로젝트 경로 (기본값: 현재 디렉토리)
        project_name: 프로젝트 이름 (기본값: 디렉토리 이름)
    
    Returns:
        초기화된 컨텍스트
    """
    global _global_state
    
    # 기본값 설정
    if project_path is None:
        project_path = os.getcwd()
    if project_name is None:
        project_name = os.path.basename(project_path)
    
    _global_state.project_path = project_path
    _global_state.project_name = project_name
    
    logger.info(f"🚀 AI Brain 초기화 시작: {project_name}")
    
    # Context Manager 초기화
    if CONTEXT_MANAGER_AVAILABLE:
        try:
            _global_state.context = initialize_context(project_path, project_name)
            logger.info("✅ Context Manager 초기화 완료")
            
            # 초기 통계 표시
            analyzed = len(get_value(_global_state.context, 'analyzed_files', {}))
            symbols = len(get_value(_global_state.context, 'symbol_index', {}))
            logger.info(f"   • 분석된 파일: {analyzed}개")
            logger.info(f"   • 심볼 인덱스: {symbols}개")
            
        except Exception as e:
            logger.error(f"❌ Context Manager 초기화 실패: {e}")
            _global_state.context = _create_minimal_context()
    else:
        _global_state.context = _create_minimal_context()
    
    return _global_state.context

def _create_minimal_context() -> Dict[str, Any]:
    """최소한의 컨텍스트 생성 (폴백용)"""
    return {
        'project_name': _global_state.project_name,
        'project_path': _global_state.project_path,
        'created_at': dt.datetime.now().isoformat(),
        'version': 'minimal',
        'cache': {
            'analyzed_files': {},
            'symbol_index': {},
            'work_tracking': {}
        },
        'tasks': {'next': [], 'done': []},
        'current_focus': '',
        'coding_experiences': []
    }

# ============================================
# 지능형 분석 함수
# ============================================

def analyze_project_structure(extensions: List[str] = None) -> Dict[str, Any]:
    """
    프로젝트 전체 구조 분석
    
    Args:
        extensions: 분석할 파일 확장자 리스트 (기본: ['.py'])
    
    Returns:
        분석 결과
    """
    if extensions is None:
        extensions = ['.py']
    
    logger.info("🔍 프로젝트 구조 분석 시작")
    
    results = {
        'files_analyzed': 0,
        'total_functions': 0,
        'total_classes': 0,
        'errors': []
    }
    
    # 프로젝트 내 모든 파일 찾기
    for root, dirs, files in os.walk(_global_state.project_path):
        # 숨김 디렉토리 제외
        dirs[:] = [d for d in dirs if not d.startswith('.')]
        
        for file in files:
            if any(file.endswith(ext) for ext in extensions):
                file_path = os.path.join(root, file)
                
                try:
                    # 파일 분석
                    analysis = parse_with_snippets(file_path)
                    if analysis:
                        results['files_analyzed'] += 1
                        results['total_functions'] += len(analysis.get('functions', []))
                        results['total_classes'] += len(analysis.get('classes', []))
                        
                        # 캐시 업데이트
                        if _global_state.context:
                            update_cache(_global_state.context, 
                                       f'analyzed_files.{file_path}', 
                                       analysis)
                            
                except Exception as e:
                    error_msg = f"파일 분석 실패: {file_path} - {str(e)}"
                    logger.error(error_msg)
                    results['errors'].append(error_msg)
    
    # 심볼 인덱스 구축
    if _global_state.context:
        analyzed_files = get_value(_global_state.context, 'analyzed_files', {})
        build_index(_global_state.context, analyzed_files)
    
    # 저장
    save_ai_brain_state()
    
    logger.info(f"✅ 분석 완료: {results['files_analyzed']}개 파일")
    return results

def save_ai_brain_state() -> bool:
    """AI Brain 상태 저장"""
    if not _global_state.context:
        logger.warning("저장할 컨텍스트가 없습니다")
        return False
    
    try:
        result = save_context()
        if result:
            logger.info("💾 AI Brain 상태 저장 완료")
        return result
    except Exception as e:
        logger.error(f"❌ 저장 중 오류: {e}")
        return False

# ============================================
# 지능형 제안 시스템
# ============================================

def get_ai_suggestions(limit: int = 5) -> List[Dict[str, Any]]:
    """AI 기반 다음 단계 제안"""
    if not _global_state.context:
        return []
    
    suggestions = propose_next_steps(_global_state.context, limit)
    
    # 추가 제안 로직
    work_tracking = get_value(_global_state.context, 'work_tracking', {})
    
    # 세션 시간 기반 제안
    session_duration = (dt.datetime.now() - _global_state.session_start).total_seconds()
    if session_duration > 7200:  # 2시간 이상
        suggestions.insert(0, {
            'type': 'health',
            'priority': 'high',
            'text': '2시간 이상 작업하셨습니다. 잠시 휴식을 취하세요! ☕',
            'action': 'take_break'
        })
    
    return suggestions

# ============================================
# 명령어 시스템
# ============================================

def process_command(command: str, *args) -> Any:
    """
    명령어 처리 시스템
    
    Args:
        command: 명령어 문자열
        *args: 명령어 인자들
    
    Returns:
        명령어 실행 결과
    """
    commands = {
        '/flow': cmd_flow,
        '/analyze': cmd_analyze,
        '/task': cmd_task,
        '/done': cmd_done,
        '/focus': cmd_focus,
        '/suggest': cmd_suggest,
        '/save': cmd_save,
        '/status': cmd_status,
        '/help': cmd_help
    }
    
    if command in commands:
        return commands[command](*args)
    else:
        return f"❌ 알 수 없는 명령어: {command}\n💡 /help로 사용 가능한 명령어를 확인하세요"

def cmd_flow(*args):
    """프로젝트 상태 및 작업 흐름 표시"""
    if not _global_state.context:
        return "❌ 컨텍스트가 초기화되지 않았습니다"
    
    output = []
    output.append("\n🔥 AI Coding Brain - Project Flow")
    output.append("=" * 70)
    
    # 프로젝트 정보
    output.append(f"\n📌 프로젝트: {_global_state.project_name}")
    output.append(f"📍 경로: {_global_state.project_path}")
    output.append(f"🎯 현재 포커스: {_global_state.context.get('current_focus', 'Not set')}")
    
    # 작업 진행률
    tasks = _global_state.context.get('tasks', {})
    done = len(tasks.get('done', []))
    next = len(tasks.get('next', []))
    total = done + next
    progress = (done / total * 100) if total > 0 else 0
    
    output.append(f"\n📊 진행률: {progress:.1f}% ({done}/{total})")
    
    # 분석된 파일
    analyzed = get_value(_global_state.context, 'analyzed_files', {})
    output.append(f"\n📁 분석된 파일: {len(analyzed)}개")
    
    # 작업 추적
    output.append(f"\n{get_work_tracking_summary(_global_state.context)}")
    
    # AI 제안
    output.append("\n💡 AI 제안:")
    suggestions = get_ai_suggestions(3)
    for i, suggestion in enumerate(suggestions, 1):
        output.append(f"   {i}. {suggestion['text']}")
    
    # 자동 저장
    save_ai_brain_state()
    
    return '\n'.join(output)

def cmd_analyze(*args):
    """프로젝트 파일 분석"""
    extensions = list(args) if args else ['.py']
    results = analyze_project_structure(extensions)
    
    output = [f"\n✅ 분석 완료:"]
    output.append(f"   • 파일: {results['files_analyzed']}개")
    output.append(f"   • 함수: {results['total_functions']}개")
    output.append(f"   • 클래스: {results['total_classes']}개")
    
    if results['errors']:
        output.append(f"\n⚠️ 오류 {len(results['errors'])}개 발생")
    
    return '\n'.join(output)

def cmd_task(*args):
    """새 작업 추가"""
    if not args:
        return "❌ 작업 내용을 입력하세요"
    
    task = ' '.join(args)
    if _global_state.context:
        tasks = _global_state.context.setdefault('tasks', {})
        tasks.setdefault('next', []).append(task)
        save_ai_brain_state()
        return f"✅ 작업 추가됨: {task}"
    
    return "❌ 컨텍스트가 초기화되지 않았습니다"

def cmd_done(*args):
    """작업 완료 처리"""
    if not _global_state.context:
        return "❌ 컨텍스트가 초기화되지 않았습니다"
    
    tasks = _global_state.context.get('tasks', {})
    next_tasks = tasks.get('next', [])
    
    if not next_tasks:
        return "ℹ️ 진행 중인 작업이 없습니다"
    
    if args and args[0].isdigit():
        idx = int(args[0]) - 1
        if 0 <= idx < len(next_tasks):
            task = next_tasks.pop(idx)
            tasks.setdefault('done', []).append(task)
            save_ai_brain_state()
            return f"✅ 완료: {task}"
    
    # 첫 번째 작업 완료
    task = next_tasks.pop(0)
    tasks.setdefault('done', []).append(task)
    save_ai_brain_state()
    return f"✅ 완료: {task}"

def cmd_focus(*args):
    """현재 포커스 설정"""
    if not args:
        return f"🎯 현재 포커스: {_global_state.context.get('current_focus', 'Not set')}"
    
    focus = ' '.join(args)
    if _global_state.context:
        _global_state.context['current_focus'] = focus
        save_ai_brain_state()
        return f"🎯 포커스 설정: {focus}"
    
    return "❌ 컨텍스트가 초기화되지 않았습니다"

def cmd_suggest(*args):
    """AI 제안 표시"""
    limit = int(args[0]) if args and args[0].isdigit() else 5
    suggestions = get_ai_suggestions(limit)
    
    if not suggestions:
        return "💡 현재 제안이 없습니다"
    
    output = ["💡 AI 제안:"]
    for i, suggestion in enumerate(suggestions, 1):
        output.append(f"   {i}. [{suggestion['type']}] {suggestion['text']}")
    
    return '\n'.join(output)

def cmd_save(*args):
    """상태 저장"""
    if save_ai_brain_state():
        return "💾 저장 완료!"
    else:
        return "❌ 저장 실패"

def cmd_status(*args):
    """시스템 상태 표시"""
    output = ["🔧 AI Brain System Status"]
    output.append("=" * 40)
    output.append(f"• Context Manager: {'✅' if CONTEXT_MANAGER_AVAILABLE else '❌'}")
    output.append(f"• Vibe Memory: {'✅' if VIBE_MEMORY_AVAILABLE else '❌'}")
    output.append(f"• Auto Tracking: {'✅' if AUTO_TRACKING_ENABLED else '❌'}")
    output.append(f"• Project: {_global_state.project_name or 'Not initialized'}")
    
    session_time = dt.datetime.now() - _global_state.session_start
    output.append(f"• Session Time: {str(session_time).split('.')[0]}")
    
    return '\n'.join(output)

def cmd_help(*args):
    """도움말 표시"""
    help_text = """
🤖 AI Coding Brain 명령어 도움말
=====================================

기본 명령어:
  /flow       - 프로젝트 상태 및 작업 흐름 표시
  /analyze    - 프로젝트 파일 분석
  /task       - 새 작업 추가
  /done       - 작업 완료 처리
  /focus      - 현재 포커스 설정
  /suggest    - AI 제안 표시
  /save       - 상태 저장
  /status     - 시스템 상태 표시
  /help       - 이 도움말 표시

사용 예시:
  /task API 엔드포인트 구현
  /done 1
  /focus 리팩토링 작업
  /analyze .py .js
  
💡 자연어로도 명령 가능합니다!
"""
    return help_text

# ============================================
# 자동 초기화 (execute_code 환경용)
# ============================================

def auto_initialize():
    """execute_code 실행 시 자동 초기화"""
    if _global_state.context is None:
        project_path = os.getcwd()
        project_name = os.path.basename(project_path)
        
        # .cache 디렉토리에서 프로젝트 이름 추론
        cache_dir = os.path.join(project_path, '.cache')
        if os.path.exists(cache_dir):
            for file in os.listdir(cache_dir):
                if file.startswith('cache_') and file.endswith('.json'):
                    project_name = file[6:-5]  # cache_NAME.json에서 NAME 추출
                    break
        
        initialize_ai_brain(project_path, project_name)

# 자동 초기화 실행
auto_initialize()

# ============================================
# 전역 헬퍼 함수 등록
# ============================================

# 자주 사용하는 함수들을 전역으로 노출
globals().update({
    'flow': lambda: process_command('/flow'),
    'analyze': lambda *args: process_command('/analyze', *args),
    'task': lambda *args: process_command('/task', *args),
    'done': lambda *args: process_command('/done', *args),
    'focus': lambda *args: process_command('/focus', *args),
    'suggest': lambda *args: process_command('/suggest', *args),
    'save': lambda: process_command('/save'),
    'status': lambda: process_command('/status'),
    'help': lambda: process_command('/help'),
    
    # 컨텍스트 직접 접근
    'context': lambda: _global_state.context,
    'project_path': lambda: _global_state.project_path,
    'project_name': lambda: _global_state.project_name
})

# ============================================
# 초기화 완료 메시지
# ============================================

if _global_state.context:
    logger.info("🧠 AI Coding Brain v3.0 준비 완료!")
    logger.info("💡 /help 또는 help()로 사용법을 확인하세요")
else:
    logger.warning("⚠️ AI Coding Brain 부분 초기화 - 일부 기능 제한")

# 자동으로 /flow 실행 (선택사항)
if _global_state.context and AUTO_TRACKING_ENABLED:
    print(process_command('/flow'))
