/**
 * AI Coding Brain MCP - Tool Definitions v8.0
 * 핵심 워크플로우 유지, 중복만 제거
 * 
 * 작성일: 2025-06-16
 */

// 도구 정의 타입
interface ToolDefinition {
    name: string;
    description: string;
    inputSchema: {
        type: string;
        properties: Record<string, any>;
        required?: string[];
    };
}

export const toolDefinitions: ToolDefinition[] = [
    {
        name: 'execute_code',
        description: `🧠 AI Coding Brain - JSON REPL Session 환경

## 자동 로드 객체
- **helpers** - 모든 헬퍼 함수 (24개)
- **context** - 프로젝트 컨텍스트
- **기본 모듈들** - os, sys, np, pd 등

## 핵심 명령어
- helpers.cmd_flow("프로젝트") - 프로젝트 전환
- helpers.cmd_plan() - 작업 계획 수립
- helpers.cmd_task() - 작업 추가
- helpers.cmd_next() - 다음 작업 진행

📚 전체 함수 목록은 UserPreferences 참조

## 🔧 작업 관리 워크플로우

### 계획 수립 (/plan)
1. 계획 분석 및 브리핑 제시
2. 사용자 승인 대기
3. helpers.cmd_plan() 실행
4. Phase별 작업 추가

### 작업 진행 (/next)
1. 현재 작업 완료 처리
2. helpers.cmd_next() 실행
3. 다음 작업 브리핑

## 📊 작업 실행 템플릿

### 작업 시작 전 브리핑
\`\`\`
🎯 작업: [작업 ID] [작업명]
======================================

📌 작업 목표:
[구체적인 목표 설명]

📁 수정 예정 파일:
- [파일1] : [변경 내용]

🔧 주요 변경사항:
1. [변경사항 1]
   - 위치: [파일명] > [함수명]
   - 내용: [구체적 변경]

⏱️ 예상 소요 시간: [X분]

이대로 진행하시겠습니까? (Y/N)
\`\`\`

### 단계별 실행
\`\`\`python
# 1단계: 백업
print("🔐 백업 생성 중...")
backup = helpers.backup_file(file, f"작업_{task_id}_전")

# 2단계: 수정
print(f"🔧 수정 작업 진행 ({step}/{total})")
helpers.replace_block(file, block, new_code)

# 3단계: 검증
print("🔍 수정 결과 검증 중...")
result = helpers.parse_with_snippets(file)
\`\`\`

### 결과 보고
\`\`\`
✅ 작업 완료: [작업명]
======================================

📊 수정 요약:
- 수정된 파일: X개
- 변경된 함수: Y개

📝 상세 변경 내역:
[파일별 상세 내역]

다음 작업으로 진행: /next
\`\`\`

## 🚨 오류 처리
\`\`\`
❌ 오류 발생!
======================================

📍 오류 위치:
- 파일: [경로]
- 함수: [함수명]
- 라인: [번호]

🔍 오류 정보:
- 타입: [에러 타입]
- 메시지: [에러 메시지]

💡 해결 방안:
[구체적인 해결 방법]
\`\`\``,
        inputSchema: {
            type: 'object',
            properties: {
                code: {
                    type: 'string',
                    description: 'Python 코드. helpers 객체를 통해 모든 작업 수행.'
                },
                language: {
                    type: 'string',
                    enum: ['python', 'javascript', 'typescript'],
                    description: '언어 (기본값: python)',
                    default: 'python'
                }
            },
            required: ['code']
        }
    },

    {
        name: 'restart_json_repl',
        description: `JSON REPL 세션 재시작

용도: 메모리 정리, 변수 초기화
기본값: helpers 유지하며 재시작

\`\`\`python
restart_json_repl()  # helpers 유지
restart_json_repl(keep_helpers=False)  # 완전 초기화
\`\`\``,
        inputSchema: {
            type: 'object',
            properties: {
                reason: {
                    type: 'string',
                    description: '재시작 이유',
                    default: '세션 새로고침'
                },
                keep_helpers: {
                    type: 'boolean',
                    description: 'helpers 객체 유지 여부',
                    default: true
                }
            },
            required: []
        }
    },

    {
        name: 'backup_file',
        description: `파일 백업 생성

사용: helpers.backup_file(filepath, reason)
반환: 백업 파일 경로

백업 구조:
\`\`\`
backups/
└── 2025-06-16/
    └── file.py.작업명.시간.bak
\`\`\``,
        inputSchema: {
            type: 'object',
            properties: {
                filepath: {
                    type: 'string',
                    description: '백업할 파일 경로'
                },
                reason: {
                    type: 'string',
                    description: '백업 이유 (파일명에 포함)',
                    default: 'backup'
                }
            },
            required: ['filepath']
        }
    },

    {
        name: 'restore_backup',
        description: `백업 복원

사용: helpers.restore_backup(backup_path, target_path?)

복원 프로세스:
1. 백업 파일 확인
2. 원본 경로 자동 추출
3. 기존 파일 백업
4. 복원 실행`,
        inputSchema: {
            type: 'object',
            properties: {
                backup_path: {
                    type: 'string',
                    description: '복원할 백업 파일 경로'
                },
                targetPath: {
                    type: 'string',
                    description: '복원 대상 경로 (선택사항)'
                }
            },
            required: ['backup_path']
        }
    },

    {
        name: 'list_backups',
        description: `백업 목록 조회

사용: list_backups(filename?)
반환: {backups: [...], total: N}`,
        inputSchema: {
            type: 'object',
            properties: {
                filename: {
                    type: 'string',
                    description: '필터링할 파일명 (선택사항)'
                }
            },
            required: []
        }
    },

    // ========== 프로젝트 워크플로우 도구 ==========
    {
        name: 'flow_project',
        description: `프로젝트 전환 도구

프로젝트를 전환하고 컨텍스트를 로드합니다.
내부적으로 helpers.cmd_flow()를 실행합니다.

사용 예:
- flow_project("my-project")
- flow_project("ai-coding-brain-mcp")`,
        inputSchema: {
            type: 'object',
            properties: {
                project_name: {
                    type: 'string',
                    description: '전환할 프로젝트 이름'
                }
            },
            required: ['project_name']
        }
    },

    {
        name: 'plan_project',
        description: `프로젝트 계획 수립

새로운 작업 계획을 수립합니다.
내부적으로 helpers.cmd_plan()을 실행합니다.

워크플로우:
1. 계획 분석 및 브리핑 제시
2. 사용자 승인 대기  
3. Phase별 작업 자동 생성`,
        inputSchema: {
            type: 'object',
            properties: {
                plan_name: {
                    type: 'string',
                    description: '계획 이름 (선택사항)'
                },
                description: {
                    type: 'string',
                    description: '계획 설명 (선택사항)'
                }
            },
            required: []
        }
    },

    {
        name: 'task_manage',
        description: `작업 관리

작업을 추가, 조회, 수정, 삭제합니다.
내부적으로 helpers.cmd_task()를 실행합니다.

사용 예:
- task_manage("add", "새로운 기능 구현")
- task_manage("list")
- task_manage("done", 1)`,
        inputSchema: {
            type: 'object',
            properties: {
                action: {
                    type: 'string',
                    description: '작업 액션 (add, list, done, remove)',
                    enum: ['add', 'list', 'done', 'remove']
                },
                args: {
                    type: 'array',
                    description: '액션에 따른 인자들',
                    items: {
                        type: 'string'
                    }
                }
            },
            required: ['action']
        }
    },

    {
        name: 'next_task',
        description: `다음 작업 진행

현재 작업을 완료 처리하고 다음 작업으로 진행합니다.
내부적으로 helpers.cmd_next()를 실행합니다.

워크플로우:
1. 현재 작업 완료 처리
2. 다음 작업 로드
3. 작업 브리핑 제시`,
        inputSchema: {
            type: 'object',
            properties: {},
            required: []
        }
    },

    {
    }
];