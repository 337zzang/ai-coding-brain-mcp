{
  "total_modules": 50,
  "total_classes": 82,
  "total_functions": 575,
  "modules": {
    "core.cache_manager": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\core\\cache_manager.py",
      "classes": [
        {
          "name": "CacheManager",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "cache_dir"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "Path",
                "self.cache_dir.mkdir",
                "defaultdict",
                "Lock",
                "self._load_metadata"
              ]
            },
            {
              "name": "_load_metadata",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 메타데이터 로드",
              "calls": [
                "self.metadata_file.exists",
                "open",
                "json.load",
                "data.get",
                "data.get",
                "defaultdict",
                "deps.items",
                "set",
                "logger.error"
              ]
            },
            {
              "name": "_save_metadata",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 메타데이터 저장",
              "calls": [
                "list",
                "self._dependencies.items",
                "<ast.Call object at 0x0000010C6A054790>.isoformat",
                "datetime.now",
                "open",
                "json.dump",
                "logger.error"
              ]
            },
            {
              "name": "_calculate_file_hash",
              "args": [
                "self",
                "filepath"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일의 해시 계산",
              "calls": [
                "filepath.exists",
                "filepath.stat",
                "open",
                "<ast.Call object at 0x0000010C6A03C580>.hexdigest",
                "hashlib.md5",
                "f.read",
                "hashlib.md5",
                "open",
                "hasher.update",
                "f.read",
                "f.seek",
                "hasher.update",
                "f.read",
                "f.seek",
                "hasher.update",
                "f.read",
                "hasher.update",
                "<ast.Call object at 0x0000010C6A03F850>.encode",
                "str",
                "hasher.hexdigest",
                "logger.error"
              ]
            },
            {
              "name": "_is_file_changed",
              "args": [
                "self",
                "filepath"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일이 변경되었는지 확인",
              "calls": [
                "<ast.Call object at 0x0000010C6A03FF40>.resolve",
                "Path",
                "self._calculate_file_hash",
                "self._file_hashes.get",
                "str",
                "str"
              ]
            },
            {
              "name": "track_dependency",
              "args": [
                "self",
                "cache_key",
                "filepath"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 항목이 의존하는 파일 추적",
              "calls": [
                "<ast.Call object at 0x0000010C6A030A60>.resolve",
                "Path",
                "<ast.Subscript object at 0x0000010C6A030B80>.add",
                "str",
                "str",
                "self._calculate_file_hash",
                "str"
              ]
            },
            {
              "name": "check_invalidation",
              "args": [
                "self",
                "cache_key"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 항목이 무효화되어야 하는지 확인",
              "calls": [
                "self._dependencies.get",
                "set",
                "self._is_file_changed",
                "Path",
                "logger.info"
              ]
            },
            {
              "name": "get",
              "args": [
                "self",
                "key",
                "check_dependencies"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시에서 값 가져오기",
              "calls": [
                "self.check_invalidation",
                "self.invalidate",
                "cache_file.exists",
                "open",
                "json.load",
                "datetime.fromisoformat",
                "datetime.now",
                "self.invalidate",
                "data.get",
                "logger.error"
              ]
            },
            {
              "name": "set",
              "args": [
                "self",
                "key",
                "value",
                "ttl",
                "dependencies"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시에 값 저장",
              "calls": [
                "self.track_dependency",
                "<ast.Call object at 0x0000010C6A00A7D0>.isoformat",
                "datetime.now",
                "<ast.Call object at 0x0000010C6A00A830>.timestamp",
                "datetime.now",
                "open",
                "json.dump",
                "self._save_metadata",
                "logger.error"
              ]
            },
            {
              "name": "invalidate",
              "args": [
                "self",
                "key"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 캐시 항목 무효화",
              "calls": [
                "self._cache.pop",
                "cache_file.exists",
                "cache_file.unlink",
                "self._dependencies.pop",
                "logger.info"
              ]
            },
            {
              "name": "invalidate_by_file",
              "args": [
                "self",
                "filepath"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 파일에 의존하는 모든 캐시 무효화",
              "calls": [
                "<ast.Call object at 0x0000010C6A04C760>.resolve",
                "Path",
                "self._is_file_changed",
                "list",
                "self._dependencies.items",
                "str",
                "self.invalidate",
                "invalidated.append",
                "self._save_metadata"
              ]
            },
            {
              "name": "clear_all",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 캐시 삭제",
              "calls": [
                "self._cache.clear",
                "self._dependencies.clear",
                "self._file_hashes.clear",
                "self.cache_dir.glob",
                "cache_file.unlink",
                "self._save_metadata",
                "logger.info"
              ]
            },
            {
              "name": "get_statistics",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 통계",
              "calls": [
                "list",
                "self.cache_dir.glob",
                "sum",
                "f.stat",
                "len",
                "len",
                "len",
                "len",
                "str"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_cache_manager",
          "args": [
            "cache_dir"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "싱글톤 캐시 매니저 인스턴스 가져오기",
          "calls": [
            "Path",
            "get_memory_path",
            "CacheManager"
          ]
        }
      ],
      "imports": [
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "time",
          "alias": null
        },
        {
          "module": "hashlib",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "timezone",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Set",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "threading",
          "name": "Lock",
          "alias": null
        },
        {
          "module": "collections",
          "name": "defaultdict",
          "alias": null
        },
        {
          "module": "python.path_utils",
          "name": "get_memory_path",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "core.context_manager": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\core\\context_manager.py",
      "classes": [
        {
          "name": "CacheAPI",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "cache_manager"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "Args:\n    cache_manager: CacheManager 인스턴스 또는 None",
              "calls": []
            },
            {
              "name": "get",
              "args": [
                "self",
                "key",
                "default"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시에서 값 조회",
              "calls": [
                "self._manager.get",
                "self._fallback_cache.get"
              ]
            },
            {
              "name": "set",
              "args": [
                "self",
                "key",
                "value",
                "ttl",
                "dependencies"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시에 값 저장",
              "calls": [
                "Path",
                "self._manager.set"
              ]
            },
            {
              "name": "invalidate",
              "args": [
                "self",
                "key"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 키 무효화",
              "calls": [
                "self._manager.invalidate",
                "self._fallback_cache.pop"
              ]
            },
            {
              "name": "invalidate_by_file",
              "args": [
                "self",
                "filepath"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일 변경에 따른 무효화",
              "calls": [
                "self._manager.invalidate_by_file",
                "Path",
                "list",
                "self._fallback_cache.keys",
                "self._fallback_cache.clear"
              ]
            },
            {
              "name": "clear",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "전체 캐시 클리어",
              "calls": [
                "self._manager.clear_all",
                "self._fallback_cache.clear"
              ]
            },
            {
              "name": "exists",
              "args": [
                "self",
                "key"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "키 존재 여부 확인",
              "calls": [
                "self._manager.get"
              ]
            },
            {
              "name": "get_stats",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 통계",
              "calls": [
                "self._manager.get_statistics",
                "len"
              ]
            },
            {
              "name": "set_with_file_dependency",
              "args": [
                "self",
                "key",
                "value",
                "filepath"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일 의존성과 함께 캐시 설정 (편의 메서드)",
              "calls": [
                "self.set"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "ContextManager",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "get_current_project_name",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 프로젝트 이름을 반환합니다.",
              "calls": []
            },
            {
              "name": "cache",
              "args": [
                "self"
              ],
              "decorators": [
                "property"
              ],
              "is_async": false,
              "docstring": "레거시 호환성을 위한 캐시 접근자",
              "calls": [
                "hasattr",
                "hasattr"
              ]
            },
            {
              "name": "initialize",
              "args": [
                "self",
                "project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트 매니저를 초기화합니다.",
              "calls": [
                "self.get_current_project_name",
                "CacheAPI",
                "self.get_current_project_name",
                "self.load_all"
              ]
            },
            {
              "name": "_ensure_cache_manager",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 매니저를 지연 초기화합니다 (필요할 때만)",
              "calls": [
                "get_cache_dir",
                "get_cache_manager",
                "hasattr",
                "logger.debug",
                "logger.warning"
              ]
            },
            {
              "name": "switch_project",
              "args": [
                "self",
                "new_project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트를 전환합니다.",
              "calls": [
                "print",
                "self.save_all",
                "print",
                "get_project_root",
                "project_root.exists",
                "ValueError",
                "switch_project_workflow",
                "self.load_all"
              ]
            },
            {
              "name": "load_all",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 데이터를 로드합니다.",
              "calls": [
                "self.get_current_project_name",
                "get_context_path",
                "context_path.exists",
                "read_json",
                "print",
                "len",
                "print",
                "self._migrate_old_cache",
                "get_workflow_path",
                "workflow_path.exists",
                "read_json",
                "print",
                "print",
                "self._migrate_old_workflow"
              ]
            },
            {
              "name": "save_all",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 데이터를 저장합니다.",
              "calls": [
                "get_context_path",
                "self.context.items",
                "os.path.join",
                "os.path.dirname",
                "os.makedirs",
                "os.path.join",
                "write_json",
                "<ast.Call object at 0x0000010C6A057970>.isoformat",
                "datetime.now",
                "Path",
                "print",
                "<ast.Call object at 0x0000010C6A057550>.isoformat",
                "datetime.now",
                "write_json",
                "Path",
                "print",
                "print",
                "get_workflow_path",
                "write_json",
                "Path",
                "print",
                "print"
              ]
            },
            {
              "name": "save",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "save_all의 별칭 (기존 코드 호환성)",
              "calls": [
                "self.save_all"
              ]
            },
            {
              "name": "_migrate_old_cache",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "기존 캐시 파일들을 새 구조로 마이그레이션합니다.",
              "calls": [
                "Path",
                "old_cache_dir.exists",
                "print",
                "core_file.exists",
                "open",
                "json.load",
                "analyzed_file.exists",
                "open",
                "json.load"
              ]
            },
            {
              "name": "_migrate_old_workflow",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "기존 워크플로우 데이터를 마이그레이션합니다.",
              "calls": [
                "Path",
                "old_workflow.exists",
                "open",
                "json.load",
                "print",
                "Path",
                "old_cache_dir.exists",
                "filepath.exists",
                "open",
                "<ast.Call object at 0x0000010C6A00B2B0>.replace",
                "cache_file.replace",
                "json.load"
              ]
            },
            {
              "name": "update_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트를 업데이트합니다.",
              "calls": [
                "len",
                "hasattr",
                "self._cache_api.set",
                "dependencies.append",
                "Path",
                "self._cache_manager.set",
                "self.context.update",
                "hasattr",
                "kwargs.items",
                "self._cache_api.set",
                "kwargs.items",
                "self._cache_manager.set"
              ]
            },
            {
              "name": "update_cache",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "update_context의 별칭 (기존 코드 호환성)",
              "calls": [
                "self.update_context"
              ]
            },
            {
              "name": "get_value",
              "args": [
                "self",
                "key",
                "default"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트에서 값을 가져옵니다.",
              "calls": [
                "hasattr",
                "str",
                "self._cache_api.get",
                "self.context.get",
                "hasattr",
                "str",
                "self._cache_api.set"
              ]
            },
            {
              "name": "get_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "전체 컨텍스트를 반환합니다 (최적화된 버전).",
              "calls": [
                "self.context.items"
              ]
            },
            {
              "name": "get",
              "args": [
                "self",
                "key",
                "default"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "get_value의 별칭",
              "calls": [
                "self.get_value"
              ]
            },
            {
              "name": "track_file_access",
              "args": [
                "self",
                "filepath"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일 접근을 추적합니다.",
              "calls": [
                "<ast.Call object at 0x0000010C6A04C430>.isoformat",
                "datetime.now",
                "<ast.Subscript object at 0x0000010C6A086B90>.append",
                "self._cache_manager.invalidate_by_file",
                "Path",
                "print",
                "len"
              ]
            },
            {
              "name": "track_function_edit",
              "args": [
                "self",
                "file",
                "function",
                "changes"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "함수 수정을 추적합니다.",
              "calls": [
                "<ast.Call object at 0x0000010C6A0877C0>.isoformat",
                "datetime.now",
                "<ast.Subscript object at 0x0000010C6A0878E0>.append"
              ]
            },
            {
              "name": "update_workflow_summary",
              "args": [
                "self",
                "summary"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 요약 정보 업데이트",
              "calls": [
                "hasattr",
                "summary.get",
                "summary.get",
                "summary.get",
                "summary.get",
                "<ast.Call object at 0x0000010C6A0D8460>.isoformat",
                "datetime.now",
                "self.save"
              ]
            },
            {
              "name": "add_workflow_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 이벤트 추가 (중요 이벤트만)",
              "calls": [
                "hasattr",
                "<ast.Subscript object at 0x0000010C6A0D8CA0>.append",
                "len",
                "self.save"
              ]
            },
            {
              "name": "get_task_context",
              "args": [
                "self",
                "task_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 태스크의 컨텍스트 조회",
              "calls": [
                "hasattr",
                "<ast.Subscript object at 0x0000010C6A0D9660>.get"
              ]
            },
            {
              "name": "clear_workflow_data",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 데이터 초기화",
              "calls": [
                "hasattr",
                "self.save"
              ]
            },
            {
              "name": "get_recent_workflow_events",
              "args": [
                "self",
                "limit"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "최근 워크플로우 이벤트 조회",
              "calls": [
                "hasattr"
              ]
            },
            {
              "name": "invalidate_cache",
              "args": [
                "self",
                "key"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 캐시 항목 무효화",
              "calls": [
                "hasattr",
                "self._cache_api.invalidate",
                "hasattr",
                "self._fallback_cache.pop",
                "self._ensure_cache_manager",
                "self._cache_manager.invalidate"
              ]
            },
            {
              "name": "invalidate_cache_by_file",
              "args": [
                "self",
                "filepath"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일 변경에 따른 캐시 무효화",
              "calls": [
                "self._ensure_cache_manager",
                "self._cache_manager.invalidate_by_file",
                "Path",
                "hasattr",
                "self._cache_api.clear",
                "hasattr",
                "self._fallback_cache.clear"
              ]
            },
            {
              "name": "get_cache_statistics",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 통계 조회",
              "calls": [
                "hasattr",
                "self._cache_api.get_stats",
                "len",
                "getattr",
                "self._ensure_cache_manager",
                "self._cache_manager.get_statistics",
                "stats.update"
              ]
            },
            {
              "name": "set_cache_with_dependencies",
              "args": [
                "self",
                "key",
                "value",
                "dependencies"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "의존성이 있는 캐시 항목 설정",
              "calls": [
                "hasattr",
                "self._cache_api.set_with_file_dependency",
                "self._ensure_cache_manager",
                "Path",
                "self._cache_manager.set"
              ]
            },
            {
              "name": "get_tracking",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "통합 tracking 데이터 반환",
              "calls": []
            },
            {
              "name": "get_file_access_history",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일 접근 이력 반환 (레거시 호환성)",
              "calls": [
                "self.get_tracking",
                "<ast.Subscript object at 0x0000010C6A0FDEA0>.items",
                "file_data.get",
                "history.append",
                "op.get",
                "sorted"
              ]
            },
            {
              "name": "get_error_log",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 로그 반환 (레거시 호환성)",
              "calls": [
                "self.get_tracking",
                "tracking.get"
              ]
            },
            {
              "name": "get_tracking_statistics",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "추적 통계 반환",
              "calls": [
                "self.get_tracking",
                "<ast.Call object at 0x0000010C6A0FEFB0>.copy",
                "tracking.get",
                "len",
                "tracking.get",
                "len",
                "tracking.get"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_context_manager",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "싱글톤 ContextManager 인스턴스를 반환합니다.",
          "calls": [
            "ContextManager",
            "_context_manager_instance.initialize"
          ]
        }
      ],
      "imports": [
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "path_utils",
          "name": "get_context_path",
          "alias": null
        },
        {
          "module": "path_utils",
          "name": "get_workflow_path",
          "alias": null
        },
        {
          "module": "path_utils",
          "name": "get_project_root",
          "alias": null
        },
        {
          "module": "path_utils",
          "name": "get_cache_dir",
          "alias": null
        },
        {
          "module": "sys",
          "alias": null
        },
        {
          "module": "path_utils",
          "name": "get_context_path",
          "alias": null
        },
        {
          "module": "path_utils",
          "name": "get_workflow_path",
          "alias": null
        },
        {
          "module": "path_utils",
          "name": "get_project_root",
          "alias": null
        },
        {
          "module": "path_utils",
          "name": "get_cache_dir",
          "alias": null
        },
        {
          "module": "utils.io_helpers",
          "name": "atomic_write",
          "alias": null
        },
        {
          "module": "utils.io_helpers",
          "name": "write_json",
          "alias": null
        },
        {
          "module": "utils.io_helpers",
          "name": "read_json",
          "alias": null
        },
        {
          "module": "core.cache_manager",
          "name": "get_cache_manager",
          "alias": null
        },
        {
          "module": "python.workflow_integration",
          "name": "switch_project_workflow",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "core.context_manager_refactored": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\core\\context_manager_refactored.py",
      "classes": [
        {
          "name": "ContextManager",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "base_path"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "ContextManager 초기화",
              "calls": [
                "Path",
                "self.base_path.mkdir",
                "self._load_context",
                "self._register_event_handlers",
                "logger.info"
              ]
            },
            {
              "name": "_register_event_handlers",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 핸들러 등록",
              "calls": [
                "event_bus.subscribe",
                "event_bus.subscribe",
                "event_bus.subscribe",
                "event_bus.subscribe",
                "event_bus.subscribe",
                "logger.debug"
              ]
            },
            {
              "name": "switch_project",
              "args": [
                "self",
                "new_project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 전환 (이벤트 기반)\n\n더 이상 WorkflowManager를 직접 호출하지 않고,\nPROJECT_SWITCHED 이벤트를 발행합니다.",
              "calls": [
                "self.save_all",
                "logger.info",
                "self._load_context",
                "create_project_event",
                "<ast.Call object at 0x0000010C6A036A10>.isoformat",
                "datetime.now",
                "event_bus.publish",
                "logger.info",
                "create_context_event",
                "<ast.Call object at 0x0000010C6A05EA40>.isoformat",
                "datetime.now",
                "event_bus.publish",
                "logger.error"
              ]
            },
            {
              "name": "_on_project_loaded",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "PROJECT_LOADED 이벤트 핸들러",
              "calls": [
                "hasattr",
                "logger.info",
                "hasattr",
                "self.workflow_data.update",
                "self._save_workflow"
              ]
            },
            {
              "name": "_on_plan_created",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "PLAN_CREATED 이벤트 핸들러",
              "calls": [
                "hasattr",
                "event.payload.get",
                "event.payload.get",
                "event.timestamp.isoformat",
                "self.add_workflow_event",
                "event.timestamp.isoformat",
                "logger.debug"
              ]
            },
            {
              "name": "_on_plan_updated",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "PLAN_UPDATED 이벤트 핸들러",
              "calls": [
                "hasattr",
                "self.update_workflow_summary"
              ]
            },
            {
              "name": "_on_plan_completed",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "PLAN_COMPLETED 이벤트 핸들러",
              "calls": [
                "hasattr",
                "self.add_workflow_event",
                "event.payload.get",
                "event.timestamp.isoformat"
              ]
            },
            {
              "name": "_on_task_completed",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "TASK_COMPLETED 이벤트 핸들러",
              "calls": [
                "hasattr",
                "event.payload.get",
                "event.payload.get",
                "event.timestamp.isoformat",
                "self.add_workflow_event",
                "event.timestamp.isoformat"
              ]
            },
            {
              "name": "_load_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트 파일 로드",
              "calls": [
                "self.context_file.exists",
                "open",
                "json.load",
                "logger.debug",
                "logger.error",
                "self._load_workflow"
              ]
            },
            {
              "name": "_load_workflow",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 데이터 로드",
              "calls": [
                "self.workflow_file.exists",
                "open",
                "json.load",
                "logger.error"
              ]
            },
            {
              "name": "save_all",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 컨텍스트 데이터 저장",
              "calls": [
                "self._save_context",
                "self._save_workflow",
                "create_context_event",
                "<ast.Call object at 0x0000010C6A076CE0>.isoformat",
                "datetime.now",
                "event_bus.publish"
              ]
            },
            {
              "name": "_save_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트 파일 저장",
              "calls": [
                "self.context_file.exists",
                "open",
                "json.load",
                "open",
                "json.dump",
                "logger.debug",
                "logger.error"
              ]
            },
            {
              "name": "_save_workflow",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 데이터 저장",
              "calls": [
                "self.workflow_file.exists",
                "open",
                "json.load",
                "open",
                "json.dump",
                "logger.error"
              ]
            },
            {
              "name": "update_workflow_summary",
              "args": [
                "self",
                "summary"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 요약 정보 업데이트",
              "calls": [
                "<ast.Subscript object at 0x0000010C6A04E3E0>.update",
                "<ast.Call object at 0x0000010C6A04C4F0>.isoformat",
                "datetime.now",
                "self._save_workflow"
              ]
            },
            {
              "name": "add_workflow_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 이벤트 추가",
              "calls": [
                "<ast.Subscript object at 0x0000010C6A04C130>.append",
                "len",
                "self._save_workflow"
              ]
            },
            {
              "name": "get_task_context",
              "args": [
                "self",
                "task_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 태스크의 컨텍스트 조회",
              "calls": [
                "self.context_data.get",
                "task_contexts.get"
              ]
            },
            {
              "name": "clear_workflow_data",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 데이터 초기화",
              "calls": [
                "self._save_workflow"
              ]
            },
            {
              "name": "get_recent_workflow_events",
              "args": [
                "self",
                "limit"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "최근 워크플로우 이벤트 조회",
              "calls": [
                "self.workflow_data.get"
              ]
            },
            {
              "name": "cleanup",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "정리 작업 (이벤트 핸들러 제거)",
              "calls": [
                "event_bus.unsubscribe",
                "event_bus.unsubscribe",
                "event_bus.unsubscribe",
                "event_bus.unsubscribe",
                "event_bus.unsubscribe",
                "self.save_all",
                "logger.info"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_bus",
          "name": "event_bus",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_types",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_types",
          "name": "create_project_event",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_types",
          "name": "create_context_event",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "core.error_reporter": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\core\\error_reporter.py",
      "classes": [
        {
          "name": "ErrorReport",
          "bases": [],
          "methods": [],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ErrorReporter",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "report",
              "args": [
                "self",
                "error",
                "location",
                "cause",
                "attempted_solutions",
                "next_steps"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 보고 및 출력\n\nArgs:\n    error: 예외 객체 또는 에러 메시지\n    location: 에러 발생 위치\n    cause: 추정 원인\n    attempted_solutions: 시도한 해결책 목록\n    next_steps: 다음 단계 제안\n    \nReturns:\n    ErrorReport: 생성된 에러 보고",
              "calls": [
                "isinstance",
                "type",
                "str",
                "traceback.extract_tb",
                "str",
                "ErrorReport",
                "<ast.Call object at 0x0000010C6A034B80>.isoformat",
                "datetime.now",
                "self._print_report",
                "self._save_to_log"
              ]
            },
            {
              "name": "_print_report",
              "args": [
                "self",
                "report"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 보고를 콘솔에 출력",
              "calls": [
                "print",
                "self.report_template.format",
                "self._format_list",
                "self._format_list"
              ]
            },
            {
              "name": "_format_list",
              "args": [
                "self",
                "items"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스트를 포맷팅",
              "calls": [
                "<ast.Constant object at 0x0000010C6A04F910>.join",
                "enumerate"
              ]
            },
            {
              "name": "_save_to_log",
              "args": [
                "self",
                "report"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 로그 저장",
              "calls": [
                "<ast.Call object at 0x0000010C6A04EF50>.strftime",
                "datetime.now",
                "log_file.exists",
                "open",
                "json.load",
                "logs.append",
                "asdict",
                "open",
                "json.dump"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Union",
          "alias": null
        },
        {
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null
        },
        {
          "module": "dataclasses",
          "name": "asdict",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "core.project_storage": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\core\\project_storage.py",
      "classes": [
        {
          "name": "ProjectStorageManager",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "get_project_root",
                "get_memory_dir",
                "get_context_path",
                "get_workflow_path",
                "get_cache_dir",
                "get_backup_dir",
                "self.ensure_memory_structure"
              ]
            },
            {
              "name": "ensure_memory_structure",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "필수 디렉토리 구조 생성",
              "calls": [
                "ensure_dir",
                "logger.debug"
              ]
            },
            {
              "name": "load_project_state",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트의 모든 상태를 로드\n\nReturns:\n    {\n        'context': {...},\n        'workflow': {...},\n        'cache': {\n            'file_directory': [...],\n            'analyzed_files': [...],\n            'ast_cache': {...}\n        }\n    }",
              "calls": [
                "read_json",
                "read_json",
                "self.cache_files.items",
                "cache_path.exists",
                "read_json",
                "logger.info"
              ]
            },
            {
              "name": "save_project_state",
              "args": [
                "self",
                "context",
                "workflow",
                "cache_data"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 상태를 원자적으로 저장\n\nArgs:\n    context: context.json에 저장할 데이터\n    workflow: workflow.json에 저장할 데이터  \n    cache_data: 캐시 파일들에 저장할 데이터 (선택적)\n\nReturns:\n    성공 여부",
              "calls": [
                "<ast.Call object at 0x0000010C6A030400>.isoformat",
                "datetime.now",
                "write_json",
                "logger.error",
                "write_json",
                "logger.error",
                "cache_data.items",
                "write_json",
                "logger.warning",
                "logger.info",
                "logger.error"
              ]
            },
            {
              "name": "update_cache_file",
              "args": [
                "self",
                "cache_name",
                "data"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 캐시 파일 업데이트\n\nArgs:\n    cache_name: 캐시 이름 (file_directory, analyzed_files, ast_cache 등)\n    data: 저장할 데이터\n\nReturns:\n    성공 여부",
              "calls": [
                "logger.error",
                "<ast.Call object at 0x0000010C6A034070>.isoformat",
                "datetime.now",
                "write_json"
              ]
            },
            {
              "name": "get_cache_data",
              "args": [
                "self",
                "cache_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 캐시 데이터 읽기\n\nArgs:\n    cache_name: 캐시 이름\n\nReturns:\n    캐시 데이터 또는 None",
              "calls": [
                "cache_path.exists",
                "read_json",
                "isinstance",
                "cache_content.get"
              ]
            },
            {
              "name": "create_backup",
              "args": [
                "self",
                "include_cache"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 상태 백업 생성\n\nArgs:\n    include_cache: 캐시 파일도 백업할지 여부\n\nReturns:\n    백업 디렉토리 경로 또는 None",
              "calls": [
                "<ast.Call object at 0x0000010C6A036200>.strftime",
                "datetime.now",
                "self.context_path.exists",
                "ensure_dir",
                "backup_file",
                "self.workflow_path.exists",
                "ensure_dir",
                "backup_file",
                "ensure_dir",
                "self.cache_files.items",
                "cache_path.exists",
                "backup_file",
                "logger.info",
                "logger.error"
              ]
            },
            {
              "name": "get_file_paths",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 관리 파일 경로 반환",
              "calls": [
                "self.cache_files.items"
              ]
            },
            {
              "name": "get_storage_info",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "스토리지 상태 정보 반환",
              "calls": [
                "str",
                "<ast.Call object at 0x0000010C6A00AE00>.items",
                "self.get_file_paths",
                "path.is_file",
                "path.exists",
                "path.stat",
                "<ast.Call object at 0x0000010C6A00AE60>.isoformat",
                "datetime.fromtimestamp",
                "path.stat"
              ]
            },
            {
              "name": "clear_cache",
              "args": [
                "self",
                "cache_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 삭제\n\nArgs:\n    cache_name: 특정 캐시만 삭제 (None이면 모든 캐시)\n\nReturns:\n    성공 여부",
              "calls": [
                "cache_path.exists",
                "cache_path.unlink",
                "logger.info",
                "self.cache_files.items",
                "path.exists",
                "path.unlink",
                "logger.info",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "python.path_utils",
          "name": "get_project_root",
          "alias": null
        },
        {
          "module": "python.path_utils",
          "name": "get_memory_dir",
          "alias": null
        },
        {
          "module": "python.path_utils",
          "name": "get_context_path",
          "alias": null
        },
        {
          "module": "python.path_utils",
          "name": "get_workflow_path",
          "alias": null
        },
        {
          "module": "python.path_utils",
          "name": "get_cache_dir",
          "alias": null
        },
        {
          "module": "python.path_utils",
          "name": "get_backup_dir",
          "alias": null
        },
        {
          "module": "python.path_utils",
          "name": "ensure_dir",
          "alias": null
        },
        {
          "module": "python.utils.io_helpers",
          "name": "read_json",
          "alias": null
        },
        {
          "module": "python.utils.io_helpers",
          "name": "write_json",
          "alias": null
        },
        {
          "module": "python.utils.io_helpers",
          "name": "atomic_write",
          "alias": null
        },
        {
          "module": "python.utils.io_helpers",
          "name": "safe_read",
          "alias": null
        },
        {
          "module": "python.utils.io_helpers",
          "name": "backup_file",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "core.__init__": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\core\\__init__.py",
      "classes": [],
      "functions": [],
      "imports": [],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.__init__": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        {
          "module": "v3",
          "name": "*",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.ai_instruction_executor": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\ai_instruction_executor.py",
      "classes": [
        {
          "name": "AIInstructionExecutor",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "instruction_file"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "Path"
              ]
            },
            {
              "name": "get_pending_instructions",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "대기 중인 지시서 목록 반환",
              "calls": [
                "self.instruction_file.exists",
                "open",
                "json.load",
                "data.get",
                "pending.sort",
                "priority_order.get",
                "x.get",
                "x.get",
                "logger.error"
              ]
            },
            {
              "name": "execute_next_instruction",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "다음 지시서를 실행",
              "calls": [
                "self.get_pending_instructions",
                "logger.info",
                "logger.info",
                "logger.info",
                "logger.info",
                "logger.info",
                "logger.info",
                "logger.info",
                "<ast.Call object at 0x0000010C6A030580>.isoformat",
                "datetime.now",
                "enumerate",
                "logger.info",
                "len",
                "self._execute_action",
                "<ast.Subscript object at 0x0000010C6A030F10>.append",
                "logger.info",
                "<ast.Subscript object at 0x0000010C6A0322C0>.append",
                "logger.error",
                "<ast.Subscript object at 0x0000010C6A032A10>.append",
                "str",
                "logger.error",
                "<ast.Call object at 0x0000010C6A0330A0>.isoformat",
                "datetime.now",
                "self._update_instruction_status",
                "logger.info",
                "logger.info",
                "logger.info",
                "len",
                "logger.info",
                "len",
                "logger.info"
              ]
            },
            {
              "name": "_execute_action",
              "args": [
                "self",
                "action"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "개별 작업 실행",
              "calls": [
                "action.get",
                "print",
                "print",
                "outputs.append",
                "str"
              ]
            },
            {
              "name": "_update_instruction_status",
              "args": [
                "self",
                "instruction_id",
                "status",
                "result"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "지시서 상태 업데이트",
              "calls": [
                "open",
                "json.load",
                "<ast.Subscript object at 0x0000010C6A04FB20>.append",
                "<ast.Subscript object at 0x0000010C6A04E230>.append",
                "<ast.Subscript object at 0x0000010C6A04F730>.remove",
                "open",
                "json.dump",
                "logger.error"
              ]
            },
            {
              "name": "execute_all_pending",
              "args": [
                "self",
                "max_count"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 대기 중인 지시 실행 (최대 개수 제한)",
              "calls": [
                "range",
                "self.execute_next_instruction",
                "results.append"
              ]
            },
            {
              "name": "get_execution_summary",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "실행 요약 정보 반환",
              "calls": [
                "self.instruction_file.exists",
                "open",
                "json.load",
                "len",
                "data.get",
                "len",
                "data.get",
                "len",
                "data.get",
                "data.get",
                "<ast.Subscript object at 0x0000010C6A00B5B0>.get",
                "data.get",
                "logger.error",
                "str"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "check_ai_instructions",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "AI 지시서 확인",
          "calls": [
            "AIInstructionExecutor",
            "executor.get_execution_summary",
            "print",
            "print",
            "summary.get",
            "print",
            "summary.get",
            "print",
            "summary.get",
            "summary.get",
            "print",
            "summary.get",
            "print"
          ]
        },
        {
          "name": "execute_ai_instruction",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "다음 AI 지시 실행",
          "calls": [
            "AIInstructionExecutor",
            "executor.execute_next_instruction"
          ]
        },
        {
          "name": "execute_all_ai_instructions",
          "args": [
            "max_count"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 대기 중인 AI 지시 실행",
          "calls": [
            "AIInstructionExecutor",
            "executor.execute_all_pending",
            "print",
            "len"
          ]
        }
      ],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.code_integration": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\code_integration.py",
      "classes": [
        {
          "name": "WorkflowCodeIntegration",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "os.path.join",
                "WorkflowManager.get_instance",
                "CommandParser"
              ]
            },
            {
              "name": "get_current_task_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 태스크 컨텍스트 가져오기",
              "calls": [
                "self.manager.get_state",
                "state.current_plan.get_current_task"
              ]
            },
            {
              "name": "record_code_execution",
              "args": [
                "self",
                "code",
                "result",
                "execution_time"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "코드 실행 기록",
              "calls": [
                "self.manager.get_state",
                "state.current_plan.get_current_task",
                "current_task.add_note",
                "len",
                "result.get",
                "self.manager._save_data"
              ]
            },
            {
              "name": "auto_progress_task",
              "args": [
                "self",
                "completion_note"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 자동 진행",
              "calls": [
                "self.manager.execute_command",
                "str"
              ]
            },
            {
              "name": "get_workflow_status",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 상태 조회",
              "calls": [
                "self.manager.execute_command",
                "str"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "manager",
          "name": "WorkflowManager",
          "alias": null
        },
        {
          "module": "parser",
          "name": "CommandParser",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.context_integration": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\context_integration.py",
      "classes": [
        {
          "name": "ContextIntegration",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "self._initialize"
              ]
            },
            {
              "name": "_initialize",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트 매니저 초기화",
              "calls": [
                "ContextManager",
                "hasattr",
                "logger.info",
                "logger.warning",
                "logger.error"
              ]
            },
            {
              "name": "is_available",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트 연동 가능 여부",
              "calls": []
            },
            {
              "name": "sync_plan_summary",
              "args": [
                "self",
                "plan"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 플랜의 요약 정보만 동기화\n\nArgs:\n    plan: 현재 워크플로우 플랜\n    \nReturns:\n    성공 여부",
              "calls": [
                "self.is_available",
                "len",
                "len",
                "plan.updated_at.isoformat",
                "self.context_manager.update_workflow_summary",
                "logger.debug",
                "logger.error"
              ]
            },
            {
              "name": "record_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "중요 이벤트만 컨텍스트에 기록\n\nArgs:\n    event: 워크플로우 이벤트\n    \nReturns:\n    성공 여부",
              "calls": [
                "self.is_available",
                "event.timestamp.isoformat",
                "self._extract_event_details",
                "self.context_manager.add_workflow_event",
                "logger.debug",
                "logger.error"
              ]
            },
            {
              "name": "_extract_event_details",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트에서 핵심 정보만 추출\n\nArgs:\n    event: 워크플로우 이벤트\n    \nReturns:\n    핵심 정보 딕셔너리",
              "calls": [
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "event.details.get"
              ]
            },
            {
              "name": "get_current_task_context",
              "args": [
                "self",
                "task"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 태스크의 컨텍스트 정보 조회\n\nArgs:\n    task: 현재 태스크\n    \nReturns:\n    태스크 컨텍스트 정보",
              "calls": [
                "self.is_available",
                "self.context_manager.get_task_context",
                "context.update",
                "logger.error"
              ]
            },
            {
              "name": "clear_workflow_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 관련 컨텍스트 정보 초기화\n\nReturns:\n    성공 여부",
              "calls": [
                "self.is_available",
                "self.context_manager.clear_workflow_data",
                "logger.info",
                "logger.error"
              ]
            },
            {
              "name": "get_recent_activity",
              "args": [
                "self",
                "limit"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "최근 워크플로우 활동 조회\n\nArgs:\n    limit: 조회할 활동 수\n    \nReturns:\n    최근 활동 목록",
              "calls": [
                "self.is_available",
                "self.context_manager.get_recent_workflow_events",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "MockContextManager",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "update_workflow_summary",
              "args": [
                "self",
                "summary"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "add_workflow_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "self.workflow_events.append",
                "len"
              ]
            },
            {
              "name": "get_task_context",
              "args": [
                "self",
                "task_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "clear_workflow_data",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "self.workflow_events.clear"
              ]
            },
            {
              "name": "get_recent_workflow_events",
              "args": [
                "self",
                "limit"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "module": "models",
          "name": "Task",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "python.ai_helpers.helper_result",
          "name": "HelperResult",
          "alias": null
        },
        {
          "module": "python.core.context_manager",
          "name": "ContextManager",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.dispatcher": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\dispatcher.py",
      "classes": [
        {
          "name": "WorkflowDispatcher",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_name",
                "storage_path"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "WorkflowManager.get_instance",
                "CommandParser"
              ]
            },
            {
              "name": "execute",
              "args": [
                "self",
                "command"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "명령어 실행",
              "calls": [
                "self.manager.execute_command",
                "str",
                "str"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_current_project_name",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 프로젝트 이름 가져오기",
          "calls": [
            "os.environ.get",
            "os.getcwd",
            "os.path.basename"
          ]
        },
        {
          "name": "get_dispatcher",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "전역 디스패처 인스턴스 가져오기 - 프로젝트별로 관리 (개선됨)",
          "calls": [
            "get_current_project_name",
            "WorkflowManager.clear_instance",
            "WorkflowDispatcher",
            "WorkflowManager._instances.get"
          ]
        },
        {
          "name": "execute_workflow_command",
          "args": [
            "command"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 명령어 실행 (공개 API)",
          "calls": [
            "get_dispatcher",
            "dispatcher.execute"
          ]
        },
        {
          "name": "update_dispatcher_project",
          "args": [
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "디스패처의 프로젝트 업데이트",
          "calls": [
            "WorkflowDispatcher"
          ]
        }
      ],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "manager",
          "name": "WorkflowManager",
          "alias": null
        },
        {
          "module": "parser",
          "name": "CommandParser",
          "alias": null
        },
        {
          "module": "storage",
          "name": "WorkflowStorage",
          "alias": null
        },
        {
          "module": "errors",
          "name": "WorkflowError",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.enhanced_listener_integration": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\enhanced_listener_integration.py",
      "classes": [
        {
          "name": "EnhancedListenerIntegration",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "workflow_manager",
                "helpers"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "initialize",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 시스템 초기화",
              "calls": [
                "hasattr",
                "WorkflowEventAdapter",
                "self._register_all_listeners",
                "logger.info",
                "logger.error"
              ]
            },
            {
              "name": "_register_all_listeners",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 리스너 자동 등록",
              "calls": [
                "TaskContextListener",
                "self._register_listener",
                "logger.info",
                "ErrorCollectorListener",
                "self._register_listener",
                "logger.info",
                "DocsGeneratorListener",
                "self._register_listener",
                "logger.info",
                "TaskAutoProgressListener",
                "self._register_listener",
                "logger.info",
                "PlanAutoArchiveListener",
                "self._register_listener",
                "logger.info",
                "ErrorHandlerListener",
                "self._register_listener",
                "logger.info",
                "logger.warning",
                "GitAutoCommitListener",
                "self._register_listener",
                "logger.info",
                "logger.warning"
              ]
            },
            {
              "name": "_register_listener",
              "args": [
                "self",
                "name",
                "listener"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "개별 리스너 등록",
              "calls": [
                "self.event_adapter.add_workflow_listener",
                "logger.error"
              ]
            },
            {
              "name": "get_status",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 시스템 상태 조회",
              "calls": [
                "list",
                "self.listeners.keys",
                "self.listeners.items",
                "hasattr"
              ]
            },
            {
              "name": "enable_listener",
              "args": [
                "self",
                "name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 리스너 활성화",
              "calls": [
                "hasattr",
                "logger.info"
              ]
            },
            {
              "name": "disable_listener",
              "args": [
                "self",
                "name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 리스너 비활성화",
              "calls": [
                "hasattr",
                "logger.info"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "MockWorkflowManager",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            }
          ],
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "integrate_enhanced_listeners",
          "args": [
            "workflow_manager",
            "helpers"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우에 향상된 리스너 시스템 통합\n\nArgs:\n    workflow_manager: WorkflowManager 인스턴스\n    helpers: helpers 객체 (선택사항)\n    \nReturns:\n    EnhancedListenerIntegration 인스턴스 또는 None",
          "calls": [
            "EnhancedListenerIntegration",
            "integration.initialize"
          ]
        },
        {
          "name": "test_enhanced_integration",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "향상된 통합 시스템 테스트",
          "calls": [
            "print"
          ]
        }
      ],
      "imports": [
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_bus",
          "name": "EventBus",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listener_manager",
          "name": "ListenerManager",
          "alias": null
        },
        {
          "module": "python.workflow.v3.workflow_event_adapter",
          "name": "WorkflowEventAdapter",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.task_context_listener",
          "name": "TaskContextListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.error_collector_listener",
          "name": "ErrorCollectorListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.docs_generator_listener",
          "name": "DocsGeneratorListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.automation_listeners",
          "name": "TaskAutoProgressListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.automation_listeners",
          "name": "PlanAutoArchiveListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners",
          "name": "ErrorHandlerListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listener_manager",
          "name": "ErrorHandlerListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "GitAutoCommitListener",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.errors": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\errors.py",
      "classes": [
        {
          "name": "ErrorCode",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "decorators": []
        },
        {
          "name": "WorkflowError",
          "bases": [
            "Exception"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "message",
                "code",
                "details"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A059F90>.__init__",
                "super"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "ValidationError",
          "bases": [
            "WorkflowError"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "message",
                "details"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A059AB0>.__init__",
                "super"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "StorageError",
          "bases": [
            "WorkflowError"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "message",
                "details"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A0596C0>.__init__",
                "super"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "ExecutionError",
          "bases": [
            "WorkflowError"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "message",
                "details"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A0592D0>.__init__",
                "super"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "InputValidator",
          "bases": [],
          "methods": [
            {
              "name": "validate_non_empty_string",
              "args": [
                "value",
                "field_name"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "비어있지 않은 문자열 검증",
              "calls": [
                "value.strip",
                "WorkflowError"
              ]
            },
            {
              "name": "validate_task_id",
              "args": [
                "task_id"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "태스크 ID 검증",
              "calls": [
                "InputValidator.validate_non_empty_string"
              ]
            },
            {
              "name": "validate_title",
              "args": [
                "title",
                "field_name"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "제목 검증 및 정리",
              "calls": [
                "title.strip",
                "ValidationError",
                "title.strip",
                "len",
                "ValidationError"
              ]
            },
            {
              "name": "validate_description",
              "args": [
                "description"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "설명 검증 및 정리",
              "calls": [
                "description.strip"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "ErrorMessages",
          "bases": [],
          "methods": [
            {
              "name": "get_message",
              "args": [
                "cls",
                "error_type"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "에러 메시지 포맷팅",
              "calls": [
                "getattr",
                "message.format"
              ]
            },
            {
              "name": "format_error",
              "args": [
                "cls",
                "error_type",
                "details"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "에러 정보를 포맷팅하여 반환",
              "calls": [
                "cls.get_message"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "SuccessMessages",
          "bases": [],
          "methods": [
            {
              "name": "get",
              "args": [
                "cls",
                "key"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "성공 메시지 가져오기 및 포맷팅",
              "calls": [
                "getattr",
                "message.format"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "ErrorHandler",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "handle_error",
              "args": [
                "self",
                "error",
                "context"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러를 처리하고 표준화된 응답 반환",
              "calls": [
                "self._get_timestamp",
                "type",
                "str",
                "self.add_to_log",
                "isinstance",
                "error_info.update",
                "self._create_error_response"
              ]
            },
            {
              "name": "add_to_log",
              "args": [
                "self",
                "error_info"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 로그에 추가",
              "calls": [
                "self.error_log.append",
                "len",
                "self.error_log.pop"
              ]
            },
            {
              "name": "get_recent_errors",
              "args": [
                "self",
                "count"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "최근 에러들 반환",
              "calls": []
            },
            {
              "name": "clear_log",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 로그 초기화",
              "calls": [
                "self.error_log.clear"
              ]
            },
            {
              "name": "_get_timestamp",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 타임스탬프 반환",
              "calls": [
                "<ast.Call object at 0x0000010C6A067760>.isoformat",
                "datetime.now"
              ]
            },
            {
              "name": "_create_error_response",
              "args": [
                "self",
                "error_info"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 응답 생성",
              "calls": [
                "error_info.get",
                "error_info.get"
              ]
            },
            {
              "name": "create_validation_error",
              "args": [
                "cls",
                "message",
                "field"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "검증 에러 생성",
              "calls": [
                "ValidationError"
              ]
            },
            {
              "name": "create_storage_error",
              "args": [
                "cls",
                "message",
                "operation"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "저장소 에러 생성",
              "calls": [
                "StorageError"
              ]
            },
            {
              "name": "create_execution_error",
              "args": [
                "cls",
                "message",
                "command"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "실행 에러 생성",
              "calls": [
                "ExecutionError"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_error_handler",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "전역 에러 핸들러 반환",
          "calls": []
        },
        {
          "name": "handle_error",
          "args": [
            "error",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 처리 편의 함수",
          "calls": [
            "_error_handler.handle_error"
          ]
        },
        {
          "name": "log_error",
          "args": [
            "message",
            "error_type",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 로깅 편의 함수",
          "calls": [
            "_error_handler._get_timestamp",
            "_error_handler.add_to_log"
          ]
        }
      ],
      "imports": [
        {
          "module": "enum",
          "name": "Enum",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.events": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\events.py",
      "classes": [
        {
          "name": "EventProcessor",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "self._register_default_handlers"
              ]
            },
            {
              "name": "_register_default_handlers",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "기본 이벤트 핸들러 등록",
              "calls": []
            },
            {
              "name": "_default_handler",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "기본 이벤트 핸들러 - 로깅",
              "calls": [
                "logger.info"
              ]
            },
            {
              "name": "process",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리",
              "calls": [
                "self.handlers.get",
                "handler",
                "logger.error",
                "str"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "EventBuilder",
          "bases": [],
          "methods": [
            {
              "name": "plan_created",
              "args": [
                "plan",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "플랜 생성 이벤트",
              "calls": [
                "WorkflowEvent"
              ]
            },
            {
              "name": "plan_started",
              "args": [
                "plan",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "플랜 시작 이벤트",
              "calls": [
                "WorkflowEvent",
                "len"
              ]
            },
            {
              "name": "plan_completed",
              "args": [
                "plan",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "플랜 완료 이벤트",
              "calls": [
                "WorkflowEvent",
                "len",
                "len"
              ]
            },
            {
              "name": "plan_archived",
              "args": [
                "plan",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "플랜 아카이브 이벤트",
              "calls": [
                "WorkflowEvent",
                "plan.archived_at.isoformat",
                "<ast.Call object at 0x0000010C6A08B220>.isoformat",
                "datetime.now"
              ]
            },
            {
              "name": "task_added",
              "args": [
                "plan_id",
                "task",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "태스크 추가 이벤트",
              "calls": [
                "WorkflowEvent"
              ]
            },
            {
              "name": "task_started",
              "args": [
                "plan_id",
                "task",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "태스크 시작 이벤트",
              "calls": [
                "WorkflowEvent"
              ]
            },
            {
              "name": "task_completed",
              "args": [
                "plan_id",
                "task",
                "note",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "태스크 완료 이벤트",
              "calls": [
                "WorkflowEvent"
              ]
            },
            {
              "name": "task_cancelled",
              "args": [
                "plan_id",
                "task",
                "reason",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "태스크 취소 이벤트",
              "calls": [
                "WorkflowEvent"
              ]
            },
            {
              "name": "task_failed",
              "args": [
                "plan_id",
                "task",
                "error",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "태스크 실패 이벤트",
              "calls": [
                "WorkflowEvent"
              ]
            },
            {
              "name": "task_blocked",
              "args": [
                "plan_id",
                "task",
                "blocker",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "태스크 차단 이벤트",
              "calls": [
                "WorkflowEvent"
              ]
            },
            {
              "name": "task_unblocked",
              "args": [
                "plan_id",
                "task",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "태스크 차단 해제 이벤트",
              "calls": [
                "WorkflowEvent"
              ]
            },
            {
              "name": "task_updated",
              "args": [
                "plan_id",
                "task",
                "changes",
                "user"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "태스크 업데이트 이벤트",
              "calls": [
                "WorkflowEvent"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "EventStore",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "EventProcessor"
              ]
            },
            {
              "name": "add",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 추가",
              "calls": [
                "self.events.append",
                "self.processor.process"
              ]
            },
            {
              "name": "get_events_for_plan",
              "args": [
                "self",
                "plan_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 플랜의 이벤트 조회",
              "calls": []
            },
            {
              "name": "get_events_for_task",
              "args": [
                "self",
                "task_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 태스크의 이벤트 조회",
              "calls": []
            },
            {
              "name": "get_events_by_type",
              "args": [
                "self",
                "event_type"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 타입의 이벤트 조회",
              "calls": []
            },
            {
              "name": "get_recent_events",
              "args": [
                "self",
                "limit"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "최근 이벤트 조회",
              "calls": [
                "sorted"
              ]
            },
            {
              "name": "clear",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 이벤트 삭제",
              "calls": [
                "self.events.clear"
              ]
            },
            {
              "name": "to_list",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 목록을 딕셔너리 리스트로 변환",
              "calls": [
                "e.to_dict"
              ]
            },
            {
              "name": "from_list",
              "args": [
                "self",
                "events_data"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "딕셔너리 리스트에서 이벤트 복원",
              "calls": [
                "WorkflowEvent.from_dict"
              ]
            },
            {
              "name": "get_plan_summary",
              "args": [
                "self",
                "plan_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜의 이벤트 요약",
              "calls": [
                "self.get_events_for_plan",
                "len"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "GitAutoCommitListener",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "helpers"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "Args:\n    helpers: helpers 객체 (Git 명령 실행용)",
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리 - Git 자동 커밋",
              "calls": [
                "self.helpers.git_status",
                "status.data.get",
                "self._generate_commit_message",
                "self.helpers.git_add",
                "self.helpers.git_commit",
                "logger.info",
                "logger.warning",
                "logger.warning",
                "logger.error"
              ]
            },
            {
              "name": "_generate_commit_message",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트에 따른 커밋 메시지 생성",
              "calls": [
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "messages.get",
                "event.details.get"
              ]
            },
            {
              "name": "set_enabled",
              "args": [
                "self",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "자동 커밋 활성화/비활성화",
              "calls": [
                "logger.info"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "EventBus",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "register",
              "args": [
                "self",
                "listener"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 등록",
              "calls": [
                "hasattr",
                "self.listeners.append",
                "logger.info",
                "logger.warning"
              ]
            },
            {
              "name": "unregister",
              "args": [
                "self",
                "listener"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 제거",
              "calls": [
                "self.listeners.remove",
                "logger.info"
              ]
            },
            {
              "name": "emit",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 리스너에 이벤트 전달",
              "calls": [
                "listener.handle_event",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Callable",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "timezone",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "timedelta",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "module": "models",
          "name": "Task",
          "alias": null
        },
        {
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "module": "event_types",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "python.ai_helpers.helper_result",
          "name": "HelperResult",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.event_bus": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\event_bus.py",
      "classes": [
        {
          "name": "Event",
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 생성 후 처리",
              "calls": [
                "ValueError",
                "self.metadata.update",
                "self.timestamp.isoformat"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "EventBus",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "EventBus 초기화",
              "calls": [
                "hasattr",
                "defaultdict",
                "Queue",
                "ThreadPoolExecutor",
                "logger.info"
              ]
            },
            {
              "name": "start",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리 시작",
              "calls": [
                "logger.warning",
                "threading.Thread",
                "self._processor_thread.start",
                "logger.info"
              ]
            },
            {
              "name": "stop",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리 중지",
              "calls": [
                "self._event_queue.put",
                "self._processor_thread.join",
                "self._executor.shutdown",
                "logger.info"
              ]
            },
            {
              "name": "subscribe",
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 핸들러 등록\n\nArgs:\n    event_type: 구독할 이벤트 타입\n    handler: 이벤트 처리 함수 (Event 객체를 받음)",
              "calls": [
                "callable",
                "ValueError",
                "type",
                "<ast.Subscript object at 0x0000010C6A067880>.append",
                "logger.debug"
              ]
            },
            {
              "name": "unsubscribe",
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 핸들러 제거\n\nArgs:\n    event_type: 구독 해제할 이벤트 타입\n    handler: 제거할 핸들러 함수",
              "calls": [
                "<ast.Subscript object at 0x0000010C6A066E90>.remove",
                "logger.debug"
              ]
            },
            {
              "name": "publish",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 발행 (비동기)\n\nArgs:\n    event: 발행할 이벤트 객체",
              "calls": [
                "hasattr",
                "hasattr",
                "ValueError",
                "type",
                "self._event_queue.put",
                "logger.debug"
              ]
            },
            {
              "name": "publish_sync",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 동기 발행 (테스트용)\n\nArgs:\n    event: 발행할 이벤트 객체\n\nReturns:\n    핸들러 실행 Future 리스트",
              "calls": [
                "self._handlers.get",
                "self._executor.submit",
                "futures.append"
              ]
            },
            {
              "name": "_process_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "백그라운드 이벤트 처리 루프",
              "calls": [
                "logger.info",
                "self._event_queue.get",
                "self._process_single_event",
                "logger.error",
                "logger.debug",
                "traceback.format_exc",
                "logger.info"
              ]
            },
            {
              "name": "_process_single_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "단일 이벤트 처리",
              "calls": [
                "self._handlers.get",
                "logger.debug",
                "logger.debug",
                "len",
                "self._executor.submit"
              ]
            },
            {
              "name": "_execute_handler",
              "args": [
                "self",
                "handler",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "핸들러 실행 (재시도 로직 포함)\n\nArgs:\n    handler: 실행할 핸들러 함수\n    event: 처리할 이벤트",
              "calls": [
                "handler",
                "logger.debug",
                "logger.error",
                "logger.debug",
                "traceback.format_exc",
                "self._handle_failed_event",
                "logger.warning",
                "time.sleep"
              ]
            },
            {
              "name": "_handle_failed_event",
              "args": [
                "self",
                "event",
                "handler",
                "error"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "실패한 이벤트 처리\n\n향후 Dead Letter Queue 구현 시 여기에 추가",
              "calls": [
                "str",
                "traceback.format_exc",
                "<ast.Call object at 0x0000010C6A04C910>.isoformat",
                "datetime.now",
                "logger.error"
              ]
            },
            {
              "name": "get_stats",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리 통계 반환",
              "calls": [
                "self._stats.copy"
              ]
            },
            {
              "name": "get_handlers_count",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 타입별 핸들러 수 반환",
              "calls": [
                "len",
                "self._handlers.items"
              ]
            },
            {
              "name": "clear_handlers",
              "args": [
                "self",
                "event_type"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "핸들러 초기화\n\nArgs:\n    event_type: 특정 이벤트 타입만 초기화 (None이면 전체)",
              "calls": [
                "<ast.Subscript object at 0x0000010C6A04E0E0>.clear",
                "self._handlers.clear"
              ]
            },
            {
              "name": "__repr__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "len"
              ]
            },
            {
              "name": "reset",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "EventBus 리셋 (테스트용)",
              "calls": [
                "self.stop",
                "self._handlers.clear",
                "logger.info"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "threading",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Callable",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "collections",
          "name": "defaultdict",
          "alias": null
        },
        {
          "module": "queue",
          "name": "Queue",
          "alias": null
        },
        {
          "module": "queue",
          "name": "Empty",
          "alias": null
        },
        {
          "module": "concurrent.futures",
          "name": "ThreadPoolExecutor",
          "alias": null
        },
        {
          "module": "concurrent.futures",
          "name": "Future",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        },
        {
          "module": "time",
          "alias": null
        },
        {
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null
        },
        {
          "module": "dataclasses",
          "name": "field",
          "alias": null
        },
        {
          "module": "uuid",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.event_types": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\event_types.py",
      "classes": [
        {
          "name": "EventType",
          "bases": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": []
        },
        {
          "name": "Event",
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 생성 후 처리",
              "calls": [
                "ValueError",
                "self.metadata.update",
                "self.timestamp.isoformat"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowEvent",
          "bases": [
            "Event"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A088310>.__post_init__",
                "super"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "PlanEvent",
          "bases": [
            "WorkflowEvent"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A08BE20>.__post_init__",
                "super"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "TaskEvent",
          "bases": [
            "WorkflowEvent"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A0A9F90>.__post_init__",
                "super"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ContextEvent",
          "bases": [
            "Event"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A0A8700>.__post_init__",
                "super"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CommandEvent",
          "bases": [
            "Event"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A058850>.__post_init__",
                "super"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "ProjectEvent",
          "bases": [
            "Event"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A05BFA0>.__post_init__",
                "super"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "FileEvent",
          "bases": [
            "Event"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A05B9D0>.__post_init__",
                "super"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "GitEvent",
          "bases": [
            "Event"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A059B70>.__post_init__",
                "super"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "SystemEvent",
          "bases": [
            "Event"
          ],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A0587C0>.__post_init__",
                "super"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        }
      ],
      "functions": [
        {
          "name": "create_plan_event",
          "args": [
            "event_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 이벤트 생성 헬퍼",
          "calls": [
            "PlanEvent"
          ]
        },
        {
          "name": "create_task_event",
          "args": [
            "event_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 이벤트 생성 헬퍼",
          "calls": [
            "TaskEvent"
          ]
        },
        {
          "name": "create_context_event",
          "args": [
            "event_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트 이벤트 생성 헬퍼",
          "calls": [
            "ContextEvent"
          ]
        },
        {
          "name": "create_command_event",
          "args": [
            "command"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "명령어 이벤트 생성 헬퍼",
          "calls": [
            "CommandEvent"
          ]
        },
        {
          "name": "create_project_event",
          "args": [
            "event_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 이벤트 생성 헬퍼",
          "calls": [
            "ProjectEvent"
          ]
        },
        {
          "name": "create_file_event",
          "args": [
            "event_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일 이벤트 생성 헬퍼",
          "calls": [
            "FileEvent"
          ]
        },
        {
          "name": "create_git_event",
          "args": [
            "event_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Git 이벤트 생성 헬퍼",
          "calls": [
            "GitEvent"
          ]
        },
        {
          "name": "create_system_event",
          "args": [
            "level",
            "message"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "시스템 이벤트 생성 헬퍼",
          "calls": [
            "event_type_map.get",
            "SystemEvent"
          ]
        }
      ],
      "imports": [
        {
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null
        },
        {
          "module": "dataclasses",
          "name": "field",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "uuid",
          "alias": null
        },
        {
          "module": "python.events.unified_event_types",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "enum",
          "name": "Enum",
          "alias": null
        },
        {
          "module": "event_bus",
          "name": "Event",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listener_manager": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listener_manager.py",
      "classes": [
        {
          "name": "ListenerManager",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "event_bus"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "Args:\n    event_bus: EventBus 인스턴스",
              "calls": [
                "defaultdict",
                "defaultdict"
              ]
            },
            {
              "name": "register_listener",
              "args": [
                "self",
                "name",
                "listener"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 등록\n\nArgs:\n    name: 리스너 이름\n    listener: BaseEventListener 인스턴스",
              "calls": [
                "logger.warning",
                "self.unregister_listener",
                "listener.get_subscribed_events",
                "self._create_handler_wrapper",
                "self.event_bus.subscribe",
                "<ast.Subscript object at 0x0000010C6A08B670>.append",
                "logger.info",
                "len",
                "listener.get_subscribed_events"
              ]
            },
            {
              "name": "unregister_listener",
              "args": [
                "self",
                "name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 등록 해제\n\nArgs:\n    name: 리스너 이름",
              "calls": [
                "logger.warning",
                "self.event_bus.unsubscribe",
                "logger.info"
              ]
            },
            {
              "name": "_create_handler_wrapper",
              "args": [
                "self",
                "name",
                "listener"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "메트릭 수집을 포함한 핸들러 래퍼 생성\n\nArgs:\n    name: 리스너 이름\n    listener: 리스너 인스턴스\n\nReturns:\n    래핑된 핸들러 함수",
              "calls": []
            },
            {
              "name": "wrapper",
              "args": [
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "time.time",
                "time.time",
                "self._convert_to_workflow_event",
                "listener.process",
                "time.time",
                "logger.debug",
                "time.time",
                "logger.error"
              ]
            },
            {
              "name": "_convert_to_workflow_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "Event를 WorkflowEvent로 변환\n\nArgs:\n    event: EventBus의 Event 객체\n\nReturns:\n    WorkflowEvent 객체",
              "calls": [
                "isinstance",
                "EventType",
                "WorkflowEvent",
                "getattr",
                "getattr",
                "hasattr",
                "event.payload.get",
                "hasattr",
                "event.payload.get",
                "hasattr",
                "event.payload.get",
                "hasattr",
                "event.payload.items"
              ]
            },
            {
              "name": "get_metrics",
              "args": [
                "self",
                "name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 메트릭 조회\n\nArgs:\n    name: 특정 리스너 이름 (None이면 전체)\n\nReturns:\n    메트릭 정보",
              "calls": [
                "<ast.Subscript object at 0x0000010C6A04F640>.copy",
                "<ast.Subscript object at 0x0000010C6A04CFD0>.get_metrics",
                "metrics.update",
                "self.get_metrics",
                "sum",
                "all_metrics.values",
                "sum",
                "all_metrics.values",
                "sum",
                "all_metrics.values",
                "len"
              ]
            },
            {
              "name": "enable_listener",
              "args": [
                "self",
                "name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 활성화",
              "calls": [
                "logger.info"
              ]
            },
            {
              "name": "disable_listener",
              "args": [
                "self",
                "name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 비활성화",
              "calls": [
                "logger.info"
              ]
            },
            {
              "name": "get_listener_status",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 리스너의 활성화 상태 반환",
              "calls": [
                "self.listeners.items"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Callable",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "time",
          "alias": null
        },
        {
          "module": "collections",
          "name": "defaultdict",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_bus",
          "name": "EventBus",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_bus",
          "name": "Event",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.base",
          "name": "BaseEventListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "python.events.unified_event_types",
          "name": "EventType",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.manager": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\manager.py",
      "classes": [
        {
          "name": "WorkflowManager",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_name",
                "enable_listeners"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트별 워크플로우 관리자 초기화",
              "calls": [
                "WorkflowState",
                "EventStore",
                "CommandParser",
                "WorkflowStorage",
                "ContextIntegration",
                "WorkflowEventAdapter",
                "EventBus",
                "ListenerManager",
                "EnhancedListenerIntegration",
                "self.listener_integration.initialize",
                "logger.info",
                "logger.error",
                "logger.info",
                "self.listener_integration.get_status",
                "logger.info",
                "<ast.Constant object at 0x0000010C6A1482E0>.join",
                "TaskContextManager",
                "TaskContextEventHandlers",
                "task_handlers.register_all",
                "logger.info",
                "logger.warning",
                "logger.debug",
                "traceback.format_exc",
                "InternalWorkflowAPI",
                "UserCommandAPI",
                "self._load_data",
                "self.context.sync_plan_summary"
              ]
            },
            {
              "name": "get_instance",
              "args": [
                "cls",
                "project_name"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "프로젝트별 싱글톤 인스턴스 반환",
              "calls": [
                "logger.info",
                "cls",
                "instance.storage.main_file.exists",
                "instance.storage.main_file.stat",
                "hasattr",
                "logger.info",
                "instance.reload"
              ]
            },
            {
              "name": "clear_instance",
              "args": [
                "cls",
                "project_name"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "인스턴스 캐시 무효화\n\nArgs:\n    project_name: 특정 프로젝트만 제거. None이면 모든 캐시 제거",
              "calls": [
                "logger.info",
                "cls._instances.clear",
                "logger.info"
              ]
            },
            {
              "name": "invalidate_and_reload",
              "args": [
                "cls",
                "project_name"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "인스턴스 캐시 무효화 후 새로 로드\n\nArgs:\n    project_name: 프로젝트 이름\n\nReturns:\n    새로 로드된 WorkflowManager 인스턴스",
              "calls": [
                "cls.clear_instance",
                "cls.get_instance"
              ]
            },
            {
              "name": "_load_data",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "저장된 데이터 로드",
              "calls": [
                "self.storage.load",
                "WorkflowState.from_dict",
                "logger.info",
                "hasattr",
                "len",
                "hasattr",
                "hasattr",
                "self.event_store.from_list",
                "self.event_store.from_list",
                "logger.info",
                "len",
                "logger.warning",
                "EventStore",
                "logger.error",
                "logger.error",
                "traceback.format_exc",
                "WorkflowState",
                "EventStore",
                "WorkflowState",
                "EventStore"
              ]
            },
            {
              "name": "_save_data",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "데이터를 파일에 저장",
              "calls": [
                "datetime.now",
                "self.storage.save",
                "self.state.to_dict",
                "logger.info",
                "logger.warning",
                "logger.error"
              ]
            },
            {
              "name": "start_plan",
              "args": [
                "self",
                "name",
                "description"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "새 플랜 시작",
              "calls": [
                "self.archive_plan",
                "WorkflowPlan",
                "plan.start",
                "self._add_event",
                "EventBuilder.plan_created",
                "self._add_event",
                "EventBuilder.plan_started",
                "self.context.sync_plan_summary",
                "self.context.record_event",
                "self.context.record_event",
                "self._save_data",
                "logger.error"
              ]
            },
            {
              "name": "add_task",
              "args": [
                "self",
                "title",
                "description"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 플랜에 태스크 추가",
              "calls": [
                "logger.error",
                "Task",
                "self.state.current_plan.tasks.append",
                "datetime.now",
                "EventBuilder.task_added",
                "self._add_event",
                "self.context.sync_plan_summary",
                "self._save_data",
                "logger.error"
              ]
            },
            {
              "name": "add_task_note",
              "args": [
                "self",
                "note",
                "task_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 태스크 또는 지정된 태스크에 노트 추가",
              "calls": [
                "logger.warning",
                "logger.warning",
                "self.get_current_task",
                "logger.warning",
                "task.notes.append",
                "datetime.now",
                "WorkflowEvent",
                "self.state.add_event",
                "self._add_event",
                "self._save_data",
                "logger.info"
              ]
            },
            {
              "name": "complete_task",
              "args": [
                "self",
                "task_id",
                "note"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료 처리",
              "calls": [
                "logger.error",
                "task.complete",
                "datetime.now",
                "EventBuilder.task_completed",
                "self._add_event",
                "self.context.record_event",
                "self.is_plan_completed",
                "self.state.current_plan.complete",
                "EventBuilder.plan_completed",
                "self._add_event",
                "self.context.record_event",
                "self.context.sync_plan_summary",
                "self._save_data"
              ]
            },
            {
              "name": "complete_current_task",
              "args": [
                "self",
                "note"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 태스크 완료하고 다음 태스크 반환",
              "calls": [
                "self.get_current_task",
                "self.complete_task",
                "self.get_current_task"
              ]
            },
            {
              "name": "fail_task",
              "args": [
                "self",
                "task_id",
                "error"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 실패 처리",
              "calls": [
                "logger.error",
                "task.fail",
                "datetime.now",
                "EventBuilder.task_failed",
                "self._add_event",
                "self.context.sync_plan_summary",
                "self._save_data"
              ]
            },
            {
              "name": "block_task",
              "args": [
                "self",
                "task_id",
                "blocker"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 차단 처리",
              "calls": [
                "logger.error",
                "task.block",
                "datetime.now",
                "EventBuilder.task_blocked",
                "self._add_event",
                "self.context.sync_plan_summary",
                "self._save_data"
              ]
            },
            {
              "name": "unblock_task",
              "args": [
                "self",
                "task_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 차단 해제 처리",
              "calls": [
                "logger.error",
                "task.unblock",
                "datetime.now",
                "EventBuilder.task_unblocked",
                "self._add_event",
                "self.context.sync_plan_summary",
                "self._save_data"
              ]
            },
            {
              "name": "cancel_task",
              "args": [
                "self",
                "task_id",
                "reason"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 취소 처리",
              "calls": [
                "logger.error",
                "task.cancel",
                "datetime.now",
                "EventBuilder.task_cancelled",
                "self._add_event",
                "self.context.sync_plan_summary",
                "self._save_data"
              ]
            },
            {
              "name": "archive_plan",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 플랜 아카이브",
              "calls": [
                "self.state.current_plan.archive",
                "EventBuilder.plan_archived",
                "self._add_event",
                "self.context.record_event",
                "self.context.sync_plan_summary",
                "self._save_data"
              ]
            },
            {
              "name": "get_current_task",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 작업 중인 태스크 반환",
              "calls": [
                "self.state.current_plan.get_current_task"
              ]
            },
            {
              "name": "get_task_by_number",
              "args": [
                "self",
                "number"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "번호로 태스크 조회 (1부터 시작)",
              "calls": [
                "len"
              ]
            },
            {
              "name": "is_plan_completed",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜의 모든 태스크가 완료되었는지 확인",
              "calls": []
            },
            {
              "name": "get_status",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 상태 정보",
              "calls": [
                "len",
                "len",
                "self.get_current_task",
                "hasattr",
                "str",
                "int",
                "hasattr",
                "str",
                "plan.created_at.isoformat",
                "plan.updated_at.isoformat"
              ]
            },
            {
              "name": "get_tasks",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 플랜의 태스크 목록",
              "calls": [
                "enumerate",
                "tasks.append",
                "task.created_at.isoformat",
                "task.completed_at.isoformat"
              ]
            },
            {
              "name": "get_plan_history",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 히스토리 (이벤트 로그 기반)",
              "calls": [
                "self.state.get_plan_history"
              ]
            },
            {
              "name": "get_recent_events",
              "args": [
                "self",
                "limit"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "최근 이벤트 목록",
              "calls": [
                "self.event_store.get_recent_events",
                "e.to_dict"
              ]
            },
            {
              "name": "execute_command",
              "args": [
                "self",
                "command_str"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "명령어 문자열 실행 (개선된 버전)",
              "calls": [
                "hasattr",
                "self.user_api.execute_command",
                "self.parser.parse",
                "self.command_handlers.get",
                "handler",
                "WorkflowError",
                "ErrorMessages.get",
                "HelperResult",
                "e.to_dict",
                "HelperResult",
                "str",
                "logger.exception",
                "ErrorHandler.handle_error",
                "HelperResult"
              ]
            },
            {
              "name": "_handle_start",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "start 명령 처리",
              "calls": [
                "self.start_plan",
                "HelperResult",
                "SuccessMessages.get",
                "HelperResult",
                "HelperResult",
                "HelperResult"
              ]
            },
            {
              "name": "_handle_focus",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "focus 명령 처리",
              "calls": [
                "HelperResult",
                "self.get_current_task",
                "HelperResult",
                "HelperResult",
                "self.get_task_by_number",
                "enumerate",
                "self._save_data",
                "HelperResult",
                "HelperResult"
              ]
            },
            {
              "name": "_handle_plan",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "plan 명령 처리",
              "calls": [
                "self.get_plan_history",
                "HelperResult",
                "len",
                "parsed.args.get",
                "self.archive_plan",
                "self.start_plan",
                "HelperResult",
                "HelperResult",
                "self.get_status",
                "isinstance",
                "hasattr",
                "hasattr",
                "HelperResult",
                "HelperResult"
              ]
            },
            {
              "name": "_handle_task",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "task 명령 처리",
              "calls": [
                "WorkflowError",
                "ErrorMessages.get",
                "self._handle_focus",
                "self.get_tasks",
                "HelperResult",
                "len",
                "len",
                "t.get",
                "len",
                "parsed.args.get",
                "HelperResult",
                "self.add_task_note",
                "HelperResult",
                "HelperResult",
                "parsed.title.strip",
                "HelperResult",
                "self.add_task",
                "len",
                "HelperResult",
                "HelperResult",
                "self.add_task",
                "len",
                "HelperResult",
                "HelperResult",
                "HelperResult",
                "self.get_tasks",
                "HelperResult",
                "len"
              ]
            },
            {
              "name": "_handle_next",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "next 명령 처리",
              "calls": [
                "HelperResult",
                "self.get_current_task",
                "HelperResult",
                "HelperResult",
                "parsed.args.get",
                "self.complete_current_task",
                "len",
                "sum",
                "int",
                "HelperResult"
              ]
            },
            {
              "name": "_handle_build",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "build 명령 처리 - 개선된 버전",
              "calls": [
                "Path.cwd",
                "str",
                "Path.cwd",
                "os.walk",
                "len",
                "len",
                "HelperResult",
                "self.get_status",
                "self.get_recent_events",
                "HelperResult",
                "self.get_current_task",
                "HelperResult",
                "HelperResult",
                "self.get_status",
                "<ast.Call object at 0x0000010C6A1CAB30>.exists",
                "Path",
                "HelperResult"
              ]
            },
            {
              "name": "_handle_status",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "status 명령 처리",
              "calls": [
                "self.get_plan_history",
                "self.get_recent_events",
                "HelperResult",
                "len",
                "len",
                "self.get_status",
                "HelperResult",
                "status.get",
                "self.get_tasks",
                "self.get_recent_events",
                "HelperResult",
                "len",
                "len",
                "len",
                "len"
              ]
            },
            {
              "name": "clear_cache",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "캐시 클리어 (필요시 구현)",
              "calls": []
            },
            {
              "name": "save",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 상태를 파일에 저장 (public 메서드)",
              "calls": [
                "self._save_data"
              ]
            },
            {
              "name": "reload",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "데이터 다시 로드",
              "calls": [
                "self._load_data"
              ]
            },
            {
              "name": "export_data",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "전체 데이터 내보내기",
              "calls": [
                "self.state.to_dict"
              ]
            },
            {
              "name": "import_data",
              "args": [
                "self",
                "data"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "데이터 가져오기",
              "calls": [
                "WorkflowState.from_dict",
                "self.event_store.from_list",
                "self._save_data",
                "logger.error"
              ]
            },
            {
              "name": "cleanup",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리소스 정리 및 이벤트 어댑터 해제",
              "calls": [
                "hasattr",
                "self.event_adapter.cleanup",
                "logger.info",
                "hasattr",
                "self.listener_manager.get_metrics",
                "metrics.get",
                "logger.info"
              ]
            },
            {
              "name": "_add_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트를 EventStore에 추가하고 EventBus로 발행",
              "calls": [
                "self.event_store.add",
                "hasattr",
                "isinstance",
                "WorkflowEvent",
                "event.get",
                "event.get",
                "event.get",
                "event.get",
                "event.get",
                "event.get",
                "self.event_adapter.publish_workflow_event",
                "self.event_adapter.publish_workflow_event",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "timezone",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "module": "models",
          "name": "Task",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowState",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "module": "models",
          "name": "PlanStatus",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "events",
          "name": "EventStore",
          "alias": null
        },
        {
          "module": "events",
          "name": "EventBuilder",
          "alias": null
        },
        {
          "module": "parser",
          "name": "CommandParser",
          "alias": null
        },
        {
          "module": "storage",
          "name": "WorkflowStorage",
          "alias": null
        },
        {
          "module": "context_integration",
          "name": "ContextIntegration",
          "alias": null
        },
        {
          "module": "workflow_event_adapter",
          "name": "WorkflowEventAdapter",
          "alias": null
        },
        {
          "module": "errors",
          "name": "WorkflowError",
          "alias": null
        },
        {
          "module": "errors",
          "name": "ErrorCode",
          "alias": null
        },
        {
          "module": "errors",
          "name": "ErrorMessages",
          "alias": null
        },
        {
          "module": "errors",
          "name": "ErrorHandler",
          "alias": null
        },
        {
          "module": "errors",
          "name": "InputValidator",
          "alias": null
        },
        {
          "module": "errors",
          "name": "SuccessMessages",
          "alias": null
        },
        {
          "module": "api.internal_api",
          "name": "InternalWorkflowAPI",
          "alias": null
        },
        {
          "module": "api.user_api",
          "name": "UserCommandAPI",
          "alias": null
        },
        {
          "module": "commands.auto_executor",
          "name": "AutoTaskExecutor",
          "alias": null
        },
        {
          "module": "python.ai_helpers.helper_result",
          "name": "HelperResult",
          "alias": null
        },
        {
          "module": "event_bus",
          "name": "EventBus",
          "alias": null
        },
        {
          "module": "listener_manager",
          "name": "ListenerManager",
          "alias": null
        },
        {
          "module": "enhanced_listener_integration",
          "name": "EnhancedListenerIntegration",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "task_context_handlers",
          "name": "TaskContextEventHandlers",
          "alias": null
        },
        {
          "module": "task_context_manager",
          "name": "TaskContextManager",
          "alias": null
        },
        {
          "module": "event_bus",
          "name": "event_bus",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.models": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\models.py",
      "classes": [
        {
          "name": "TaskStatus",
          "bases": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": []
        },
        {
          "name": "PlanStatus",
          "bases": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": []
        },
        {
          "name": "WorkflowEvent",
          "bases": [],
          "methods": [
            {
              "name": "to_dict",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트를 딕셔너리로 변환",
              "calls": [
                "self.timestamp.isoformat"
              ]
            },
            {
              "name": "from_dict",
              "args": [
                "cls",
                "data"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "딕셔너리에서 이벤트 생성",
              "calls": [
                "data.get",
                "<ast.Call object at 0x0000010C6A10E5C0>.isoformat",
                "datetime.now",
                "datetime.fromisoformat",
                "timestamp.replace",
                "datetime.now",
                "cls",
                "data.get",
                "str",
                "uuid.uuid4",
                "EventType",
                "data.get",
                "data.get",
                "data.get",
                "data.get",
                "data.get",
                "data.get"
              ]
            },
            {
              "name": "create_plan_event",
              "args": [
                "cls",
                "event_type",
                "plan"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "플랜 관련 이벤트 생성 헬퍼",
              "calls": [
                "cls"
              ]
            },
            {
              "name": "create_task_event",
              "args": [
                "cls",
                "event_type",
                "task",
                "plan_id"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "태스크 관련 이벤트 생성 헬퍼",
              "calls": [
                "cls"
              ]
            },
            {
              "name": "create_note_event",
              "args": [
                "cls",
                "event_type",
                "task_id",
                "plan_id",
                "note"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "노트 관련 이벤트 생성 헬퍼",
              "calls": [
                "<ast.Call object at 0x0000010C6A0B1ED0>.isoformat",
                "datetime.now",
                "cls"
              ]
            },
            {
              "name": "create_system_event",
              "args": [
                "cls",
                "event_type",
                "message",
                "plan_id"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "시스템 관련 이벤트 생성 헬퍼",
              "calls": [
                "<ast.Call object at 0x0000010C6A0B2620>.isoformat",
                "datetime.now",
                "cls"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "Task",
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "생성 후 검증",
              "calls": [
                "InputValidator.validate_title",
                "InputValidator.validate_description",
                "self.title.strip",
                "ValueError",
                "self.title.strip",
                "len",
                "ValueError"
              ]
            },
            {
              "name": "start",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 시작",
              "calls": [
                "datetime.now",
                "datetime.now"
              ]
            },
            {
              "name": "complete",
              "args": [
                "self",
                "note"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료",
              "calls": [
                "datetime.now",
                "datetime.now",
                "int",
                "<ast.BinOp object at 0x0000010C6A0F7D90>.total_seconds",
                "self.notes.append"
              ]
            },
            {
              "name": "fail",
              "args": [
                "self",
                "error"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 실패",
              "calls": [
                "datetime.now",
                "self.notes.append"
              ]
            },
            {
              "name": "block",
              "args": [
                "self",
                "blocker"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 차단",
              "calls": [
                "<ast.Call object at 0x0000010C6A0F4400>.isoformat",
                "datetime.now",
                "datetime.now",
                "self.notes.append"
              ]
            },
            {
              "name": "unblock",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 차단 해제",
              "calls": [
                "self.outputs.pop",
                "TaskStatus",
                "datetime.now",
                "self.notes.append"
              ]
            },
            {
              "name": "cancel",
              "args": [
                "self",
                "reason"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 취소",
              "calls": [
                "datetime.now",
                "self.notes.append",
                "self.notes.append"
              ]
            },
            {
              "name": "to_dict",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "객체를 딕셔너리로 변환",
              "calls": [
                "self.created_at.isoformat",
                "self.updated_at.isoformat",
                "self.started_at.isoformat",
                "self.completed_at.isoformat"
              ]
            },
            {
              "name": "from_dict",
              "args": [
                "cls",
                "data"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "딕셔너리에서 객체 생성",
              "calls": [
                "cls._parse_datetime",
                "data.get",
                "cls._parse_datetime",
                "data.get",
                "data.get",
                "cls._parse_datetime",
                "data.get",
                "data.get",
                "cls._parse_datetime",
                "data.get",
                "cls",
                "data.get",
                "str",
                "uuid.uuid4",
                "data.get",
                "data.get",
                "TaskStatus",
                "data.get",
                "data.get",
                "data.get",
                "data.get"
              ]
            },
            {
              "name": "_parse_datetime",
              "args": [
                "dt_str"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "날짜/시간 문자열 파싱",
              "calls": [
                "datetime.now",
                "datetime.fromisoformat",
                "dt.replace",
                "datetime.now"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowPlan",
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "생성 후 검증",
              "calls": [
                "InputValidator.validate_title",
                "InputValidator.validate_description",
                "self.name.strip",
                "ValueError",
                "self.name.strip",
                "len",
                "ValueError"
              ]
            },
            {
              "name": "start",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 시작",
              "calls": [
                "datetime.now"
              ]
            },
            {
              "name": "complete",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 완료",
              "calls": [
                "datetime.now",
                "datetime.now",
                "self._update_stats"
              ]
            },
            {
              "name": "archive",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 보관 처리",
              "calls": [
                "datetime.now",
                "datetime.now",
                "self._update_stats"
              ]
            },
            {
              "name": "archive",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 아카이브",
              "calls": [
                "self.complete",
                "datetime.now",
                "datetime.now"
              ]
            },
            {
              "name": "_update_stats",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "통계 정보 업데이트",
              "calls": [
                "len",
                "len",
                "sum"
              ]
            },
            {
              "name": "get_current_task",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 작업 중인 태스크 반환",
              "calls": [
                "len",
                "enumerate"
              ]
            },
            {
              "name": "to_dict",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "객체를 딕셔너리로 변환",
              "calls": [
                "task.to_dict",
                "self.created_at.isoformat",
                "self.updated_at.isoformat",
                "self.completed_at.isoformat",
                "self.archived_at.isoformat"
              ]
            },
            {
              "name": "from_dict",
              "args": [
                "cls",
                "data"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "딕셔너리에서 객체 생성",
              "calls": [
                "Task._parse_datetime",
                "data.get",
                "Task._parse_datetime",
                "data.get",
                "data.get",
                "Task._parse_datetime",
                "data.get",
                "data.get",
                "Task._parse_datetime",
                "data.get",
                "Task.from_dict",
                "data.get",
                "cls",
                "data.get",
                "str",
                "uuid.uuid4",
                "data.get",
                "data.get",
                "PlanStatus",
                "data.get",
                "data.get",
                "data.get",
                "data.get"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "WorkflowState",
          "bases": [],
          "methods": [
            {
              "name": "add_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 추가",
              "calls": [
                "self.events.append",
                "datetime.now"
              ]
            },
            {
              "name": "get_all_plans",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 플랜 반환 (현재는 current_plan만)",
              "calls": []
            },
            {
              "name": "plans",
              "args": [
                "self"
              ],
              "decorators": [
                "property"
              ],
              "is_async": false,
              "docstring": "플랜 목록 반환 (호환성을 위한 속성)",
              "calls": [
                "self.get_all_plans"
              ]
            },
            {
              "name": "to_dict",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "상태를 딕셔너리로 변환 (v46: plans + active_plan_id 구조)",
              "calls": [
                "self.current_plan.to_dict",
                "event.to_dict",
                "self.last_saved.isoformat"
              ]
            },
            {
              "name": "from_dict",
              "args": [
                "cls",
                "data"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "딕셔너리에서 상태 복원 (개선된 버전)",
              "calls": [
                "data.get",
                "data.get",
                "plan_data.get",
                "WorkflowPlan.from_dict",
                "data.get",
                "WorkflowPlan.from_dict",
                "WorkflowEvent.from_dict",
                "data.get",
                "Task._parse_datetime",
                "data.get",
                "cls",
                "data.get",
                "data.get"
              ]
            },
            {
              "name": "get_plan_history",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 로그에서 플랜 히스토리 추출",
              "calls": [
                "event.details.get",
                "list",
                "plan_events.values"
              ]
            }
          ],
          "decorators": [
            "dataclass"
          ]
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null
        },
        {
          "module": "dataclasses",
          "name": "field",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "timezone",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "timedelta",
          "alias": null
        },
        {
          "module": "enum",
          "name": "Enum",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "uuid",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "event_types",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "errors",
          "name": "InputValidator",
          "alias": null
        },
        {
          "module": "errors",
          "name": "WorkflowError",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.parser": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\parser.py",
      "classes": [
        {
          "name": "ParsedCommand",
          "bases": [],
          "methods": [
            {
              "name": "__post_init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            }
          ],
          "decorators": [
            "dataclass"
          ]
        },
        {
          "name": "CommandParser",
          "bases": [],
          "methods": [
            {
              "name": "parse",
              "args": [
                "self",
                "command_str"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "명령어 문자열 파싱\n\nArgs:\n    command_str: 슬래시로 시작하는 명령어 문자열\n    \nReturns:\n    ParsedCommand: 파싱된 명령어 객체\n    \nRaises:\n    ValueError: 잘못된 명령어 형식",
              "calls": [
                "ValueError",
                "command_str.strip",
                "command_str.startswith",
                "ValueError",
                "<ast.Subscript object at 0x0000010C6A1058A0>.strip",
                "ValueError",
                "cmd_parts.split",
                "<ast.Subscript object at 0x0000010C6A105F60>.lower",
                "ParsedCommand",
                "len",
                "<ast.Constant object at 0x0000010C6A1066B0>.join",
                "ValueError",
                "ParsedCommand",
                "len",
                "<ast.Subscript object at 0x0000010C6A0B1510>.lower",
                "len",
                "<ast.Constant object at 0x0000010C6A0B0370>.join",
                "<ast.Constant object at 0x0000010C6A0B1AB0>.join",
                "self._parse_start",
                "self._parse_focus",
                "self._parse_plan",
                "self._parse_task",
                "self._parse_next",
                "self._parse_build",
                "self._parse_status"
              ]
            },
            {
              "name": "_parse_title_description",
              "args": [
                "self",
                "text"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "제목과 설명 파싱 (파이프 구분)",
              "calls": [
                "text.split",
                "<ast.Subscript object at 0x0000010C6A0676D0>.strip",
                "len",
                "<ast.Subscript object at 0x0000010C6A067460>.strip",
                "text.strip"
              ]
            },
            {
              "name": "_parse_start",
              "args": [
                "self",
                "args",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "start/plan 명령어 파싱",
              "calls": [
                "self._parse_title_description",
                "ValueError",
                "len",
                "ValueError"
              ]
            },
            {
              "name": "_parse_focus",
              "args": [
                "self",
                "args",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "focus 명령어 파싱",
              "calls": [
                "args.strip",
                "parsed.title.isdigit",
                "int"
              ]
            },
            {
              "name": "_parse_plan",
              "args": [
                "self",
                "args",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "plan 명령어 파싱",
              "calls": [
                "self._parse_title_description",
                "ValueError",
                "len",
                "ValueError",
                "<ast.Call object at 0x0000010C6A064B50>.strip",
                "parsed.description.replace"
              ]
            },
            {
              "name": "_parse_task",
              "args": [
                "self",
                "args",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "task 명령어 파싱",
              "calls": [
                "ValueError",
                "self._parse_title_description",
                "ValueError",
                "len",
                "ValueError",
                "args.lower",
                "args_lower.startswith",
                "<ast.Subscript object at 0x0000010C6A00BFD0>.strip",
                "note_text.startswith",
                "note_text.endswith",
                "note_text.startswith",
                "note_text.endswith",
                "ValueError",
                "self._parse_title_description",
                "ValueError",
                "len",
                "ValueError"
              ]
            },
            {
              "name": "_parse_next",
              "args": [
                "self",
                "args",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "next 명령어 파싱",
              "calls": [
                "args.strip"
              ]
            },
            {
              "name": "_parse_build",
              "args": [
                "self",
                "args",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "build 명령어 파싱",
              "calls": [
                "<ast.Call object at 0x0000010C6A04DBA0>.strip",
                "args.lower"
              ]
            },
            {
              "name": "_parse_status",
              "args": [
                "self",
                "args",
                "parsed"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "status 명령어 파싱",
              "calls": [
                "<ast.Call object at 0x0000010C6A04FAC0>.strip",
                "args.lower"
              ]
            },
            {
              "name": "validate_title",
              "args": [
                "self",
                "title",
                "field_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "제목 검증 및 정규화",
              "calls": [
                "ValueError",
                "title.strip",
                "ValueError",
                "len",
                "ValueError"
              ]
            },
            {
              "name": "extract_command",
              "args": [
                "text"
              ],
              "decorators": [
                "staticmethod"
              ],
              "is_async": false,
              "docstring": "텍스트에서 명령어 추출 (슬래시로 시작하는 부분)",
              "calls": [
                "re.search",
                "<ast.Call object at 0x0000010C6A04ECB0>.strip",
                "match.group"
              ]
            },
            {
              "name": "get_help",
              "args": [
                "self",
                "command"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "명령어 도움말",
              "calls": [
                "command.lower",
                "help_map.get"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Tuple",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "dataclasses",
          "name": "dataclass",
          "alias": null
        },
        {
          "module": "re",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.register_ai_listeners": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\register_ai_listeners.py",
      "classes": [],
      "functions": [
        {
          "name": "register_ai_instructors",
          "args": [
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "AI 지시 리스너들을 등록",
          "calls": [
            "WorkflowManager.get_instance",
            "hasattr",
            "hasattr",
            "list",
            "wm.listener_manager.listeners.values",
            "wm.listener_manager.listeners.items",
            "wm.listener_manager.unregister_listener",
            "TaskCompletionInstructor",
            "ErrorInstructor",
            "WorkflowInstructor",
            "hasattr",
            "wm.listener_manager.register_listener",
            "logger.info",
            "logger.warning",
            "print",
            "print",
            "print",
            "print",
            "print",
            "logger.error",
            "traceback.print_exc"
          ]
        },
        {
          "name": "test_ai_instruction_system",
          "args": [
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "AI 지시 시스템 테스트",
          "calls": [
            "print",
            "print",
            "register_ai_instructors",
            "print",
            "print",
            "WorkflowManager.get_instance",
            "print"
          ]
        },
        {
          "name": "check_ai_instructions",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "os.path.exists",
            "open",
            "json.load",
            "len",
            "data.get",
            "len",
            "data.get"
          ]
        }
      ],
      "imports": [
        {
          "module": "python.workflow.v3.manager",
          "name": "WorkflowManager",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.task_completion_instructor",
          "name": "TaskCompletionInstructor",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.error_instructor",
          "name": "ErrorInstructor",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.workflow_instructor",
          "name": "WorkflowInstructor",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        },
        {
          "module": "python.workflow.v3.ai_instruction_executor",
          "name": "check_ai_instructions",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "time",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.storage": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\storage.py",
      "classes": [
        {
          "name": "WorkflowStorage",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "project_name",
                "base_dir"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "Path.cwd",
                "self.base_dir.mkdir",
                "self.backup_dir.mkdir",
                "self.cache_dir.mkdir",
                "Lock",
                "self._ensure_file_exists"
              ]
            },
            {
              "name": "save",
              "args": [
                "self",
                "data",
                "create_backup"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "데이터 저장 (원자적 쓰기)",
              "calls": [
                "self._validate_workflow_data",
                "logger.error",
                "self.main_file.exists",
                "self._create_backup",
                "<ast.Subscript object at 0x0000010C6A10D4B0>.update",
                "<ast.Call object at 0x0000010C6A10CCA0>.isoformat",
                "datetime.now",
                "str",
                "self.main_file.with_suffix",
                "write_json",
                "temp_file.replace",
                "logger.info",
                "logger.error",
                "locals",
                "temp_file.exists",
                "temp_file.unlink"
              ]
            },
            {
              "name": "load",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "데이터 로드",
              "calls": [
                "self.main_file.exists",
                "read_json",
                "logger.info",
                "logger.error"
              ]
            },
            {
              "name": "exists",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 파일 존재 여부",
              "calls": [
                "self.main_file.exists"
              ]
            },
            {
              "name": "delete",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 데이터 삭제",
              "calls": [
                "self.main_file.exists",
                "self._create_backup",
                "self.main_file.unlink",
                "logger.info",
                "logger.error"
              ]
            },
            {
              "name": "_create_backup",
              "args": [
                "self",
                "suffix"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "백업 생성",
              "calls": [
                "<ast.Call object at 0x0000010C6A066560>.strftime",
                "datetime.now",
                "shutil.copy2",
                "datetime.now",
                "self._cleanup_old_backups",
                "logger.info",
                "logger.error"
              ]
            },
            {
              "name": "_cleanup_old_backups",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "오래된 백업 파일 정리",
              "calls": [
                "sorted",
                "self.backup_dir.glob",
                "len",
                "old_backup.unlink",
                "logger.info",
                "logger.error"
              ]
            },
            {
              "name": "_ensure_file_exists",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 파일이 없으면 생성",
              "calls": [
                "self.main_file.exists",
                "<ast.Call object at 0x0000010C6A106410>.isoformat",
                "datetime.now",
                "str",
                "self.save"
              ]
            },
            {
              "name": "list_backups",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "백업 파일 목록",
              "calls": [
                "sorted",
                "self.backup_dir.glob"
              ]
            },
            {
              "name": "restore_from_backup",
              "args": [
                "self",
                "backup_path"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "백업에서 복구",
              "calls": [
                "open",
                "json.load",
                "self.main_file.exists",
                "self._create_backup",
                "self.save",
                "logger.error"
              ]
            },
            {
              "name": "get_file_info",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일 정보",
              "calls": [
                "self.main_file.exists",
                "self.main_file.stat",
                "str",
                "<ast.Call object at 0x0000010C69E1C160>.isoformat",
                "datetime.fromtimestamp",
                "str"
              ]
            },
            {
              "name": "get_statistics",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "통계 정보",
              "calls": [
                "str",
                "len",
                "list",
                "self.backup_dir.glob",
                "len",
                "list",
                "self.cache_dir.glob",
                "self.main_file.exists",
                "self.main_file.stat",
                "<ast.Call object at 0x0000010C6A04C8E0>.isoformat",
                "datetime.fromtimestamp"
              ]
            },
            {
              "name": "_validate_workflow_data",
              "args": [
                "self",
                "data"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 데이터 유효성 검증",
              "calls": [
                "len",
                "logger.warning",
                "logger.warning",
                "<ast.Constant object at 0x0000010C6A04FDC0>.join",
                "traceback.format_stack",
                "any",
                "logger.warning",
                "list",
                "data.keys",
                "len",
                "json.dumps",
                "logger.warning",
                "logger.error"
              ]
            },
            {
              "name": "get_project_data",
              "args": [
                "self",
                "project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 데이터 반환 (호환성)",
              "calls": [
                "self.load"
              ]
            },
            {
              "name": "save_project_data",
              "args": [
                "self",
                "project_name",
                "data",
                "create_backup"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 데이터 저장 (호환성)",
              "calls": [
                "self.save"
              ]
            },
            {
              "name": "get_active_project",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "활성 프로젝트 반환 (호환성)",
              "calls": []
            },
            {
              "name": "set_active_project",
              "args": [
                "self",
                "project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "활성 프로젝트 설정 (호환성)",
              "calls": []
            },
            {
              "name": "list_projects",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 목록 (호환성)",
              "calls": []
            },
            {
              "name": "delete_project",
              "args": [
                "self",
                "project_name"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 삭제 (호환성)",
              "calls": [
                "self.delete"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "shutil",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "timezone",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "threading",
          "name": "Lock",
          "alias": null
        },
        {
          "module": "python.utils.io_helpers",
          "name": "write_json",
          "alias": null
        },
        {
          "module": "python.utils.io_helpers",
          "name": "read_json",
          "alias": null
        },
        {
          "module": "python.utils.io_helpers",
          "name": "read_json",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.storage_adapter": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\storage_adapter.py",
      "classes": [
        {
          "name": "WorkflowStorage",
          "bases": [],
          "methods": [
            {
              "name": "_get_unified_storage",
              "args": [
                "cls"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "싱글톤 통합 스토리지 인스턴스",
              "calls": [
                "UnifiedWorkflowStorage"
              ]
            },
            {
              "name": "__init__",
              "args": [
                "self",
                "project_name",
                "base_dir"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "기존 API 호환성을 위한 초기화\n\nArgs:\n    project_name: 프로젝트 이름\n    base_dir: (무시됨) 통합 스토리지는 단일 경로 사용",
              "calls": [
                "self._get_unified_storage"
              ]
            },
            {
              "name": "save",
              "args": [
                "self",
                "data",
                "create_backup"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "데이터 저장 (프로젝트별)\n\nArgs:\n    data: 저장할 데이터 (current_plan, events 등)\n    create_backup: 백업 생성 여부\n    \nReturns:\n    성공 여부",
              "calls": [
                "self.storage.save_project_data"
              ]
            },
            {
              "name": "load",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "데이터 로드",
              "calls": [
                "self.storage.get_project_data"
              ]
            },
            {
              "name": "exists",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 데이터 존재 여부",
              "calls": [
                "self.storage.list_projects"
              ]
            },
            {
              "name": "delete",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 데이터 삭제",
              "calls": [
                "self.storage.delete_project"
              ]
            },
            {
              "name": "create_backup",
              "args": [
                "self",
                "suffix"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "백업 생성 (통합 백업으로 위임)",
              "calls": [
                "self.storage._create_backup"
              ]
            },
            {
              "name": "list_backups",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "백업 목록 (통합 백업)",
              "calls": [
                "sorted",
                "self.storage.backup_dir.glob"
              ]
            },
            {
              "name": "restore_from_backup",
              "args": [
                "self",
                "backup_path"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "백업에서 복구\n\nNote: 통합 스토리지에서는 전체 복구만 지원",
              "calls": []
            },
            {
              "name": "migrate_all_v3_files",
              "args": [
                "cls"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "모든 V3 파일을 통합 스토리지로 마이그레이션",
              "calls": [
                "cls._get_unified_storage",
                "storage.migrate_from_v3_files"
              ]
            },
            {
              "name": "get_all_projects",
              "args": [
                "cls"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "모든 프로젝트 목록",
              "calls": [
                "cls._get_unified_storage",
                "storage.list_projects"
              ]
            },
            {
              "name": "get_statistics",
              "args": [
                "cls"
              ],
              "decorators": [
                "classmethod"
              ],
              "is_async": false,
              "docstring": "전체 통계",
              "calls": [
                "cls._get_unified_storage",
                "storage.get_statistics"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "unified_storage",
          "name": "UnifiedWorkflowStorage",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.task_context_handlers": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\task_context_handlers.py",
      "classes": [
        {
          "name": "TaskContextEventHandlers",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "task_context_manager"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "register_all",
              "args": [
                "self",
                "event_bus"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 핸들러 등록",
              "calls": [
                "event_bus.subscribe",
                "event_bus.subscribe",
                "event_bus.subscribe",
                "event_bus.subscribe",
                "event_bus.subscribe",
                "event_bus.subscribe",
                "event_bus.subscribe"
              ]
            },
            {
              "name": "on_plan_created",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 생성 시",
              "calls": [
                "event.data.get",
                "event.data.get",
                "event.data.get",
                "event.data.get",
                "self.tcm.on_plan_created"
              ]
            },
            {
              "name": "on_plan_started",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 시작 시",
              "calls": [
                "event.data.get",
                "self.tcm.on_plan_started"
              ]
            },
            {
              "name": "on_task_added",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 추가 시",
              "calls": [
                "event.data.get",
                "event.data.get",
                "event.data.get",
                "event.data.get",
                "event.data.get",
                "self.tcm.on_task_added"
              ]
            },
            {
              "name": "on_task_started",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 시작 시",
              "calls": [
                "event.data.get",
                "self.tcm.on_task_started"
              ]
            },
            {
              "name": "on_task_completed",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료 시",
              "calls": [
                "event.data.get",
                "event.data.get",
                "self.tcm.on_task_updated",
                "work_results.get",
                "work_results.get",
                "work_results.get",
                "self.tcm.on_task_completed"
              ]
            },
            {
              "name": "on_task_updated",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 업데이트 시",
              "calls": [
                "event.data.get",
                "self.tcm.on_task_updated"
              ]
            },
            {
              "name": "on_plan_completed",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 완료 시",
              "calls": [
                "event.data.get",
                "self.tcm.on_plan_completed"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "task_context_manager",
          "name": "TaskContextManager",
          "alias": null
        },
        {
          "module": "event_types",
          "name": "EventType",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.task_context_manager": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\task_context_manager.py",
      "classes": [
        {
          "name": "TaskContextManager",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "memory_dir"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "Path",
                "self.memory_dir.mkdir",
                "self.archive_dir.mkdir",
                "self._load_context"
              ]
            },
            {
              "name": "_load_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트 파일 로드",
              "calls": [
                "self.context_file.exists",
                "open",
                "json.load",
                "logger.error",
                "self._get_default_context",
                "self._get_default_context"
              ]
            },
            {
              "name": "_get_default_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "기본 컨텍스트 구조",
              "calls": [
                "<ast.Call object at 0x0000010C6A0A9C00>.isoformat",
                "datetime.now"
              ]
            },
            {
              "name": "_save_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트 저장",
              "calls": [
                "<ast.Call object at 0x0000010C6A0A9810>.isoformat",
                "datetime.now",
                "open",
                "json.dump",
                "self._update_realtime",
                "logger.error"
              ]
            },
            {
              "name": "_update_realtime",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "실시간 파일 업데이트 (현재 상태만)",
              "calls": [
                "self.context.get",
                "self.context.get",
                "<ast.Call object at 0x0000010C6A0A88E0>.isoformat",
                "datetime.now",
                "open",
                "json.dump",
                "logger.warning"
              ]
            },
            {
              "name": "_add_event",
              "args": [
                "self",
                "event_type",
                "data"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 기록",
              "calls": [
                "<ast.Call object at 0x0000010C6A05BE50>.isoformat",
                "datetime.now",
                "<ast.Subscript object at 0x0000010C6A05BD00>.append",
                "len"
              ]
            },
            {
              "name": "on_plan_created",
              "args": [
                "self",
                "plan_id",
                "plan_name",
                "description"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 생성 시",
              "calls": [
                "<ast.Call object at 0x0000010C6A0B1FC0>.isoformat",
                "datetime.now",
                "self._add_event",
                "self._save_context",
                "logger.info"
              ]
            },
            {
              "name": "on_plan_started",
              "args": [
                "self",
                "plan_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 시작 시",
              "calls": [
                "<ast.Call object at 0x0000010C6A0B2E90>.isoformat",
                "datetime.now",
                "self._add_event",
                "self._save_context",
                "logger.info"
              ]
            },
            {
              "name": "on_plan_completed",
              "args": [
                "self",
                "plan_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 완료 시",
              "calls": [
                "<ast.Call object at 0x0000010C6A0B3EB0>.isoformat",
                "datetime.now",
                "self._archive_plan",
                "self._add_event",
                "self._save_context",
                "logger.info"
              ]
            },
            {
              "name": "_archive_plan",
              "args": [
                "self",
                "plan_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 아카이브",
              "calls": [
                "<ast.Call object at 0x0000010C6A0B0220>.strftime",
                "datetime.now",
                "plan_data.get",
                "plan_tasks.append",
                "<ast.Call object at 0x0000010C6A106E00>.isoformat",
                "datetime.now",
                "open",
                "json.dump",
                "logger.info",
                "logger.error"
              ]
            },
            {
              "name": "on_task_added",
              "args": [
                "self",
                "plan_id",
                "task_id",
                "task_title",
                "description"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 추가 시",
              "calls": [
                "<ast.Call object at 0x0000010C6A1044C0>.isoformat",
                "datetime.now",
                "<ast.Subscript object at 0x0000010C6A064A90>.append",
                "self._add_event",
                "self._save_context",
                "logger.info"
              ]
            },
            {
              "name": "on_task_started",
              "args": [
                "self",
                "task_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 시작 시",
              "calls": [
                "<ast.Call object at 0x0000010C6A0668C0>.isoformat",
                "datetime.now",
                "self._add_event",
                "self._save_context",
                "logger.info"
              ]
            },
            {
              "name": "on_task_completed",
              "args": [
                "self",
                "task_id",
                "note"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료 시",
              "calls": [
                "<ast.Call object at 0x0000010C6A065540>.isoformat",
                "datetime.now",
                "datetime.fromisoformat",
                "datetime.now",
                "str",
                "<ast.Subscript object at 0x0000010C6A066E90>.append",
                "<ast.Call object at 0x0000010C6A065660>.isoformat",
                "datetime.now",
                "self._add_event",
                "self._save_context",
                "logger.info"
              ]
            },
            {
              "name": "on_task_updated",
              "args": [
                "self",
                "task_id",
                "updates"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 업데이트 시",
              "calls": [
                "updates.items",
                "<ast.Subscript object at 0x0000010C6A00B7C0>.append",
                "<ast.Call object at 0x0000010C6A009AB0>.isoformat",
                "datetime.now",
                "<ast.Subscript object at 0x0000010C6A00A4D0>.append",
                "<ast.Call object at 0x0000010C6A00B100>.isoformat",
                "datetime.now",
                "isinstance",
                "<ast.Subscript object at 0x0000010C6A00AB60>.extend",
                "<ast.Subscript object at 0x0000010C6A00A020>.append",
                "<ast.Call object at 0x0000010C6A00BAF0>.isoformat",
                "datetime.now",
                "self._add_event",
                "list",
                "updates.keys",
                "self._save_context"
              ]
            },
            {
              "name": "get_current_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 컨텍스트 반환",
              "calls": [
                "self.context.get",
                "self.context.get",
                "<ast.Subscript object at 0x0000010C6A04F850>.get",
                "<ast.Subscript object at 0x0000010C6A04D840>.get"
              ]
            },
            {
              "name": "get_plan_context",
              "args": [
                "self",
                "plan_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 플랜의 컨텍스트",
              "calls": [
                "plan.get",
                "tasks.append"
              ]
            },
            {
              "name": "get_task_context",
              "args": [
                "self",
                "task_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "특정 태스크의 컨텍스트",
              "calls": [
                "<ast.Subscript object at 0x0000010C6A04DFF0>.get"
              ]
            },
            {
              "name": "get_recent_events",
              "args": [
                "self",
                "limit"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "최근 이벤트 반환",
              "calls": []
            },
            {
              "name": "clear_old_events",
              "args": [
                "self",
                "keep_days"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "오래된 이벤트 정리",
              "calls": [
                "<ast.Call object at 0x0000010C6A04CF40>.timestamp",
                "datetime.now",
                "<ast.Call object at 0x0000010C6A04C730>.timestamp",
                "datetime.fromisoformat",
                "new_events.append",
                "new_events.append",
                "self._save_context",
                "logger.info",
                "len"
              ]
            },
            {
              "name": "export_current_state",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "현재 상태 내보내기",
              "calls": [
                "self.get_current_context",
                "self.get_recent_events",
                "<ast.Call object at 0x0000010C6A1ED7E0>.isoformat",
                "datetime.now"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "shutil",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.workflow_event_adapter": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\workflow_event_adapter.py",
      "classes": [
        {
          "name": "WorkflowEventAdapter",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "workflow_manager"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "EventBus",
                "self.event_bus.start",
                "logger.info",
                "self._register_handlers"
              ]
            },
            {
              "name": "add_listener",
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 리스너 추가",
              "calls": [
                "self.event_bus.subscribe",
                "logger.debug"
              ]
            },
            {
              "name": "remove_listener",
              "args": [
                "self",
                "event_type",
                "handler"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 리스너 제거",
              "calls": [
                "self.event_bus.unsubscribe",
                "logger.debug"
              ]
            },
            {
              "name": "add_workflow_listener",
              "args": [
                "self",
                "listener"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "BaseEventListener 인터페이스를 구현한 리스너 추가",
              "calls": [
                "hasattr",
                "hasattr",
                "listener.get_subscribed_events",
                "hasattr",
                "str"
              ]
            },
            {
              "name": "create_handler",
              "args": [
                "listener_ref"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "handler",
              "args": [
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "self._convert_event_to_workflow_event",
                "listener_ref.handle_event"
              ]
            },
            {
              "name": "_convert_event_to_workflow_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "EventBus의 Event를 WorkflowEvent로 변환",
              "calls": [
                "logger.warning",
                "hasattr",
                "WorkflowEvent",
                "hasattr",
                "str",
                "uuid.uuid4",
                "hasattr",
                "datetime.now",
                "data.get",
                "data.get",
                "data.get",
                "data.get",
                "data.get",
                "logger.error"
              ]
            },
            {
              "name": "_register_handlers",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "기본 핸들러 등록",
              "calls": [
                "self.event_bus.subscribe"
              ]
            },
            {
              "name": "_on_project_switched",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 전환 이벤트 처리",
              "calls": [
                "logger.info"
              ]
            },
            {
              "name": "_convert_workflow_event_to_event",
              "args": [
                "self",
                "workflow_event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "WorkflowEvent를 EventBus의 Event로 변환",
              "calls": [
                "hasattr",
                "logger.error",
                "type",
                "hasattr",
                "str",
                "logger.debug",
                "logger.error",
                "Event"
              ]
            },
            {
              "name": "publish_workflow_event",
              "args": [
                "self",
                "workflow_event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "WorkflowEvent를 EventBus로 발행",
              "calls": [
                "isinstance",
                "logger.error",
                "type",
                "self._convert_workflow_event_to_event",
                "self.event_bus.publish",
                "logger.info",
                "logger.error",
                "logger.error"
              ]
            },
            {
              "name": "publish_plan_created",
              "args": [
                "self",
                "plan"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 생성 이벤트 발행",
              "calls": [
                "EventBuilder.plan_created",
                "self.publish_workflow_event"
              ]
            },
            {
              "name": "publish_plan_started",
              "args": [
                "self",
                "plan"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 시작 이벤트 발행",
              "calls": [
                "EventBuilder.plan_started",
                "self.publish_workflow_event"
              ]
            },
            {
              "name": "publish_plan_completed",
              "args": [
                "self",
                "plan"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 완료 이벤트 발행",
              "calls": [
                "EventBuilder.plan_completed",
                "self.publish_workflow_event"
              ]
            },
            {
              "name": "publish_task_added",
              "args": [
                "self",
                "task",
                "plan"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 추가 이벤트 발행",
              "calls": [
                "EventBuilder.task_added",
                "self.publish_workflow_event"
              ]
            },
            {
              "name": "publish_task_started",
              "args": [
                "self",
                "task",
                "plan"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 시작 이벤트 발행",
              "calls": [
                "EventBuilder.task_started",
                "self.publish_workflow_event"
              ]
            },
            {
              "name": "publish_task_completed",
              "args": [
                "self",
                "task",
                "plan"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료 이벤트 발행",
              "calls": [
                "EventBuilder.task_completed",
                "self.publish_workflow_event"
              ]
            },
            {
              "name": "publish_task_failed",
              "args": [
                "self",
                "task",
                "plan",
                "error"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 실패 이벤트 발행",
              "calls": [
                "EventBuilder.task_failed",
                "self.publish_workflow_event"
              ]
            },
            {
              "name": "cleanup",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "정리 작업",
              "calls": [
                "self.event_bus.stop",
                "logger.info"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "event_bus",
          "name": "EventBus",
          "alias": null
        },
        {
          "module": "event_bus",
          "name": "Event",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "events",
          "name": "EventBuilder",
          "alias": null
        },
        {
          "module": "uuid",
          "alias": null
        },
        {
          "module": "event_types",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "event_bus",
          "name": "Event",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.__init__": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        {
          "module": "manager",
          "name": "WorkflowManager",
          "alias": null
        },
        {
          "module": "dispatcher",
          "name": "WorkflowDispatcher",
          "alias": null
        },
        {
          "module": "storage",
          "name": "WorkflowStorage",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowState",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "module": "models",
          "name": "Task",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowError",
          "alias": null
        },
        {
          "module": "event_types",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "events",
          "name": "EventProcessor",
          "alias": null
        },
        {
          "module": "events",
          "name": "EventBuilder",
          "alias": null
        },
        {
          "module": "events",
          "name": "EventStore",
          "alias": null
        },
        {
          "module": "workflow_event_adapter",
          "name": "WorkflowEventAdapter",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.api.decorators": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\api\\decorators.py",
      "classes": [],
      "functions": [
        {
          "name": "require_active_plan",
          "args": [
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "활성 플랜이 필요한 작업에 대한 데코레이터",
          "calls": []
        },
        {
          "name": "wrapper",
          "args": [
            "self"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A036AA0>"
          ],
          "is_async": false,
          "docstring": null,
          "calls": [
            "hasattr",
            "WorkflowError",
            "func",
            "functools.wraps"
          ]
        },
        {
          "name": "log_command",
          "args": [
            "command_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "명령어 실행 로깅 데코레이터\n\nArgs:\n    command_type: \"user\" 또는 \"internal\"",
          "calls": []
        },
        {
          "name": "decorator",
          "args": [
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "wrapper",
          "args": [
            "self"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A0B3A90>"
          ],
          "is_async": false,
          "docstring": null,
          "calls": [
            "datetime.now",
            "logger.info",
            "command_type.upper",
            "func",
            "<ast.BinOp object at 0x0000010C6A0B16F0>.total_seconds",
            "datetime.now",
            "logger.info",
            "command_type.upper",
            "hasattr",
            "self._emit_command_event",
            "<ast.BinOp object at 0x0000010C6A0B3A30>.total_seconds",
            "datetime.now",
            "logger.error",
            "command_type.upper",
            "logger.debug",
            "traceback.format_exc",
            "hasattr",
            "self._emit_command_event",
            "str",
            "functools.wraps"
          ]
        },
        {
          "name": "validate_arguments",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "인자 검증 데코레이터\n\n사용 예:\n@validate_arguments(title=lambda x: len(x) > 0, index=lambda x: x >= 0)",
          "calls": []
        },
        {
          "name": "decorator",
          "args": [
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "wrapper",
          "args": [
            "self"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A0B0190>"
          ],
          "is_async": false,
          "docstring": null,
          "calls": [
            "inspect.signature",
            "sig.bind",
            "bound.apply_defaults",
            "validators.items",
            "validator",
            "ValueError",
            "func",
            "functools.wraps"
          ]
        },
        {
          "name": "auto_save",
          "args": [
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "실행 후 자동 저장 데코레이터",
          "calls": []
        },
        {
          "name": "wrapper",
          "args": [
            "self"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A04C430>"
          ],
          "is_async": false,
          "docstring": null,
          "calls": [
            "func",
            "hasattr",
            "callable",
            "self._save_data",
            "logger.debug",
            "logger.error",
            "functools.wraps"
          ]
        },
        {
          "name": "transactional",
          "args": [
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "트랜잭션 데코레이터 - 실패 시 롤백",
          "calls": []
        },
        {
          "name": "wrapper",
          "args": [
            "self"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A04C3D0>"
          ],
          "is_async": false,
          "docstring": null,
          "calls": [
            "hasattr",
            "copy.deepcopy",
            "func",
            "hasattr",
            "locals",
            "logger.warning",
            "functools.wraps"
          ]
        },
        {
          "name": "rate_limit",
          "args": [
            "max_calls",
            "window_seconds"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Rate limiting 데코레이터",
          "calls": []
        },
        {
          "name": "decorator",
          "args": [
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "wrapper",
          "args": [
            "self"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A04EAD0>"
          ],
          "is_async": false,
          "docstring": null,
          "calls": [
            "datetime.now",
            "<ast.BinOp object at 0x0000010C6A04F130>.total_seconds",
            "len",
            "WorkflowError",
            "call_times.append",
            "func",
            "functools.wraps"
          ]
        },
        {
          "name": "internal_only",
          "args": [
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "내부 API 전용 데코레이터",
          "calls": []
        },
        {
          "name": "wrapper",
          "args": [
            "self"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A04CAC0>"
          ],
          "is_async": false,
          "docstring": null,
          "calls": [
            "inspect.currentframe",
            "caller_frame.f_globals.get",
            "caller_module.startswith",
            "logger.warning",
            "WorkflowError",
            "func",
            "functools.wraps"
          ]
        },
        {
          "name": "deprecated",
          "args": [
            "replacement"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Deprecated 경고 데코레이터",
          "calls": []
        },
        {
          "name": "decorator",
          "args": [
            "func"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "wrapper",
          "args": [],
          "decorators": [
            "<ast.Call object at 0x0000010C6A00A380>"
          ],
          "is_async": false,
          "docstring": null,
          "calls": [
            "warnings.warn",
            "func",
            "functools.wraps"
          ]
        }
      ],
      "imports": [
        {
          "module": "functools",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Callable",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        },
        {
          "module": "errors",
          "name": "WorkflowError",
          "alias": null
        },
        {
          "module": "errors",
          "name": "ErrorCode",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "inspect",
          "alias": null
        },
        {
          "module": "copy",
          "alias": null
        },
        {
          "module": "inspect",
          "alias": null
        },
        {
          "module": "warnings",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.api.internal_api": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\api\\internal_api.py",
      "classes": [
        {
          "name": "InternalWorkflowAPI",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "workflow_manager"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "set_current_plan",
              "args": [
                "self",
                "plan"
              ],
              "decorators": [
                "internal_only",
                "<ast.Call object at 0x0000010C6A08A2C0>",
                "transactional"
              ],
              "is_async": false,
              "docstring": "현재 플랜 직접 설정",
              "calls": [
                "WorkflowEvent",
                "self._add_event",
                "log_command"
              ]
            },
            {
              "name": "update_task_status",
              "args": [
                "self",
                "task_id",
                "status",
                "metadata"
              ],
              "decorators": [
                "internal_only",
                "<ast.Call object at 0x0000010C6A088910>",
                "transactional"
              ],
              "is_async": false,
              "docstring": "태스크 상태 직접 업데이트",
              "calls": [
                "self._get_task_by_id",
                "WorkflowError",
                "datetime.now",
                "task.outputs.update",
                "datetime.now",
                "datetime.now",
                "int",
                "<ast.BinOp object at 0x0000010C6A088F40>.total_seconds",
                "EventBuilder.task_updated",
                "self._add_event",
                "log_command"
              ]
            },
            {
              "name": "get_task_by_id",
              "args": [
                "self",
                "task_id"
              ],
              "decorators": [
                "internal_only",
                "<ast.Call object at 0x0000010C6A0885B0>"
              ],
              "is_async": false,
              "docstring": "ID로 태스크 조회",
              "calls": [
                "self._get_task_by_id",
                "log_command"
              ]
            },
            {
              "name": "batch_update_tasks",
              "args": [
                "self",
                "updates"
              ],
              "decorators": [
                "internal_only",
                "<ast.Call object at 0x0000010C6A105B40>",
                "auto_save"
              ],
              "is_async": false,
              "docstring": "여러 태스크 일괄 업데이트\n\nArgs:\n    updates: [{'task_id': str, 'status': TaskStatus, 'metadata': dict}, ...]",
              "calls": [
                "self.update_task_status",
                "update.get",
                "update.get",
                "updated_tasks.append",
                "log_command"
              ]
            },
            {
              "name": "force_complete_plan",
              "args": [
                "self",
                "plan_id"
              ],
              "decorators": [
                "internal_only",
                "<ast.Call object at 0x0000010C6A106C50>",
                "transactional",
                "auto_save"
              ],
              "is_async": false,
              "docstring": "플랜 강제 완료",
              "calls": [
                "task.notes.append",
                "datetime.now",
                "EventBuilder.plan_completed",
                "self._add_event",
                "log_command"
              ]
            },
            {
              "name": "create_plan_from_template",
              "args": [
                "self",
                "template"
              ],
              "decorators": [
                "internal_only",
                "<ast.Call object at 0x0000010C6A034880>"
              ],
              "is_async": false,
              "docstring": "템플릿에서 플랜 생성\n\nArgs:\n    template: {\n        'name': str,\n        'description': str,\n        'tasks': [{'title': str, 'description': str}, ...]\n    }",
              "calls": [
                "WorkflowPlan",
                "template.get",
                "template.get",
                "Task",
                "task_data.get",
                "plan.tasks.append",
                "log_command"
              ]
            },
            {
              "name": "get_event_history",
              "args": [
                "self",
                "plan_id",
                "event_type",
                "limit"
              ],
              "decorators": [
                "internal_only"
              ],
              "is_async": false,
              "docstring": "이벤트 히스토리 조회",
              "calls": [
                "sorted"
              ]
            },
            {
              "name": "calculate_plan_statistics",
              "args": [
                "self",
                "plan"
              ],
              "decorators": [
                "internal_only"
              ],
              "is_async": false,
              "docstring": "플랜 통계 계산",
              "calls": [
                "len",
                "len",
                "len",
                "len",
                "sum"
              ]
            },
            {
              "name": "create_checkpoint",
              "args": [
                "self"
              ],
              "decorators": [
                "internal_only",
                "<ast.Call object at 0x0000010C6A00B550>"
              ],
              "is_async": false,
              "docstring": "현재 상태의 체크포인트 생성",
              "calls": [
                "str",
                "uuid4",
                "<ast.Call object at 0x0000010C6A00B3A0>.isoformat",
                "datetime.now",
                "hasattr",
                "self.state.to_dict",
                "self.state.current_plan.to_dict",
                "os.makedirs",
                "os.path.dirname",
                "open",
                "json.dump",
                "logger.info",
                "log_command"
              ]
            },
            {
              "name": "restore_checkpoint",
              "args": [
                "self",
                "checkpoint_id"
              ],
              "decorators": [
                "internal_only",
                "<ast.Call object at 0x0000010C6A04C130>"
              ],
              "is_async": false,
              "docstring": "체크포인트에서 상태 복원",
              "calls": [
                "os.path.exists",
                "logger.error",
                "open",
                "json.load",
                "logger.info",
                "log_command"
              ]
            },
            {
              "name": "_get_task_by_id",
              "args": [
                "self",
                "task_id"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 ID로 조회",
              "calls": []
            },
            {
              "name": "_add_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 추가",
              "calls": [
                "self.event_store.add",
                "hasattr",
                "self.manager.event_adapter.publish_workflow_event",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "uuid",
          "name": "uuid4",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowPlan",
          "alias": null
        },
        {
          "module": "models",
          "name": "Task",
          "alias": null
        },
        {
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "module": "models",
          "name": "PlanStatus",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "errors",
          "name": "WorkflowError",
          "alias": null
        },
        {
          "module": "errors",
          "name": "ErrorCode",
          "alias": null
        },
        {
          "module": "storage",
          "name": "WorkflowStorage",
          "alias": null
        },
        {
          "module": "events",
          "name": "EventBuilder",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "internal_only",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "log_command",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "transactional",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "auto_save",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "copy",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.api.user_api": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\api\\user_api.py",
      "classes": [
        {
          "name": "UserCommandAPI",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "workflow_manager"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "CommandParser",
                "self._register_extended_commands"
              ]
            },
            {
              "name": "_register_extended_commands",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "확장 명령어 핸들러 등록",
              "calls": [
                "hasattr",
                "self.manager.command_handlers.update"
              ]
            },
            {
              "name": "execute_command",
              "args": [
                "self",
                "command_str"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A0ECF40>"
              ],
              "is_async": false,
              "docstring": "사용자 명령어 실행 (개선된 버전)",
              "calls": [
                "self.parser.parse",
                "self.manager.command_handlers.get",
                "handler",
                "WorkflowError",
                "self._get_user_friendly_error",
                "HelperResult",
                "e.to_dict",
                "logger.error",
                "type",
                "str",
                "traceback.format_exc",
                "HelperResult",
                "type",
                "str",
                "log_command"
              ]
            },
            {
              "name": "_get_user_friendly_error",
              "args": [
                "self",
                "error"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "사용자 친화적 에러 메시지 생성",
              "calls": [
                "error_messages.get"
              ]
            },
            {
              "name": "_handle_auto",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A064670>"
              ],
              "is_async": false,
              "docstring": "자동 실행 모드 제어",
              "calls": [
                "hasattr",
                "AutoTaskExecutor",
                "parsed.title.lower",
                "HelperResult",
                "parsed.title.lower",
                "executor.start",
                "HelperResult",
                "parsed.title.lower",
                "executor.stop",
                "HelperResult",
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_handle_pause",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A065480>"
              ],
              "is_async": false,
              "docstring": "자동 실행 일시 정지",
              "calls": [
                "hasattr",
                "self.manager._auto_executor.pause",
                "HelperResult",
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_handle_resume",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A065630>"
              ],
              "is_async": false,
              "docstring": "자동 실행 재개",
              "calls": [
                "hasattr",
                "self.manager._auto_executor.resume",
                "HelperResult",
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_handle_skip",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A065F60>",
                "require_active_plan"
              ],
              "is_async": false,
              "docstring": "현재 태스크 건너뛰기",
              "calls": [
                "self.manager.get_current_task",
                "HelperResult",
                "self.manager.cancel_task",
                "self.manager.get_current_task",
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_handle_delete",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A035D20>",
                "require_active_plan",
                "<ast.Call object at 0x0000010C6A035DE0>"
              ],
              "is_async": false,
              "docstring": "태스크 삭제",
              "calls": [
                "enumerate",
                "str",
                "HelperResult",
                "self.manager.state.current_plan.tasks.pop",
                "max",
                "self.manager._save_data",
                "HelperResult",
                "log_command",
                "validate_arguments",
                "len"
              ]
            },
            {
              "name": "_handle_move",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A08A020>",
                "require_active_plan"
              ],
              "is_async": false,
              "docstring": "태스크 순서 변경",
              "calls": [
                "parsed.title.split",
                "len",
                "HelperResult",
                "int",
                "enumerate",
                "str",
                "HelperResult",
                "len",
                "HelperResult",
                "self.manager.state.current_plan.tasks.pop",
                "self.manager.state.current_plan.tasks.insert",
                "self.manager._save_data",
                "HelperResult",
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_handle_depend",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A04D060>",
                "require_active_plan"
              ],
              "is_async": false,
              "docstring": "태스크 의존성 설정",
              "calls": [
                "parsed.title.split",
                "len",
                "HelperResult",
                "enumerate",
                "str",
                "str",
                "HelperResult",
                "HelperResult",
                "<ast.Subscript object at 0x0000010C6A08B4F0>.append",
                "self.manager._save_data",
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_handle_export",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A04C0A0>"
              ],
              "is_async": false,
              "docstring": "워크플로우 내보내기",
              "calls": [
                "HelperResult",
                "<ast.Call object at 0x0000010C6A04DB10>.isoformat",
                "datetime.now",
                "self.manager.state.current_plan.to_dict",
                "len",
                "<ast.Call object at 0x0000010C6A04D480>.strftime",
                "datetime.now",
                "filename.endswith",
                "os.makedirs",
                "open",
                "json.dump",
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_handle_import",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A04FEB0>"
              ],
              "is_async": false,
              "docstring": "워크플로우 가져오기",
              "calls": [
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_handle_template",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A04DCC0>"
              ],
              "is_async": false,
              "docstring": "워크플로우 템플릿 관리",
              "calls": [
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_handle_report",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A04C5E0>",
                "require_active_plan"
              ],
              "is_async": false,
              "docstring": "진행 상황 리포트",
              "calls": [
                "self._generate_progress_report",
                "self._generate_timeline_report",
                "HelperResult",
                "log_command"
              ]
            },
            {
              "name": "_generate_progress_report",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "진행 상황 리포트 생성",
              "calls": [
                "len",
                "len",
                "len",
                "enumerate",
                "<ast.Dict object at 0x0000010C6A00BB80>.get",
                "HelperResult"
              ]
            },
            {
              "name": "_generate_timeline_report",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "타임라인 리포트 생성",
              "calls": [
                "HelperResult"
              ]
            },
            {
              "name": "_handle_stats",
              "args": [
                "self",
                "parsed"
              ],
              "decorators": [
                "<ast.Call object at 0x0000010C6A1626B0>"
              ],
              "is_async": false,
              "docstring": "통계 정보",
              "calls": [
                "InternalWorkflowAPI",
                "internal_api.calculate_plan_statistics",
                "HelperResult",
                "HelperResult",
                "log_command"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "models",
          "name": "Task",
          "alias": null
        },
        {
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "module": "errors",
          "name": "WorkflowError",
          "alias": null
        },
        {
          "module": "errors",
          "name": "ErrorCode",
          "alias": null
        },
        {
          "module": "parser",
          "name": "CommandParser",
          "alias": null
        },
        {
          "module": "parser",
          "name": "ParsedCommand",
          "alias": null
        },
        {
          "module": "python.ai_helpers.helper_result",
          "name": "HelperResult",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "require_active_plan",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "log_command",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "validate_arguments",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "auto_save",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "rate_limit",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        },
        {
          "module": "commands.auto_executor",
          "name": "AutoTaskExecutor",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "internal_api",
          "name": "InternalWorkflowAPI",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.api.__init__": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\api\\__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        {
          "module": "decorators",
          "name": "require_active_plan",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "log_command",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "validate_arguments",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "auto_save",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "transactional",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "rate_limit",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "internal_only",
          "alias": null
        },
        {
          "module": "decorators",
          "name": "deprecated",
          "alias": null
        },
        {
          "module": "internal_api",
          "name": "InternalWorkflowAPI",
          "alias": null
        },
        {
          "module": "user_api",
          "name": "UserCommandAPI",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.commands.auto_executor": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\commands\\auto_executor.py",
      "classes": [
        {
          "name": "AutoTaskExecutor",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "workflow_manager"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "threading.Event",
                "threading.Event",
                "self._subscribe_events"
              ]
            },
            {
              "name": "_subscribe_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 이벤트 구독",
              "calls": [
                "event_bus.subscribe",
                "event_bus.subscribe"
              ]
            },
            {
              "name": "start",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "자동 실행 시작",
              "calls": [
                "logger.warning",
                "self._stop_event.clear",
                "datetime.now",
                "threading.Thread",
                "self._thread.start",
                "logger.info"
              ]
            },
            {
              "name": "stop",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "자동 실행 중지",
              "calls": [
                "self._stop_event.set",
                "self._thread.join",
                "datetime.now",
                "logger.info"
              ]
            },
            {
              "name": "pause",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "일시 정지",
              "calls": [
                "self._pause_event.set",
                "logger.info"
              ]
            },
            {
              "name": "resume",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "재개",
              "calls": [
                "self._pause_event.clear",
                "logger.info"
              ]
            },
            {
              "name": "_run_loop",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "메인 실행 루프",
              "calls": [
                "logger.info",
                "self._stop_event.is_set",
                "time.sleep",
                "self._get_next_executable_task",
                "logger.info",
                "self._on_all_complete",
                "self._execute_task",
                "time.sleep",
                "logger.error",
                "self.pause",
                "logger.info"
              ]
            },
            {
              "name": "_get_next_executable_task",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "다음 실행 가능한 태스크 찾기",
              "calls": [
                "self.manager.get_current_task",
                "self._get_next_executable_task",
                "self._get_next_executable_task",
                "self._has_unmet_dependencies",
                "logger.info",
                "self._run_hooks",
                "hasattr",
                "self.manager.block_task",
                "self._get_next_executable_task"
              ]
            },
            {
              "name": "_has_unmet_dependencies",
              "args": [
                "self",
                "task"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크의 의존성이 충족되지 않았는지 확인",
              "calls": [
                "isinstance",
                "self.manager.internal_api.get_task_by_id"
              ]
            },
            {
              "name": "_execute_task",
              "args": [
                "self",
                "task"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 실행",
              "calls": [
                "logger.info",
                "self._run_hooks",
                "self.manager.internal_api.update_task_status",
                "<ast.Call object at 0x0000010C6A0EF1F0>.isoformat",
                "datetime.now",
                "self._simulate_task_execution",
                "self.manager.complete_task",
                "self._run_hooks",
                "logger.error",
                "hasattr",
                "self.manager.fail_task",
                "str",
                "self._run_hooks",
                "self.pause"
              ]
            },
            {
              "name": "_simulate_task_execution",
              "args": [
                "self",
                "task"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 실행 시뮬레이션 (실제 구현 시 교체 필요)",
              "calls": [
                "task.description.startswith",
                "<ast.Subscript object at 0x0000010C6A04C490>.strip",
                "logger.info",
                "task.outputs.get",
                "time.sleep"
              ]
            },
            {
              "name": "_on_task_completed",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료 이벤트 핸들러",
              "calls": [
                "logger.debug"
              ]
            },
            {
              "name": "_on_task_failed",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 실패 이벤트 핸들러",
              "calls": [
                "self.pause"
              ]
            },
            {
              "name": "_on_all_complete",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 태스크 완료 시 호출",
              "calls": [
                "logger.info",
                "self._run_hooks",
                "self.stop"
              ]
            },
            {
              "name": "_run_hooks",
              "args": [
                "self",
                "hook_type",
                "task"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "훅 실행",
              "calls": [
                "hook",
                "logger.error"
              ]
            },
            {
              "name": "register_hook",
              "args": [
                "self",
                "hook_type",
                "callback"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "훅 등록\n\nArgs:\n    hook_type: 'before_task', 'after_task', 'on_error', 'on_blocked', 'on_complete'\n    callback: 콜백 함수",
              "calls": [
                "ValueError",
                "<ast.Subscript object at 0x0000010C6A04CA60>.append",
                "logger.debug"
              ]
            },
            {
              "name": "unregister_hook",
              "args": [
                "self",
                "hook_type",
                "callback"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "훅 제거",
              "calls": [
                "<ast.Subscript object at 0x0000010C6A04FCD0>.remove"
              ]
            },
            {
              "name": "get_status",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "실행기 상태 조회",
              "calls": [
                "self.stats.copy",
                "datetime.now",
                "<ast.BinOp object at 0x0000010C6A00B340>.total_seconds"
              ]
            },
            {
              "name": "__del__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "소멸자",
              "calls": [
                "self.stop",
                "event_bus.unsubscribe",
                "event_bus.unsubscribe"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "threading",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "time",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Callable",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "queue",
          "name": "Queue",
          "alias": null
        },
        {
          "module": "queue",
          "name": "Empty",
          "alias": null
        },
        {
          "module": "models",
          "name": "Task",
          "alias": null
        },
        {
          "module": "models",
          "name": "TaskStatus",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "event_bus",
          "name": "event_bus",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.commands.__init__": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\commands\\__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        {
          "module": "auto_executor",
          "name": "AutoTaskExecutor",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.ai_instruction_base": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\ai_instruction_base.py",
      "classes": [
        {
          "name": "ActionType",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "decorators": []
        },
        {
          "name": "Priority",
          "bases": [
            "Enum"
          ],
          "methods": [],
          "decorators": []
        },
        {
          "name": "AIInstruction",
          "bases": [],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "event_type",
                "context"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A0DAE30>.strftime",
                "datetime.now",
                "<ast.Call object at 0x0000010C6A0D8070>.isoformat",
                "datetime.now"
              ]
            },
            {
              "name": "add_action",
              "args": [
                "self",
                "action_type",
                "params",
                "order",
                "depends_on"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "AI가 수행할 작업 추가",
              "calls": [
                "len",
                "len",
                "self.actions.append"
              ]
            },
            {
              "name": "set_priority",
              "args": [
                "self",
                "priority"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "우선순위 설정",
              "calls": []
            },
            {
              "name": "to_dict",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "딕셔너리로 변환",
              "calls": []
            },
            {
              "name": "save",
              "args": [
                "self",
                "filepath"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "지시서 저장",
              "calls": [
                "os.makedirs",
                "os.path.dirname",
                "os.path.exists",
                "open",
                "json.load",
                "instructions.append",
                "self.to_dict",
                "len",
                "open",
                "json.dump",
                "open",
                "json.dump",
                "self.to_dict"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "enum",
          "name": "Enum",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.automation_listeners": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\automation_listeners.py",
      "classes": [
        {
          "name": "TaskAutoProgressListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "workflow_manager",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A036890>.__init__",
                "super"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료 시 자동으로 다음 태스크 시작",
              "calls": [
                "hasattr",
                "self.workflow_manager.auto_start_next_task",
                "logger.info",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "PlanAutoArchiveListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "workflow_manager",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A037940>.__init__",
                "super"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 완료 시 자동 보관",
              "calls": [
                "hasattr",
                "self.workflow_manager.archive_completed_plan",
                "logger.info",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "ContextSyncListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "context_integration",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A0D8AF0>.__init__",
                "super"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "event.details.get",
                "self.context.sync_plan_summary",
                "self.context.sync_plan_summary",
                "self.context.record_event",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "AutoSaveListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "storage",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A0DAD40>.__init__",
                "super"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "list"
              ]
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "logger.debug",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "GitCommitListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A04D5A0>.__init__",
                "super"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "details.get",
                "self._auto_commit",
                "details.get",
                "self._auto_commit",
                "logger.error"
              ]
            },
            {
              "name": "_auto_commit",
              "args": [
                "self",
                "message"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "Git 자동 커밋 수행",
              "calls": [
                "logger.info"
              ]
            }
          ],
          "decorators": []
        },
        {
          "name": "AuditLogListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A04DB10>.__init__",
                "super",
                "Path"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "list"
              ]
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "hasattr",
                "str",
                "self.audit_entries.append",
                "len",
                "self._save_audit_log"
              ]
            },
            {
              "name": "_save_audit_log",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "감사 로그 저장",
              "calls": [
                "self.audit_log_path.exists",
                "open",
                "json.load",
                "existing.extend",
                "self.audit_log_path.parent.mkdir",
                "open",
                "json.dump",
                "self.audit_entries.clear",
                "logger.debug",
                "len",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "base",
          "name": "BaseEventListener",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.base": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\base.py",
      "classes": [
        {
          "name": "BaseEventListener",
          "bases": [
            "ABC"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "Args:\n    enabled: 리스너 활성화 여부",
              "calls": [
                "self.get_subscribed_events"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [
                "abstractmethod"
              ],
              "is_async": false,
              "docstring": "구독할 이벤트 타입 반환\n\nReturns:\n    구독할 EventType의 집합",
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [
                "abstractmethod"
              ],
              "is_async": false,
              "docstring": "이벤트 처리 로직\n\nArgs:\n    event: 처리할 워크플로우 이벤트\n\nReturns:\n    처리 결과 딕셔너리 (선택적)",
              "calls": []
            },
            {
              "name": "should_handle",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리 여부 결정\n\nArgs:\n    event: 확인할 이벤트\n\nReturns:\n    처리해야 하면 True",
              "calls": []
            },
            {
              "name": "on_error",
              "args": [
                "self",
                "event",
                "error"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 처리\n\nArgs:\n    event: 에러가 발생한 이벤트\n    error: 발생한 예외",
              "calls": [
                "logger.error"
              ]
            },
            {
              "name": "process",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리 래퍼 (메트릭 포함)\n\nArgs:\n    event: 처리할 이벤트\n\nReturns:\n    처리 결과",
              "calls": [
                "self.should_handle",
                "self.handle_event",
                "self.on_error"
              ]
            },
            {
              "name": "get_metrics",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "리스너 메트릭 반환\n\nReturns:\n    처리 통계 정보",
              "calls": [
                "len",
                "max"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "abc",
          "name": "ABC",
          "alias": null
        },
        {
          "module": "abc",
          "name": "abstractmethod",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Set",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "python.workflow.v3.models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "python.events.unified_event_types",
          "name": "EventType",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.context_listener": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\context_listener.py",
      "classes": [
        {
          "name": "ContextUpdateListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A035BA0>.__init__",
                "super",
                "Path"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "구독할 이벤트 타입",
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리",
              "calls": [
                "self.context_file.exists",
                "open",
                "json.load",
                "event.details.get",
                "hasattr",
                "event.timestamp.isoformat",
                "str",
                "event.details.get",
                "hasattr",
                "event.timestamp.isoformat",
                "str",
                "<ast.Subscript object at 0x0000010C6A036E00>.append",
                "event.details.get",
                "hasattr",
                "event.timestamp.isoformat",
                "str",
                "<ast.Call object at 0x0000010C6A04E200>.isoformat",
                "datetime.now",
                "self.context_file.parent.mkdir",
                "open",
                "json.dump",
                "logger.debug",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "base",
          "name": "BaseEventListener",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.docs_generator_listener": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\docs_generator_listener.py",
      "classes": [
        {
          "name": "DocsGeneratorListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A035090>.__init__",
                "super",
                "Path",
                "self.docs_dir.mkdir"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "구독할 이벤트 타입",
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리",
              "calls": [
                "self._generate_task_docs",
                "self._generate_plan_summary",
                "logger.error"
              ]
            },
            {
              "name": "_generate_task_docs",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 문서 생성",
              "calls": [
                "Path",
                "task_context_path.exists",
                "open",
                "json.load",
                "<ast.Call object at 0x0000010C6A0358A0>.get",
                "all_contexts.get",
                "logger.debug",
                "details.get",
                "task_context.get",
                "<ast.Call object at 0x0000010C6A00A290>.strftime",
                "datetime.now",
                "details.get",
                "details.get",
                "task_context.get",
                "details.get",
                "self._format_file_list",
                "task_context.get",
                "self._format_file_list",
                "task_context.get",
                "self._format_code_changes",
                "self._format_test_results",
                "task_context.get",
                "self._format_additional_info",
                "<ast.Call object at 0x0000010C6A00B490>.lower",
                "details.get",
                "<ast.Constant object at 0x0000010C6A00BFA0>.join",
                "c.isalnum",
                "<ast.Call object at 0x0000010C6A00BA30>.strftime",
                "datetime.now",
                "doc_path.write_text",
                "self.generated_docs.append",
                "str",
                "logger.info",
                "print"
              ]
            },
            {
              "name": "_generate_plan_summary",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 완료 시 요약 문서 생성",
              "calls": [
                "details.get",
                "details.get",
                "details.get",
                "details.get",
                "self._format_generated_docs",
                "details.get",
                "<ast.Call object at 0x0000010C6A04F5B0>.strftime",
                "datetime.now",
                "summary_path.write_text",
                "print"
              ]
            },
            {
              "name": "_format_file_list",
              "args": [
                "self",
                "files"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일 목록 포맷팅",
              "calls": [
                "<ast.Constant object at 0x0000010C6A04DAE0>.join"
              ]
            },
            {
              "name": "_format_code_changes",
              "args": [
                "self",
                "context"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "코드 변경사항 포맷팅",
              "calls": [
                "context.get",
                "context.get",
                "<ast.Constant object at 0x0000010C6A04DD20>.join"
              ]
            },
            {
              "name": "_format_test_results",
              "args": [
                "self",
                "results"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "테스트 결과 포맷팅",
              "calls": [
                "output.append",
                "output.append",
                "output.append",
                "<ast.Constant object at 0x0000010C6A0E4D00>.join"
              ]
            },
            {
              "name": "_format_additional_info",
              "args": [
                "self",
                "context",
                "details"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "추가 정보 포맷팅",
              "calls": [
                "context.get",
                "info.append",
                "info.append",
                "context.get",
                "info.append",
                "<ast.Subscript object at 0x0000010C6A0E4280>.items",
                "info.append",
                "details.get",
                "info.append",
                "info.append",
                "<ast.Constant object at 0x0000010C6A0E7A30>.join"
              ]
            },
            {
              "name": "_format_generated_docs",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "생성된 문서 목록",
              "calls": [
                "<ast.Constant object at 0x0000010C6A0E7D90>.join",
                "Path"
              ]
            },
            {
              "name": "get_generated_docs_count",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "생성된 문서 수 반환",
              "calls": [
                "len"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "base",
          "name": "BaseEventListener",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.error_collector_listener": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\error_collector_listener.py",
      "classes": [
        {
          "name": "ErrorCollectorListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A00BA60>.__init__",
                "super",
                "Path"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "구독할 이벤트 타입",
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리",
              "calls": [
                "self._collect_error"
              ]
            },
            {
              "name": "_collect_error",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "오류 수집",
              "calls": [
                "event.details.get",
                "<ast.Subscript object at 0x0000010C6A00A050>.append",
                "self.error_log_path.parent.mkdir",
                "self.error_log_path.write_text",
                "json.dumps",
                "print"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "base",
          "name": "BaseEventListener",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.error_instructor": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\error_instructor.py",
      "classes": [
        {
          "name": "ErrorInstructor",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A066560>.__init__",
                "super"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 이벤트를 AI 해결 지시로 변환",
              "calls": [
                "event.details.get",
                "event.details.get",
                "AIInstruction",
                "event.details.get",
                "event.details.get",
                "event.timestamp.isoformat",
                "self._add_file_not_found_actions",
                "self._add_permission_error_actions",
                "self._add_import_error_actions",
                "self._add_syntax_error_actions",
                "self._add_network_error_actions",
                "self._add_generic_error_actions",
                "instruction.add_action",
                "instruction.set_priority",
                "instruction.save",
                "print",
                "print",
                "len",
                "print"
              ]
            },
            {
              "name": "_add_file_not_found_actions",
              "args": [
                "self",
                "instruction",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "파일 없음 에러 해결 지시",
              "calls": [
                "self._extract_file_path",
                "event.details.get",
                "instruction.add_action",
                "instruction.add_action",
                "instruction.add_action"
              ]
            },
            {
              "name": "_add_permission_error_actions",
              "args": [
                "self",
                "instruction",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "권한 에러 해결 지시",
              "calls": [
                "instruction.add_action",
                "instruction.add_action"
              ]
            },
            {
              "name": "_add_import_error_actions",
              "args": [
                "self",
                "instruction",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "Import 에러 해결 지시",
              "calls": [
                "self._extract_module_name",
                "event.details.get",
                "instruction.add_action",
                "instruction.add_action",
                "instruction.add_action"
              ]
            },
            {
              "name": "_add_syntax_error_actions",
              "args": [
                "self",
                "instruction",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "문법 에러 해결 지시",
              "calls": [
                "instruction.add_action",
                "event.details.get",
                "event.details.get",
                "instruction.add_action"
              ]
            },
            {
              "name": "_add_network_error_actions",
              "args": [
                "self",
                "instruction",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "네트워크 에러 해결 지시",
              "calls": [
                "instruction.add_action",
                "instruction.add_action"
              ]
            },
            {
              "name": "_add_generic_error_actions",
              "args": [
                "self",
                "instruction",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "일반 에러 해결 지시",
              "calls": [
                "instruction.add_action",
                "event.details.get",
                "instruction.add_action",
                "instruction.add_action"
              ]
            },
            {
              "name": "_extract_file_path",
              "args": [
                "self",
                "error_message"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 메시지에서 파일 경로 추출",
              "calls": [
                "re.search",
                "match.group"
              ]
            },
            {
              "name": "_extract_module_name",
              "args": [
                "self",
                "error_message"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "에러 메시지에서 모듈명 추출",
              "calls": [
                "re.search",
                "<ast.Call object at 0x0000010C6A04F250>.split",
                "match.group"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "python.workflow.v3.listeners.base",
          "name": "BaseEventListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.ai_instruction_base",
          "name": "AIInstruction",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.ai_instruction_base",
          "name": "ActionType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.ai_instruction_base",
          "name": "Priority",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        },
        {
          "module": "re",
          "alias": null
        },
        {
          "module": "re",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.error_listener": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\error_listener.py",
      "classes": [
        {
          "name": "ErrorHandlerListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "workflow_manager",
                "retry_limit",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A009E40>.__init__",
                "super"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "구독할 이벤트 타입",
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리",
              "calls": [
                "self.retry_counts.get",
                "logger.info",
                "hasattr",
                "self.workflow_manager.retry_task",
                "logger.error",
                "hasattr",
                "self.workflow_manager.pause_plan",
                "logger.warning",
                "details.get",
                "hasattr",
                "self.workflow_manager.handle_blocked_task",
                "logger.error"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "base",
          "name": "BaseEventListener",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.error_report_listener": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\error_report_listener.py",
      "classes": [
        {
          "name": "ErrorReportListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A035540>.__init__",
                "super",
                "self.ensure_log_files"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "ensure_log_files",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "로그 파일 초기화",
              "calls": [
                "os.makedirs",
                "os.path.exists",
                "open",
                "json.dump",
                "os.path.exists",
                "open",
                "json.dump"
              ]
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "오류 이벤트 처리",
              "calls": [
                "<ast.Call object at 0x0000010C6A036770>.strftime",
                "datetime.now",
                "<ast.Call object at 0x0000010C6A037BE0>.isoformat",
                "datetime.now",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "self._suggest_actions",
                "self._determine_severity",
                "open",
                "json.load",
                "<ast.Subscript object at 0x0000010C6A035270>.append",
                "<ast.Call object at 0x0000010C6A0375B0>.isoformat",
                "datetime.now",
                "open",
                "json.dump",
                "open",
                "json.load",
                "history.append",
                "open",
                "json.dump",
                "print",
                "print"
              ]
            },
            {
              "name": "_suggest_actions",
              "args": [
                "self",
                "details"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "오류에 따른 권장 조치 제안",
              "calls": [
                "details.get",
                "suggestions.append",
                "suggestions.append",
                "suggestions.append",
                "suggestions.append",
                "suggestions.append",
                "suggestions.append",
                "suggestions.append",
                "suggestions.append",
                "suggestions.append",
                "suggestions.append",
                "suggestions.append"
              ]
            },
            {
              "name": "_determine_severity",
              "args": [
                "self",
                "details"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "오류 심각도 판단",
              "calls": [
                "details.get",
                "any",
                "any",
                "any"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "python.workflow.v3.listeners.base",
          "name": "BaseEventListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "traceback",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.task_completion_instructor": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\task_completion_instructor.py",
      "classes": [
        {
          "name": "TaskCompletionInstructor",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A034550>.__init__",
                "super"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료 이벤트를 AI 지시로 변환",
              "calls": [
                "AIInstruction",
                "event.details.get",
                "event.details.get",
                "event.timestamp.isoformat",
                "self._should_commit",
                "instruction.add_action",
                "event.details.get",
                "event.details.get",
                "instruction.add_action",
                "event.details.get",
                "self._create_report_message",
                "instruction.add_action",
                "self._should_update_docs",
                "instruction.add_action",
                "event.details.get",
                "event.details.get",
                "instruction.add_action",
                "next_task.get",
                "<ast.Call object at 0x0000010C6A00AB00>.lower",
                "event.details.get",
                "instruction.add_action",
                "event.details.get",
                "<ast.Call object at 0x0000010C6A00B430>.lower",
                "event.details.get",
                "instruction.set_priority",
                "instruction.save",
                "print",
                "len",
                "print",
                "event.details.get",
                "print",
                "print"
              ]
            },
            {
              "name": "_should_commit",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "Git 커밋이 필요한지 판단",
              "calls": [
                "<ast.Call object at 0x0000010C6A00A200>.lower",
                "event.details.get",
                "any"
              ]
            },
            {
              "name": "_should_update_docs",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "문서 업데이트가 필요한지 판단",
              "calls": [
                "<ast.Call object at 0x0000010C6A04FCD0>.lower",
                "event.details.get",
                "any"
              ]
            },
            {
              "name": "_create_report_message",
              "args": [
                "self",
                "event",
                "next_task"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "사용자 보고 메시지 생성",
              "calls": [
                "event.details.get",
                "event.timestamp.strftime",
                "event.details.get",
                "event.details.get",
                "next_task.get"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "python.workflow.v3.listeners.base",
          "name": "BaseEventListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.ai_instruction_base",
          "name": "AIInstruction",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.ai_instruction_base",
          "name": "ActionType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.ai_instruction_base",
          "name": "Priority",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.task_completion_listener": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\task_completion_listener.py",
      "classes": [
        {
          "name": "TaskCompletionListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A04D090>.__init__",
                "super",
                "self.ensure_log_file"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": []
            },
            {
              "name": "ensure_log_file",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "로그 파일 초기화",
              "calls": [
                "os.makedirs",
                "os.path.exists",
                "open",
                "json.dump"
              ]
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료 이벤트 처리",
              "calls": [
                "open",
                "json.load",
                "event.details.get",
                "<ast.Call object at 0x0000010C6A04F1C0>.isoformat",
                "datetime.now",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "completions.append",
                "len",
                "open",
                "json.dump",
                "print",
                "event.details.get",
                "print"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "python.workflow.v3.listeners.base",
          "name": "BaseEventListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.task_context_listener": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\task_context_listener.py",
      "classes": [
        {
          "name": "TaskContextListener",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self",
                "enabled"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A160CD0>.__init__",
                "super",
                "Path"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "구독할 이벤트 타입",
              "calls": []
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이벤트 처리",
              "calls": [
                "self._provide_task_context",
                "self._prepare_task_context",
                "logger.error"
              ]
            },
            {
              "name": "_prepare_task_context",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 추가 시 컨텍스트 준비",
              "calls": [
                "details.get",
                "self._find_similar_tasks",
                "<ast.Call object at 0x0000010C6A163040>.isoformat",
                "datetime.now",
                "logger.debug"
              ]
            },
            {
              "name": "_provide_task_context",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 시작 시 컨텍스트 제공",
              "calls": [
                "details.get",
                "self.task_contexts.get",
                "self._load_related_docs",
                "context.get",
                "self._load_previous_tasks",
                "self._load_project_context",
                "self._display_context",
                "self._update_task_context",
                "str",
                "context.get"
              ]
            },
            {
              "name": "_find_similar_tasks",
              "args": [
                "self",
                "task_title"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "유사한 이전 태스크 찾기",
              "calls": [
                "Path",
                "task_context_path.exists",
                "open",
                "json.load",
                "<ast.Call object at 0x0000010C6A0D8190>.items",
                "all_contexts.get",
                "context.get",
                "self._calculate_similarity",
                "similar_tasks.append",
                "context.get",
                "context.get",
                "logger.debug",
                "similar_tasks.sort"
              ]
            },
            {
              "name": "_calculate_similarity",
              "args": [
                "self",
                "text1",
                "text2"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "간단한 텍스트 유사도 계산",
              "calls": [
                "set",
                "<ast.Call object at 0x0000010C6A0348B0>.split",
                "text1.lower",
                "set",
                "<ast.Call object at 0x0000010C6A0342E0>.split",
                "text2.lower",
                "len",
                "len"
              ]
            },
            {
              "name": "_load_related_docs",
              "args": [
                "self",
                "task_title",
                "similar_tasks"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "관련 문서 로드",
              "calls": [
                "self.docs_dir.exists",
                "self.docs_dir.glob",
                "doc.exists",
                "related_docs.append",
                "<ast.Call object at 0x0000010C6A037580>.split",
                "task_title.lower",
                "self.docs_dir.glob",
                "doc.stem.lower",
                "any",
                "related_docs.append"
              ]
            },
            {
              "name": "_load_previous_tasks",
              "args": [
                "self",
                "task_title"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "이전 태스크 정보 로드",
              "calls": [
                "Path",
                "workflow_path.exists",
                "open",
                "json.load",
                "workflow_data.get",
                "plan.get",
                "task.get",
                "any",
                "<ast.Call object at 0x0000010C6A034FD0>.lower",
                "task.get",
                "<ast.Call object at 0x0000010C6A00ADA0>.split",
                "task_title.lower",
                "previous_tasks.append",
                "task.get",
                "task.get",
                "task.get",
                "logger.debug"
              ]
            },
            {
              "name": "_load_project_context",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "프로젝트 전체 컨텍스트 로드",
              "calls": [
                "Path",
                "context_path.exists",
                "open",
                "json.load",
                "logger.debug",
                "context.get",
                "context.get",
                "<ast.Call object at 0x0000010C6A009C60>.get",
                "context.get"
              ]
            },
            {
              "name": "_display_context",
              "args": [
                "self",
                "task_title",
                "related_docs",
                "previous_tasks",
                "project_context"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "컨텍스트 정보 표시",
              "calls": [
                "print",
                "len",
                "print",
                "print",
                "len",
                "print",
                "task.get",
                "print",
                "print",
                "project_context.get",
                "project_context.get"
              ]
            },
            {
              "name": "_update_task_context",
              "args": [
                "self",
                "task_id",
                "context_data"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "task_context.json 업데이트",
              "calls": [
                "Path",
                "task_context_path.exists",
                "open",
                "json.load",
                "<ast.Subscript object at 0x0000010C6A04ED40>.update",
                "open",
                "json.dump"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "logging",
          "alias": null
        },
        {
          "module": "models",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "models",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "base",
          "name": "BaseEventListener",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.workflow_instructor": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\workflow_instructor.py",
      "classes": [
        {
          "name": "WorkflowInstructor",
          "bases": [
            "BaseEventListener"
          ],
          "methods": [
            {
              "name": "__init__",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "<ast.Call object at 0x0000010C6A1EE500>.__init__",
                "super",
                "self._ensure_state_file"
              ]
            },
            {
              "name": "get_subscribed_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 주요 워크플로우 이벤트 구독",
              "calls": []
            },
            {
              "name": "_ensure_state_file",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 상태 파일 초기화",
              "calls": [
                "os.makedirs",
                "os.path.exists",
                "open",
                "json.dump"
              ]
            },
            {
              "name": "handle_event",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 이벤트별 AI 지시 생성",
              "calls": [
                "self._handle_plan_created",
                "self._handle_plan_started",
                "self._handle_task_started",
                "self._handle_task_completed",
                "self._handle_task_failed",
                "self._handle_plan_completed",
                "print"
              ]
            },
            {
              "name": "_handle_plan_created",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 생성 시 AI 지시",
              "calls": [
                "AIInstruction",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "instruction.add_action",
                "event.details.get",
                "instruction.add_action",
                "instruction.add_action",
                "instruction.save",
                "self._update_state"
              ]
            },
            {
              "name": "_handle_plan_started",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 시작 시 AI 지시",
              "calls": [
                "AIInstruction",
                "event.details.get",
                "event.details.get",
                "<ast.Call object at 0x0000010C6A162800>.lower",
                "<ast.Call object at 0x0000010C6A160E80>.replace",
                "event.details.get",
                "instruction.add_action",
                "event.details.get",
                "instruction.add_action",
                "instruction.save"
              ]
            },
            {
              "name": "_handle_task_started",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 시작 시 AI 지시",
              "calls": [
                "AIInstruction",
                "event.details.get",
                "instruction.add_action",
                "event.details.get",
                "<ast.Call object at 0x0000010C6A0D99C0>.lower",
                "event.details.get",
                "instruction.add_action",
                "instruction.add_action",
                "instruction.save",
                "self._update_state"
              ]
            },
            {
              "name": "_handle_task_completed",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 완료는 TaskCompletionInstructor가 처리하므로 여기서는 상태만 업데이트",
              "calls": [
                "self._update_state",
                "event.details.get",
                "event.timestamp.isoformat"
              ]
            },
            {
              "name": "_handle_task_failed",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "태스크 실패는 ErrorInstructor가 처리하므로 여기서는 복구 전략만 추가",
              "calls": [
                "AIInstruction",
                "event.details.get",
                "instruction.add_action",
                "instruction.set_priority",
                "instruction.save"
              ]
            },
            {
              "name": "_handle_plan_completed",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 완료 시 종합 보고 및 마무리 작업 지시",
              "calls": [
                "AIInstruction",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "instruction.add_action",
                "instruction.add_action",
                "event.details.get",
                "event.details.get",
                "instruction.add_action",
                "event.details.get",
                "event.details.get",
                "max",
                "event.details.get",
                "instruction.add_action",
                "event.details.get",
                "event.details.get",
                "event.details.get",
                "self._generate_achievements_summary",
                "instruction.add_action",
                "instruction.save",
                "self._update_state"
              ]
            },
            {
              "name": "_update_state",
              "args": [
                "self",
                "key",
                "value"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "워크플로우 상태 업데이트",
              "calls": [
                "open",
                "json.load",
                "os.path.getmtime",
                "open",
                "json.dump",
                "print"
              ]
            },
            {
              "name": "_generate_achievements_summary",
              "args": [
                "self",
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "플랜 성과 요약 생성",
              "calls": [
                "event.details.get",
                "achievements.append",
                "event.details.get",
                "event.details.get",
                "achievements.append",
                "event.details.get",
                "event.details.get",
                "achievements.append",
                "event.details.get",
                "<ast.Constant object at 0x0000010C6A00AAD0>.join"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [],
      "imports": [
        {
          "module": "python.workflow.v3.listeners.base",
          "name": "BaseEventListener",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.ai_instruction_base",
          "name": "AIInstruction",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.ai_instruction_base",
          "name": "ActionType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.listeners.ai_instruction_base",
          "name": "Priority",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "WorkflowEvent",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Optional",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "os",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.listeners.__init__": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\listeners\\__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        {
          "module": "base",
          "name": "BaseEventListener",
          "alias": null
        },
        {
          "module": "error_collector_listener",
          "name": "ErrorCollectorListener",
          "alias": null
        },
        {
          "module": "docs_generator_listener",
          "name": "DocsGeneratorListener",
          "alias": null
        },
        {
          "module": "task_context_listener",
          "name": "TaskContextListener",
          "alias": null
        },
        {
          "module": "error_listener",
          "name": "ErrorHandlerListener",
          "alias": null
        },
        {
          "module": "context_listener",
          "name": "ContextUpdateListener",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "workflow.v3.tests.test_event_publishing": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\workflow\\v3\\tests\\test_event_publishing.py",
      "classes": [
        {
          "name": "TestEventPublishing",
          "bases": [
            "unittest.TestCase"
          ],
          "methods": [
            {
              "name": "setUp",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "테스트 환경 설정",
              "calls": [
                "tempfile.mkdtemp",
                "Path",
                "self.memory_dir.mkdir",
                "self._register_event_capture",
                "WorkflowManager.clear_instance"
              ]
            },
            {
              "name": "tearDown",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "테스트 환경 정리",
              "calls": [
                "shutil.rmtree",
                "WorkflowManager.clear_instance",
                "event_bus._subscribers.clear"
              ]
            },
            {
              "name": "_register_event_capture",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "모든 이벤트를 캡처하는 핸들러 등록",
              "calls": []
            },
            {
              "name": "capture_event",
              "args": [
                "event"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": null,
              "calls": [
                "self.captured_events.append",
                "print"
              ]
            },
            {
              "name": "test_event_bus_basic",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "EventBus 기본 기능 테스트",
              "calls": [
                "print",
                "Event",
                "event_bus.publish",
                "self.assertEqual",
                "len",
                "self.assertEqual",
                "self.assertEqual",
                "print"
              ]
            },
            {
              "name": "test_workflow_manager_events",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "WorkflowManager의 이벤트 발행 테스트",
              "calls": [
                "print",
                "WorkflowManager",
                "wm.start_plan",
                "self.assertEqual",
                "len",
                "next",
                "self.assertEqual",
                "created_event.data.get",
                "wm.add_task",
                "self.assertEqual",
                "len",
                "self.assertEqual",
                "<ast.Subscript object at 0x0000010C6A0DB220>.data.get",
                "print",
                "len"
              ]
            },
            {
              "name": "test_task_context_integration",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "TaskContextManager 통합 테스트",
              "calls": [
                "print",
                "TaskContextManager",
                "str",
                "TaskContextEventHandlers",
                "handlers.register_all",
                "WorkflowManager",
                "wm.start_plan",
                "self.assertTrue",
                "context_file.exists",
                "open",
                "json.load",
                "self.assertIn",
                "context_data.get",
                "self.assertEqual",
                "print"
              ]
            },
            {
              "name": "test_event_chain",
              "args": [
                "self"
              ],
              "decorators": [],
              "is_async": false,
              "docstring": "전체 이벤트 체인 테스트",
              "calls": [
                "print",
                "TaskContextManager",
                "str",
                "TaskContextEventHandlers",
                "handlers.register_all",
                "WorkflowManager",
                "wm.start_plan",
                "wm.add_task",
                "wm.add_task",
                "EventBuilder.task_started",
                "wm._add_event",
                "wm.complete_task",
                "print",
                "len",
                "event_types.get",
                "print",
                "event_types.items",
                "print",
                "self.assertIn",
                "self.assertIn",
                "self.assertIn",
                "self.assertIn",
                "open",
                "json.load",
                "<ast.Subscript object at 0x0000010C6A04C8E0>.get",
                "self.assertIsNotNone",
                "self.assertEqual",
                "print"
              ]
            }
          ],
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "run_tests",
          "args": [],
          "decorators": [],
          "is_async": false,
          "docstring": "테스트 실행",
          "calls": [
            "<ast.Call object at 0x0000010C6A04CA30>.loadTestsFromTestCase",
            "unittest.TestLoader",
            "unittest.TextTestRunner",
            "runner.run",
            "result.wasSuccessful"
          ]
        }
      ],
      "imports": [
        {
          "module": "unittest",
          "alias": null
        },
        {
          "module": "json",
          "alias": null
        },
        {
          "module": "tempfile",
          "alias": null
        },
        {
          "module": "shutil",
          "alias": null
        },
        {
          "module": "pathlib",
          "name": "Path",
          "alias": null
        },
        {
          "module": "datetime",
          "name": "datetime",
          "alias": null
        },
        {
          "module": "typing",
          "name": "List",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        },
        {
          "module": "sys",
          "alias": null
        },
        {
          "module": "python.workflow.v3.manager",
          "name": "WorkflowManager",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_bus",
          "name": "event_bus",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_bus",
          "name": "Event",
          "alias": null
        },
        {
          "module": "python.workflow.v3.event_types",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "python.workflow.v3.task_context_manager",
          "name": "TaskContextManager",
          "alias": null
        },
        {
          "module": "python.workflow.v3.task_context_handlers",
          "name": "TaskContextEventHandlers",
          "alias": null
        },
        {
          "module": "python.workflow.v3.events",
          "name": "EventBuilder",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "events.unified_event_types": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\events\\unified_event_types.py",
      "classes": [
        {
          "name": "EventType",
          "bases": [
            "str",
            "Enum"
          ],
          "methods": [],
          "decorators": []
        },
        {
          "name": "EventTypes",
          "bases": [],
          "methods": [],
          "decorators": []
        }
      ],
      "functions": [
        {
          "name": "get_event_type",
          "args": [
            "old_style_event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "구 스타일 이벤트 문자열을 EventType enum으로 변환\n\nArgs:\n    old_style_event: 이전 스타일의 이벤트 문자열 (예: \"workflow.task.created\")\n    \nReturns:\n    대응하는 EventType enum 값\n    \nRaises:\n    ValueError: 매핑되지 않은 이벤트 타입인 경우",
          "calls": [
            "EventType",
            "ValueError"
          ]
        }
      ],
      "imports": [
        {
          "module": "enum",
          "name": "Enum",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Dict",
          "alias": null
        },
        {
          "module": "typing",
          "name": "Any",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    },
    "events.__init__": {
      "filepath": "C:\\Users\\82106\\Desktop\\ai-coding-brain-mcp\\python\\events\\__init__.py",
      "classes": [],
      "functions": [],
      "imports": [
        {
          "module": "unified_event_types",
          "name": "EventType",
          "alias": null
        },
        {
          "module": "unified_event_types",
          "name": "EventTypes",
          "alias": null
        },
        {
          "module": "unified_event_types",
          "name": "get_event_type",
          "alias": null
        }
      ],
      "event_handlers": [],
      "event_emits": []
    }
  },
  "class_definitions": {
    "core.cache_manager.CacheManager": {
      "name": "CacheManager",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "cache_dir"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "Path",
            "self.cache_dir.mkdir",
            "defaultdict",
            "Lock",
            "self._load_metadata"
          ]
        },
        {
          "name": "_load_metadata",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 메타데이터 로드",
          "calls": [
            "self.metadata_file.exists",
            "open",
            "json.load",
            "data.get",
            "data.get",
            "defaultdict",
            "deps.items",
            "set",
            "logger.error"
          ]
        },
        {
          "name": "_save_metadata",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 메타데이터 저장",
          "calls": [
            "list",
            "self._dependencies.items",
            "<ast.Call object at 0x0000010C6A054790>.isoformat",
            "datetime.now",
            "open",
            "json.dump",
            "logger.error"
          ]
        },
        {
          "name": "_calculate_file_hash",
          "args": [
            "self",
            "filepath"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일의 해시 계산",
          "calls": [
            "filepath.exists",
            "filepath.stat",
            "open",
            "<ast.Call object at 0x0000010C6A03C580>.hexdigest",
            "hashlib.md5",
            "f.read",
            "hashlib.md5",
            "open",
            "hasher.update",
            "f.read",
            "f.seek",
            "hasher.update",
            "f.read",
            "f.seek",
            "hasher.update",
            "f.read",
            "hasher.update",
            "<ast.Call object at 0x0000010C6A03F850>.encode",
            "str",
            "hasher.hexdigest",
            "logger.error"
          ]
        },
        {
          "name": "_is_file_changed",
          "args": [
            "self",
            "filepath"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일이 변경되었는지 확인",
          "calls": [
            "<ast.Call object at 0x0000010C6A03FF40>.resolve",
            "Path",
            "self._calculate_file_hash",
            "self._file_hashes.get",
            "str",
            "str"
          ]
        },
        {
          "name": "track_dependency",
          "args": [
            "self",
            "cache_key",
            "filepath"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 항목이 의존하는 파일 추적",
          "calls": [
            "<ast.Call object at 0x0000010C6A030A60>.resolve",
            "Path",
            "<ast.Subscript object at 0x0000010C6A030B80>.add",
            "str",
            "str",
            "self._calculate_file_hash",
            "str"
          ]
        },
        {
          "name": "check_invalidation",
          "args": [
            "self",
            "cache_key"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 항목이 무효화되어야 하는지 확인",
          "calls": [
            "self._dependencies.get",
            "set",
            "self._is_file_changed",
            "Path",
            "logger.info"
          ]
        },
        {
          "name": "get",
          "args": [
            "self",
            "key",
            "check_dependencies"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시에서 값 가져오기",
          "calls": [
            "self.check_invalidation",
            "self.invalidate",
            "cache_file.exists",
            "open",
            "json.load",
            "datetime.fromisoformat",
            "datetime.now",
            "self.invalidate",
            "data.get",
            "logger.error"
          ]
        },
        {
          "name": "set",
          "args": [
            "self",
            "key",
            "value",
            "ttl",
            "dependencies"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시에 값 저장",
          "calls": [
            "self.track_dependency",
            "<ast.Call object at 0x0000010C6A00A7D0>.isoformat",
            "datetime.now",
            "<ast.Call object at 0x0000010C6A00A830>.timestamp",
            "datetime.now",
            "open",
            "json.dump",
            "self._save_metadata",
            "logger.error"
          ]
        },
        {
          "name": "invalidate",
          "args": [
            "self",
            "key"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 캐시 항목 무효화",
          "calls": [
            "self._cache.pop",
            "cache_file.exists",
            "cache_file.unlink",
            "self._dependencies.pop",
            "logger.info"
          ]
        },
        {
          "name": "invalidate_by_file",
          "args": [
            "self",
            "filepath"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 파일에 의존하는 모든 캐시 무효화",
          "calls": [
            "<ast.Call object at 0x0000010C6A04C760>.resolve",
            "Path",
            "self._is_file_changed",
            "list",
            "self._dependencies.items",
            "str",
            "self.invalidate",
            "invalidated.append",
            "self._save_metadata"
          ]
        },
        {
          "name": "clear_all",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 캐시 삭제",
          "calls": [
            "self._cache.clear",
            "self._dependencies.clear",
            "self._file_hashes.clear",
            "self.cache_dir.glob",
            "cache_file.unlink",
            "self._save_metadata",
            "logger.info"
          ]
        },
        {
          "name": "get_statistics",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 통계",
          "calls": [
            "list",
            "self.cache_dir.glob",
            "sum",
            "f.stat",
            "len",
            "len",
            "len",
            "len",
            "str"
          ]
        }
      ],
      "decorators": []
    },
    "core.context_manager.CacheAPI": {
      "name": "CacheAPI",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "cache_manager"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Args:\n    cache_manager: CacheManager 인스턴스 또는 None",
          "calls": []
        },
        {
          "name": "get",
          "args": [
            "self",
            "key",
            "default"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시에서 값 조회",
          "calls": [
            "self._manager.get",
            "self._fallback_cache.get"
          ]
        },
        {
          "name": "set",
          "args": [
            "self",
            "key",
            "value",
            "ttl",
            "dependencies"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시에 값 저장",
          "calls": [
            "Path",
            "self._manager.set"
          ]
        },
        {
          "name": "invalidate",
          "args": [
            "self",
            "key"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 키 무효화",
          "calls": [
            "self._manager.invalidate",
            "self._fallback_cache.pop"
          ]
        },
        {
          "name": "invalidate_by_file",
          "args": [
            "self",
            "filepath"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일 변경에 따른 무효화",
          "calls": [
            "self._manager.invalidate_by_file",
            "Path",
            "list",
            "self._fallback_cache.keys",
            "self._fallback_cache.clear"
          ]
        },
        {
          "name": "clear",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "전체 캐시 클리어",
          "calls": [
            "self._manager.clear_all",
            "self._fallback_cache.clear"
          ]
        },
        {
          "name": "exists",
          "args": [
            "self",
            "key"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "키 존재 여부 확인",
          "calls": [
            "self._manager.get"
          ]
        },
        {
          "name": "get_stats",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 통계",
          "calls": [
            "self._manager.get_statistics",
            "len"
          ]
        },
        {
          "name": "set_with_file_dependency",
          "args": [
            "self",
            "key",
            "value",
            "filepath"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일 의존성과 함께 캐시 설정 (편의 메서드)",
          "calls": [
            "self.set"
          ]
        }
      ],
      "decorators": []
    },
    "core.context_manager.ContextManager": {
      "name": "ContextManager",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "get_current_project_name",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 프로젝트 이름을 반환합니다.",
          "calls": []
        },
        {
          "name": "cache",
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "레거시 호환성을 위한 캐시 접근자",
          "calls": [
            "hasattr",
            "hasattr"
          ]
        },
        {
          "name": "initialize",
          "args": [
            "self",
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트 매니저를 초기화합니다.",
          "calls": [
            "self.get_current_project_name",
            "CacheAPI",
            "self.get_current_project_name",
            "self.load_all"
          ]
        },
        {
          "name": "_ensure_cache_manager",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 매니저를 지연 초기화합니다 (필요할 때만)",
          "calls": [
            "get_cache_dir",
            "get_cache_manager",
            "hasattr",
            "logger.debug",
            "logger.warning"
          ]
        },
        {
          "name": "switch_project",
          "args": [
            "self",
            "new_project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트를 전환합니다.",
          "calls": [
            "print",
            "self.save_all",
            "print",
            "get_project_root",
            "project_root.exists",
            "ValueError",
            "switch_project_workflow",
            "self.load_all"
          ]
        },
        {
          "name": "load_all",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 데이터를 로드합니다.",
          "calls": [
            "self.get_current_project_name",
            "get_context_path",
            "context_path.exists",
            "read_json",
            "print",
            "len",
            "print",
            "self._migrate_old_cache",
            "get_workflow_path",
            "workflow_path.exists",
            "read_json",
            "print",
            "print",
            "self._migrate_old_workflow"
          ]
        },
        {
          "name": "save_all",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 데이터를 저장합니다.",
          "calls": [
            "get_context_path",
            "self.context.items",
            "os.path.join",
            "os.path.dirname",
            "os.makedirs",
            "os.path.join",
            "write_json",
            "<ast.Call object at 0x0000010C6A057970>.isoformat",
            "datetime.now",
            "Path",
            "print",
            "<ast.Call object at 0x0000010C6A057550>.isoformat",
            "datetime.now",
            "write_json",
            "Path",
            "print",
            "print",
            "get_workflow_path",
            "write_json",
            "Path",
            "print",
            "print"
          ]
        },
        {
          "name": "save",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "save_all의 별칭 (기존 코드 호환성)",
          "calls": [
            "self.save_all"
          ]
        },
        {
          "name": "_migrate_old_cache",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "기존 캐시 파일들을 새 구조로 마이그레이션합니다.",
          "calls": [
            "Path",
            "old_cache_dir.exists",
            "print",
            "core_file.exists",
            "open",
            "json.load",
            "analyzed_file.exists",
            "open",
            "json.load"
          ]
        },
        {
          "name": "_migrate_old_workflow",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "기존 워크플로우 데이터를 마이그레이션합니다.",
          "calls": [
            "Path",
            "old_workflow.exists",
            "open",
            "json.load",
            "print",
            "Path",
            "old_cache_dir.exists",
            "filepath.exists",
            "open",
            "<ast.Call object at 0x0000010C6A00B2B0>.replace",
            "cache_file.replace",
            "json.load"
          ]
        },
        {
          "name": "update_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트를 업데이트합니다.",
          "calls": [
            "len",
            "hasattr",
            "self._cache_api.set",
            "dependencies.append",
            "Path",
            "self._cache_manager.set",
            "self.context.update",
            "hasattr",
            "kwargs.items",
            "self._cache_api.set",
            "kwargs.items",
            "self._cache_manager.set"
          ]
        },
        {
          "name": "update_cache",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "update_context의 별칭 (기존 코드 호환성)",
          "calls": [
            "self.update_context"
          ]
        },
        {
          "name": "get_value",
          "args": [
            "self",
            "key",
            "default"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트에서 값을 가져옵니다.",
          "calls": [
            "hasattr",
            "str",
            "self._cache_api.get",
            "self.context.get",
            "hasattr",
            "str",
            "self._cache_api.set"
          ]
        },
        {
          "name": "get_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "전체 컨텍스트를 반환합니다 (최적화된 버전).",
          "calls": [
            "self.context.items"
          ]
        },
        {
          "name": "get",
          "args": [
            "self",
            "key",
            "default"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "get_value의 별칭",
          "calls": [
            "self.get_value"
          ]
        },
        {
          "name": "track_file_access",
          "args": [
            "self",
            "filepath"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일 접근을 추적합니다.",
          "calls": [
            "<ast.Call object at 0x0000010C6A04C430>.isoformat",
            "datetime.now",
            "<ast.Subscript object at 0x0000010C6A086B90>.append",
            "self._cache_manager.invalidate_by_file",
            "Path",
            "print",
            "len"
          ]
        },
        {
          "name": "track_function_edit",
          "args": [
            "self",
            "file",
            "function",
            "changes"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "함수 수정을 추적합니다.",
          "calls": [
            "<ast.Call object at 0x0000010C6A0877C0>.isoformat",
            "datetime.now",
            "<ast.Subscript object at 0x0000010C6A0878E0>.append"
          ]
        },
        {
          "name": "update_workflow_summary",
          "args": [
            "self",
            "summary"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 요약 정보 업데이트",
          "calls": [
            "hasattr",
            "summary.get",
            "summary.get",
            "summary.get",
            "summary.get",
            "<ast.Call object at 0x0000010C6A0D8460>.isoformat",
            "datetime.now",
            "self.save"
          ]
        },
        {
          "name": "add_workflow_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 이벤트 추가 (중요 이벤트만)",
          "calls": [
            "hasattr",
            "<ast.Subscript object at 0x0000010C6A0D8CA0>.append",
            "len",
            "self.save"
          ]
        },
        {
          "name": "get_task_context",
          "args": [
            "self",
            "task_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 태스크의 컨텍스트 조회",
          "calls": [
            "hasattr",
            "<ast.Subscript object at 0x0000010C6A0D9660>.get"
          ]
        },
        {
          "name": "clear_workflow_data",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 데이터 초기화",
          "calls": [
            "hasattr",
            "self.save"
          ]
        },
        {
          "name": "get_recent_workflow_events",
          "args": [
            "self",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "최근 워크플로우 이벤트 조회",
          "calls": [
            "hasattr"
          ]
        },
        {
          "name": "invalidate_cache",
          "args": [
            "self",
            "key"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 캐시 항목 무효화",
          "calls": [
            "hasattr",
            "self._cache_api.invalidate",
            "hasattr",
            "self._fallback_cache.pop",
            "self._ensure_cache_manager",
            "self._cache_manager.invalidate"
          ]
        },
        {
          "name": "invalidate_cache_by_file",
          "args": [
            "self",
            "filepath"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일 변경에 따른 캐시 무효화",
          "calls": [
            "self._ensure_cache_manager",
            "self._cache_manager.invalidate_by_file",
            "Path",
            "hasattr",
            "self._cache_api.clear",
            "hasattr",
            "self._fallback_cache.clear"
          ]
        },
        {
          "name": "get_cache_statistics",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 통계 조회",
          "calls": [
            "hasattr",
            "self._cache_api.get_stats",
            "len",
            "getattr",
            "self._ensure_cache_manager",
            "self._cache_manager.get_statistics",
            "stats.update"
          ]
        },
        {
          "name": "set_cache_with_dependencies",
          "args": [
            "self",
            "key",
            "value",
            "dependencies"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "의존성이 있는 캐시 항목 설정",
          "calls": [
            "hasattr",
            "self._cache_api.set_with_file_dependency",
            "self._ensure_cache_manager",
            "Path",
            "self._cache_manager.set"
          ]
        },
        {
          "name": "get_tracking",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "통합 tracking 데이터 반환",
          "calls": []
        },
        {
          "name": "get_file_access_history",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일 접근 이력 반환 (레거시 호환성)",
          "calls": [
            "self.get_tracking",
            "<ast.Subscript object at 0x0000010C6A0FDEA0>.items",
            "file_data.get",
            "history.append",
            "op.get",
            "sorted"
          ]
        },
        {
          "name": "get_error_log",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 로그 반환 (레거시 호환성)",
          "calls": [
            "self.get_tracking",
            "tracking.get"
          ]
        },
        {
          "name": "get_tracking_statistics",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "추적 통계 반환",
          "calls": [
            "self.get_tracking",
            "<ast.Call object at 0x0000010C6A0FEFB0>.copy",
            "tracking.get",
            "len",
            "tracking.get",
            "len",
            "tracking.get"
          ]
        }
      ],
      "decorators": []
    },
    "core.context_manager_refactored.ContextManager": {
      "name": "ContextManager",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "base_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "ContextManager 초기화",
          "calls": [
            "Path",
            "self.base_path.mkdir",
            "self._load_context",
            "self._register_event_handlers",
            "logger.info"
          ]
        },
        {
          "name": "_register_event_handlers",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 핸들러 등록",
          "calls": [
            "event_bus.subscribe",
            "event_bus.subscribe",
            "event_bus.subscribe",
            "event_bus.subscribe",
            "event_bus.subscribe",
            "logger.debug"
          ]
        },
        {
          "name": "switch_project",
          "args": [
            "self",
            "new_project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 전환 (이벤트 기반)\n\n더 이상 WorkflowManager를 직접 호출하지 않고,\nPROJECT_SWITCHED 이벤트를 발행합니다.",
          "calls": [
            "self.save_all",
            "logger.info",
            "self._load_context",
            "create_project_event",
            "<ast.Call object at 0x0000010C6A036A10>.isoformat",
            "datetime.now",
            "event_bus.publish",
            "logger.info",
            "create_context_event",
            "<ast.Call object at 0x0000010C6A05EA40>.isoformat",
            "datetime.now",
            "event_bus.publish",
            "logger.error"
          ]
        },
        {
          "name": "_on_project_loaded",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "PROJECT_LOADED 이벤트 핸들러",
          "calls": [
            "hasattr",
            "logger.info",
            "hasattr",
            "self.workflow_data.update",
            "self._save_workflow"
          ]
        },
        {
          "name": "_on_plan_created",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "PLAN_CREATED 이벤트 핸들러",
          "calls": [
            "hasattr",
            "event.payload.get",
            "event.payload.get",
            "event.timestamp.isoformat",
            "self.add_workflow_event",
            "event.timestamp.isoformat",
            "logger.debug"
          ]
        },
        {
          "name": "_on_plan_updated",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "PLAN_UPDATED 이벤트 핸들러",
          "calls": [
            "hasattr",
            "self.update_workflow_summary"
          ]
        },
        {
          "name": "_on_plan_completed",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "PLAN_COMPLETED 이벤트 핸들러",
          "calls": [
            "hasattr",
            "self.add_workflow_event",
            "event.payload.get",
            "event.timestamp.isoformat"
          ]
        },
        {
          "name": "_on_task_completed",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "TASK_COMPLETED 이벤트 핸들러",
          "calls": [
            "hasattr",
            "event.payload.get",
            "event.payload.get",
            "event.timestamp.isoformat",
            "self.add_workflow_event",
            "event.timestamp.isoformat"
          ]
        },
        {
          "name": "_load_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트 파일 로드",
          "calls": [
            "self.context_file.exists",
            "open",
            "json.load",
            "logger.debug",
            "logger.error",
            "self._load_workflow"
          ]
        },
        {
          "name": "_load_workflow",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 데이터 로드",
          "calls": [
            "self.workflow_file.exists",
            "open",
            "json.load",
            "logger.error"
          ]
        },
        {
          "name": "save_all",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 컨텍스트 데이터 저장",
          "calls": [
            "self._save_context",
            "self._save_workflow",
            "create_context_event",
            "<ast.Call object at 0x0000010C6A076CE0>.isoformat",
            "datetime.now",
            "event_bus.publish"
          ]
        },
        {
          "name": "_save_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트 파일 저장",
          "calls": [
            "self.context_file.exists",
            "open",
            "json.load",
            "open",
            "json.dump",
            "logger.debug",
            "logger.error"
          ]
        },
        {
          "name": "_save_workflow",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 데이터 저장",
          "calls": [
            "self.workflow_file.exists",
            "open",
            "json.load",
            "open",
            "json.dump",
            "logger.error"
          ]
        },
        {
          "name": "update_workflow_summary",
          "args": [
            "self",
            "summary"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 요약 정보 업데이트",
          "calls": [
            "<ast.Subscript object at 0x0000010C6A04E3E0>.update",
            "<ast.Call object at 0x0000010C6A04C4F0>.isoformat",
            "datetime.now",
            "self._save_workflow"
          ]
        },
        {
          "name": "add_workflow_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 이벤트 추가",
          "calls": [
            "<ast.Subscript object at 0x0000010C6A04C130>.append",
            "len",
            "self._save_workflow"
          ]
        },
        {
          "name": "get_task_context",
          "args": [
            "self",
            "task_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 태스크의 컨텍스트 조회",
          "calls": [
            "self.context_data.get",
            "task_contexts.get"
          ]
        },
        {
          "name": "clear_workflow_data",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 데이터 초기화",
          "calls": [
            "self._save_workflow"
          ]
        },
        {
          "name": "get_recent_workflow_events",
          "args": [
            "self",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "최근 워크플로우 이벤트 조회",
          "calls": [
            "self.workflow_data.get"
          ]
        },
        {
          "name": "cleanup",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "정리 작업 (이벤트 핸들러 제거)",
          "calls": [
            "event_bus.unsubscribe",
            "event_bus.unsubscribe",
            "event_bus.unsubscribe",
            "event_bus.unsubscribe",
            "event_bus.unsubscribe",
            "self.save_all",
            "logger.info"
          ]
        }
      ],
      "decorators": []
    },
    "core.error_reporter.ErrorReport": {
      "name": "ErrorReport",
      "bases": [],
      "methods": [],
      "decorators": [
        "dataclass"
      ]
    },
    "core.error_reporter.ErrorReporter": {
      "name": "ErrorReporter",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "report",
          "args": [
            "self",
            "error",
            "location",
            "cause",
            "attempted_solutions",
            "next_steps"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 보고 및 출력\n\nArgs:\n    error: 예외 객체 또는 에러 메시지\n    location: 에러 발생 위치\n    cause: 추정 원인\n    attempted_solutions: 시도한 해결책 목록\n    next_steps: 다음 단계 제안\n    \nReturns:\n    ErrorReport: 생성된 에러 보고",
          "calls": [
            "isinstance",
            "type",
            "str",
            "traceback.extract_tb",
            "str",
            "ErrorReport",
            "<ast.Call object at 0x0000010C6A034B80>.isoformat",
            "datetime.now",
            "self._print_report",
            "self._save_to_log"
          ]
        },
        {
          "name": "_print_report",
          "args": [
            "self",
            "report"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 보고를 콘솔에 출력",
          "calls": [
            "print",
            "self.report_template.format",
            "self._format_list",
            "self._format_list"
          ]
        },
        {
          "name": "_format_list",
          "args": [
            "self",
            "items"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스트를 포맷팅",
          "calls": [
            "<ast.Constant object at 0x0000010C6A04F910>.join",
            "enumerate"
          ]
        },
        {
          "name": "_save_to_log",
          "args": [
            "self",
            "report"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 로그 저장",
          "calls": [
            "<ast.Call object at 0x0000010C6A04EF50>.strftime",
            "datetime.now",
            "log_file.exists",
            "open",
            "json.load",
            "logs.append",
            "asdict",
            "open",
            "json.dump"
          ]
        }
      ],
      "decorators": []
    },
    "core.project_storage.ProjectStorageManager": {
      "name": "ProjectStorageManager",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "get_project_root",
            "get_memory_dir",
            "get_context_path",
            "get_workflow_path",
            "get_cache_dir",
            "get_backup_dir",
            "self.ensure_memory_structure"
          ]
        },
        {
          "name": "ensure_memory_structure",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "필수 디렉토리 구조 생성",
          "calls": [
            "ensure_dir",
            "logger.debug"
          ]
        },
        {
          "name": "load_project_state",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트의 모든 상태를 로드\n\nReturns:\n    {\n        'context': {...},\n        'workflow': {...},\n        'cache': {\n            'file_directory': [...],\n            'analyzed_files': [...],\n            'ast_cache': {...}\n        }\n    }",
          "calls": [
            "read_json",
            "read_json",
            "self.cache_files.items",
            "cache_path.exists",
            "read_json",
            "logger.info"
          ]
        },
        {
          "name": "save_project_state",
          "args": [
            "self",
            "context",
            "workflow",
            "cache_data"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 상태를 원자적으로 저장\n\nArgs:\n    context: context.json에 저장할 데이터\n    workflow: workflow.json에 저장할 데이터  \n    cache_data: 캐시 파일들에 저장할 데이터 (선택적)\n\nReturns:\n    성공 여부",
          "calls": [
            "<ast.Call object at 0x0000010C6A030400>.isoformat",
            "datetime.now",
            "write_json",
            "logger.error",
            "write_json",
            "logger.error",
            "cache_data.items",
            "write_json",
            "logger.warning",
            "logger.info",
            "logger.error"
          ]
        },
        {
          "name": "update_cache_file",
          "args": [
            "self",
            "cache_name",
            "data"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 캐시 파일 업데이트\n\nArgs:\n    cache_name: 캐시 이름 (file_directory, analyzed_files, ast_cache 등)\n    data: 저장할 데이터\n\nReturns:\n    성공 여부",
          "calls": [
            "logger.error",
            "<ast.Call object at 0x0000010C6A034070>.isoformat",
            "datetime.now",
            "write_json"
          ]
        },
        {
          "name": "get_cache_data",
          "args": [
            "self",
            "cache_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 캐시 데이터 읽기\n\nArgs:\n    cache_name: 캐시 이름\n\nReturns:\n    캐시 데이터 또는 None",
          "calls": [
            "cache_path.exists",
            "read_json",
            "isinstance",
            "cache_content.get"
          ]
        },
        {
          "name": "create_backup",
          "args": [
            "self",
            "include_cache"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 상태 백업 생성\n\nArgs:\n    include_cache: 캐시 파일도 백업할지 여부\n\nReturns:\n    백업 디렉토리 경로 또는 None",
          "calls": [
            "<ast.Call object at 0x0000010C6A036200>.strftime",
            "datetime.now",
            "self.context_path.exists",
            "ensure_dir",
            "backup_file",
            "self.workflow_path.exists",
            "ensure_dir",
            "backup_file",
            "ensure_dir",
            "self.cache_files.items",
            "cache_path.exists",
            "backup_file",
            "logger.info",
            "logger.error"
          ]
        },
        {
          "name": "get_file_paths",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 관리 파일 경로 반환",
          "calls": [
            "self.cache_files.items"
          ]
        },
        {
          "name": "get_storage_info",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "스토리지 상태 정보 반환",
          "calls": [
            "str",
            "<ast.Call object at 0x0000010C6A00AE00>.items",
            "self.get_file_paths",
            "path.is_file",
            "path.exists",
            "path.stat",
            "<ast.Call object at 0x0000010C6A00AE60>.isoformat",
            "datetime.fromtimestamp",
            "path.stat"
          ]
        },
        {
          "name": "clear_cache",
          "args": [
            "self",
            "cache_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 삭제\n\nArgs:\n    cache_name: 특정 캐시만 삭제 (None이면 모든 캐시)\n\nReturns:\n    성공 여부",
          "calls": [
            "cache_path.exists",
            "cache_path.unlink",
            "logger.info",
            "self.cache_files.items",
            "path.exists",
            "path.unlink",
            "logger.info",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.ai_instruction_executor.AIInstructionExecutor": {
      "name": "AIInstructionExecutor",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "instruction_file"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "Path"
          ]
        },
        {
          "name": "get_pending_instructions",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "대기 중인 지시서 목록 반환",
          "calls": [
            "self.instruction_file.exists",
            "open",
            "json.load",
            "data.get",
            "pending.sort",
            "priority_order.get",
            "x.get",
            "x.get",
            "logger.error"
          ]
        },
        {
          "name": "execute_next_instruction",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "다음 지시서를 실행",
          "calls": [
            "self.get_pending_instructions",
            "logger.info",
            "logger.info",
            "logger.info",
            "logger.info",
            "logger.info",
            "logger.info",
            "logger.info",
            "<ast.Call object at 0x0000010C6A030580>.isoformat",
            "datetime.now",
            "enumerate",
            "logger.info",
            "len",
            "self._execute_action",
            "<ast.Subscript object at 0x0000010C6A030F10>.append",
            "logger.info",
            "<ast.Subscript object at 0x0000010C6A0322C0>.append",
            "logger.error",
            "<ast.Subscript object at 0x0000010C6A032A10>.append",
            "str",
            "logger.error",
            "<ast.Call object at 0x0000010C6A0330A0>.isoformat",
            "datetime.now",
            "self._update_instruction_status",
            "logger.info",
            "logger.info",
            "logger.info",
            "len",
            "logger.info",
            "len",
            "logger.info"
          ]
        },
        {
          "name": "_execute_action",
          "args": [
            "self",
            "action"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "개별 작업 실행",
          "calls": [
            "action.get",
            "print",
            "print",
            "outputs.append",
            "str"
          ]
        },
        {
          "name": "_update_instruction_status",
          "args": [
            "self",
            "instruction_id",
            "status",
            "result"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "지시서 상태 업데이트",
          "calls": [
            "open",
            "json.load",
            "<ast.Subscript object at 0x0000010C6A04FB20>.append",
            "<ast.Subscript object at 0x0000010C6A04E230>.append",
            "<ast.Subscript object at 0x0000010C6A04F730>.remove",
            "open",
            "json.dump",
            "logger.error"
          ]
        },
        {
          "name": "execute_all_pending",
          "args": [
            "self",
            "max_count"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 대기 중인 지시 실행 (최대 개수 제한)",
          "calls": [
            "range",
            "self.execute_next_instruction",
            "results.append"
          ]
        },
        {
          "name": "get_execution_summary",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "실행 요약 정보 반환",
          "calls": [
            "self.instruction_file.exists",
            "open",
            "json.load",
            "len",
            "data.get",
            "len",
            "data.get",
            "len",
            "data.get",
            "data.get",
            "<ast.Subscript object at 0x0000010C6A00B5B0>.get",
            "data.get",
            "logger.error",
            "str"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.code_integration.WorkflowCodeIntegration": {
      "name": "WorkflowCodeIntegration",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "os.path.join",
            "WorkflowManager.get_instance",
            "CommandParser"
          ]
        },
        {
          "name": "get_current_task_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 태스크 컨텍스트 가져오기",
          "calls": [
            "self.manager.get_state",
            "state.current_plan.get_current_task"
          ]
        },
        {
          "name": "record_code_execution",
          "args": [
            "self",
            "code",
            "result",
            "execution_time"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "코드 실행 기록",
          "calls": [
            "self.manager.get_state",
            "state.current_plan.get_current_task",
            "current_task.add_note",
            "len",
            "result.get",
            "self.manager._save_data"
          ]
        },
        {
          "name": "auto_progress_task",
          "args": [
            "self",
            "completion_note"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 자동 진행",
          "calls": [
            "self.manager.execute_command",
            "str"
          ]
        },
        {
          "name": "get_workflow_status",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 상태 조회",
          "calls": [
            "self.manager.execute_command",
            "str"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.context_integration.ContextIntegration": {
      "name": "ContextIntegration",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "self._initialize"
          ]
        },
        {
          "name": "_initialize",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트 매니저 초기화",
          "calls": [
            "ContextManager",
            "hasattr",
            "logger.info",
            "logger.warning",
            "logger.error"
          ]
        },
        {
          "name": "is_available",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트 연동 가능 여부",
          "calls": []
        },
        {
          "name": "sync_plan_summary",
          "args": [
            "self",
            "plan"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 플랜의 요약 정보만 동기화\n\nArgs:\n    plan: 현재 워크플로우 플랜\n    \nReturns:\n    성공 여부",
          "calls": [
            "self.is_available",
            "len",
            "len",
            "plan.updated_at.isoformat",
            "self.context_manager.update_workflow_summary",
            "logger.debug",
            "logger.error"
          ]
        },
        {
          "name": "record_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "중요 이벤트만 컨텍스트에 기록\n\nArgs:\n    event: 워크플로우 이벤트\n    \nReturns:\n    성공 여부",
          "calls": [
            "self.is_available",
            "event.timestamp.isoformat",
            "self._extract_event_details",
            "self.context_manager.add_workflow_event",
            "logger.debug",
            "logger.error"
          ]
        },
        {
          "name": "_extract_event_details",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트에서 핵심 정보만 추출\n\nArgs:\n    event: 워크플로우 이벤트\n    \nReturns:\n    핵심 정보 딕셔너리",
          "calls": [
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "event.details.get"
          ]
        },
        {
          "name": "get_current_task_context",
          "args": [
            "self",
            "task"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 태스크의 컨텍스트 정보 조회\n\nArgs:\n    task: 현재 태스크\n    \nReturns:\n    태스크 컨텍스트 정보",
          "calls": [
            "self.is_available",
            "self.context_manager.get_task_context",
            "context.update",
            "logger.error"
          ]
        },
        {
          "name": "clear_workflow_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 관련 컨텍스트 정보 초기화\n\nReturns:\n    성공 여부",
          "calls": [
            "self.is_available",
            "self.context_manager.clear_workflow_data",
            "logger.info",
            "logger.error"
          ]
        },
        {
          "name": "get_recent_activity",
          "args": [
            "self",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "최근 워크플로우 활동 조회\n\nArgs:\n    limit: 조회할 활동 수\n    \nReturns:\n    최근 활동 목록",
          "calls": [
            "self.is_available",
            "self.context_manager.get_recent_workflow_events",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.context_integration.MockContextManager": {
      "name": "MockContextManager",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "update_workflow_summary",
          "args": [
            "self",
            "summary"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "add_workflow_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "self.workflow_events.append",
            "len"
          ]
        },
        {
          "name": "get_task_context",
          "args": [
            "self",
            "task_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "clear_workflow_data",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "self.workflow_events.clear"
          ]
        },
        {
          "name": "get_recent_workflow_events",
          "args": [
            "self",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        }
      ],
      "decorators": []
    },
    "workflow.v3.dispatcher.WorkflowDispatcher": {
      "name": "WorkflowDispatcher",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "project_name",
            "storage_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "WorkflowManager.get_instance",
            "CommandParser"
          ]
        },
        {
          "name": "execute",
          "args": [
            "self",
            "command"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "명령어 실행",
          "calls": [
            "self.manager.execute_command",
            "str",
            "str"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.enhanced_listener_integration.EnhancedListenerIntegration": {
      "name": "EnhancedListenerIntegration",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "workflow_manager",
            "helpers"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "initialize",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 시스템 초기화",
          "calls": [
            "hasattr",
            "WorkflowEventAdapter",
            "self._register_all_listeners",
            "logger.info",
            "logger.error"
          ]
        },
        {
          "name": "_register_all_listeners",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 리스너 자동 등록",
          "calls": [
            "TaskContextListener",
            "self._register_listener",
            "logger.info",
            "ErrorCollectorListener",
            "self._register_listener",
            "logger.info",
            "DocsGeneratorListener",
            "self._register_listener",
            "logger.info",
            "TaskAutoProgressListener",
            "self._register_listener",
            "logger.info",
            "PlanAutoArchiveListener",
            "self._register_listener",
            "logger.info",
            "ErrorHandlerListener",
            "self._register_listener",
            "logger.info",
            "logger.warning",
            "GitAutoCommitListener",
            "self._register_listener",
            "logger.info",
            "logger.warning"
          ]
        },
        {
          "name": "_register_listener",
          "args": [
            "self",
            "name",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "개별 리스너 등록",
          "calls": [
            "self.event_adapter.add_workflow_listener",
            "logger.error"
          ]
        },
        {
          "name": "get_status",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 시스템 상태 조회",
          "calls": [
            "list",
            "self.listeners.keys",
            "self.listeners.items",
            "hasattr"
          ]
        },
        {
          "name": "enable_listener",
          "args": [
            "self",
            "name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 리스너 활성화",
          "calls": [
            "hasattr",
            "logger.info"
          ]
        },
        {
          "name": "disable_listener",
          "args": [
            "self",
            "name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 리스너 비활성화",
          "calls": [
            "hasattr",
            "logger.info"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.enhanced_listener_integration.MockWorkflowManager": {
      "name": "MockWorkflowManager",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        }
      ],
      "decorators": []
    },
    "workflow.v3.errors.ErrorCode": {
      "name": "ErrorCode",
      "bases": [
        "Enum"
      ],
      "methods": [],
      "decorators": []
    },
    "workflow.v3.errors.WorkflowError": {
      "name": "WorkflowError",
      "bases": [
        "Exception"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "message",
            "code",
            "details"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A059F90>.__init__",
            "super"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.errors.ValidationError": {
      "name": "ValidationError",
      "bases": [
        "WorkflowError"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "message",
            "details"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A059AB0>.__init__",
            "super"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.errors.StorageError": {
      "name": "StorageError",
      "bases": [
        "WorkflowError"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "message",
            "details"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A0596C0>.__init__",
            "super"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.errors.ExecutionError": {
      "name": "ExecutionError",
      "bases": [
        "WorkflowError"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "message",
            "details"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A0592D0>.__init__",
            "super"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.errors.InputValidator": {
      "name": "InputValidator",
      "bases": [],
      "methods": [
        {
          "name": "validate_non_empty_string",
          "args": [
            "value",
            "field_name"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "비어있지 않은 문자열 검증",
          "calls": [
            "value.strip",
            "WorkflowError"
          ]
        },
        {
          "name": "validate_task_id",
          "args": [
            "task_id"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "태스크 ID 검증",
          "calls": [
            "InputValidator.validate_non_empty_string"
          ]
        },
        {
          "name": "validate_title",
          "args": [
            "title",
            "field_name"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "제목 검증 및 정리",
          "calls": [
            "title.strip",
            "ValidationError",
            "title.strip",
            "len",
            "ValidationError"
          ]
        },
        {
          "name": "validate_description",
          "args": [
            "description"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "설명 검증 및 정리",
          "calls": [
            "description.strip"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.errors.ErrorMessages": {
      "name": "ErrorMessages",
      "bases": [],
      "methods": [
        {
          "name": "get_message",
          "args": [
            "cls",
            "error_type"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "에러 메시지 포맷팅",
          "calls": [
            "getattr",
            "message.format"
          ]
        },
        {
          "name": "format_error",
          "args": [
            "cls",
            "error_type",
            "details"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "에러 정보를 포맷팅하여 반환",
          "calls": [
            "cls.get_message"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.errors.SuccessMessages": {
      "name": "SuccessMessages",
      "bases": [],
      "methods": [
        {
          "name": "get",
          "args": [
            "cls",
            "key"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "성공 메시지 가져오기 및 포맷팅",
          "calls": [
            "getattr",
            "message.format"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.errors.ErrorHandler": {
      "name": "ErrorHandler",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "handle_error",
          "args": [
            "self",
            "error",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러를 처리하고 표준화된 응답 반환",
          "calls": [
            "self._get_timestamp",
            "type",
            "str",
            "self.add_to_log",
            "isinstance",
            "error_info.update",
            "self._create_error_response"
          ]
        },
        {
          "name": "add_to_log",
          "args": [
            "self",
            "error_info"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 로그에 추가",
          "calls": [
            "self.error_log.append",
            "len",
            "self.error_log.pop"
          ]
        },
        {
          "name": "get_recent_errors",
          "args": [
            "self",
            "count"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "최근 에러들 반환",
          "calls": []
        },
        {
          "name": "clear_log",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 로그 초기화",
          "calls": [
            "self.error_log.clear"
          ]
        },
        {
          "name": "_get_timestamp",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 타임스탬프 반환",
          "calls": [
            "<ast.Call object at 0x0000010C6A067760>.isoformat",
            "datetime.now"
          ]
        },
        {
          "name": "_create_error_response",
          "args": [
            "self",
            "error_info"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 응답 생성",
          "calls": [
            "error_info.get",
            "error_info.get"
          ]
        },
        {
          "name": "create_validation_error",
          "args": [
            "cls",
            "message",
            "field"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "검증 에러 생성",
          "calls": [
            "ValidationError"
          ]
        },
        {
          "name": "create_storage_error",
          "args": [
            "cls",
            "message",
            "operation"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "저장소 에러 생성",
          "calls": [
            "StorageError"
          ]
        },
        {
          "name": "create_execution_error",
          "args": [
            "cls",
            "message",
            "command"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "실행 에러 생성",
          "calls": [
            "ExecutionError"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.events.EventProcessor": {
      "name": "EventProcessor",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "self._register_default_handlers"
          ]
        },
        {
          "name": "_register_default_handlers",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "기본 이벤트 핸들러 등록",
          "calls": []
        },
        {
          "name": "_default_handler",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "기본 이벤트 핸들러 - 로깅",
          "calls": [
            "logger.info"
          ]
        },
        {
          "name": "process",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리",
          "calls": [
            "self.handlers.get",
            "handler",
            "logger.error",
            "str"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.events.EventBuilder": {
      "name": "EventBuilder",
      "bases": [],
      "methods": [
        {
          "name": "plan_created",
          "args": [
            "plan",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "플랜 생성 이벤트",
          "calls": [
            "WorkflowEvent"
          ]
        },
        {
          "name": "plan_started",
          "args": [
            "plan",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "플랜 시작 이벤트",
          "calls": [
            "WorkflowEvent",
            "len"
          ]
        },
        {
          "name": "plan_completed",
          "args": [
            "plan",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "플랜 완료 이벤트",
          "calls": [
            "WorkflowEvent",
            "len",
            "len"
          ]
        },
        {
          "name": "plan_archived",
          "args": [
            "plan",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "플랜 아카이브 이벤트",
          "calls": [
            "WorkflowEvent",
            "plan.archived_at.isoformat",
            "<ast.Call object at 0x0000010C6A08B220>.isoformat",
            "datetime.now"
          ]
        },
        {
          "name": "task_added",
          "args": [
            "plan_id",
            "task",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "태스크 추가 이벤트",
          "calls": [
            "WorkflowEvent"
          ]
        },
        {
          "name": "task_started",
          "args": [
            "plan_id",
            "task",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "태스크 시작 이벤트",
          "calls": [
            "WorkflowEvent"
          ]
        },
        {
          "name": "task_completed",
          "args": [
            "plan_id",
            "task",
            "note",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "태스크 완료 이벤트",
          "calls": [
            "WorkflowEvent"
          ]
        },
        {
          "name": "task_cancelled",
          "args": [
            "plan_id",
            "task",
            "reason",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "태스크 취소 이벤트",
          "calls": [
            "WorkflowEvent"
          ]
        },
        {
          "name": "task_failed",
          "args": [
            "plan_id",
            "task",
            "error",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "태스크 실패 이벤트",
          "calls": [
            "WorkflowEvent"
          ]
        },
        {
          "name": "task_blocked",
          "args": [
            "plan_id",
            "task",
            "blocker",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "태스크 차단 이벤트",
          "calls": [
            "WorkflowEvent"
          ]
        },
        {
          "name": "task_unblocked",
          "args": [
            "plan_id",
            "task",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "태스크 차단 해제 이벤트",
          "calls": [
            "WorkflowEvent"
          ]
        },
        {
          "name": "task_updated",
          "args": [
            "plan_id",
            "task",
            "changes",
            "user"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "태스크 업데이트 이벤트",
          "calls": [
            "WorkflowEvent"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.events.EventStore": {
      "name": "EventStore",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "EventProcessor"
          ]
        },
        {
          "name": "add",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 추가",
          "calls": [
            "self.events.append",
            "self.processor.process"
          ]
        },
        {
          "name": "get_events_for_plan",
          "args": [
            "self",
            "plan_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 플랜의 이벤트 조회",
          "calls": []
        },
        {
          "name": "get_events_for_task",
          "args": [
            "self",
            "task_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 태스크의 이벤트 조회",
          "calls": []
        },
        {
          "name": "get_events_by_type",
          "args": [
            "self",
            "event_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 타입의 이벤트 조회",
          "calls": []
        },
        {
          "name": "get_recent_events",
          "args": [
            "self",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "최근 이벤트 조회",
          "calls": [
            "sorted"
          ]
        },
        {
          "name": "clear",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 이벤트 삭제",
          "calls": [
            "self.events.clear"
          ]
        },
        {
          "name": "to_list",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 목록을 딕셔너리 리스트로 변환",
          "calls": [
            "e.to_dict"
          ]
        },
        {
          "name": "from_list",
          "args": [
            "self",
            "events_data"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "딕셔너리 리스트에서 이벤트 복원",
          "calls": [
            "WorkflowEvent.from_dict"
          ]
        },
        {
          "name": "get_plan_summary",
          "args": [
            "self",
            "plan_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜의 이벤트 요약",
          "calls": [
            "self.get_events_for_plan",
            "len"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.events.GitAutoCommitListener": {
      "name": "GitAutoCommitListener",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "helpers"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Args:\n    helpers: helpers 객체 (Git 명령 실행용)",
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리 - Git 자동 커밋",
          "calls": [
            "self.helpers.git_status",
            "status.data.get",
            "self._generate_commit_message",
            "self.helpers.git_add",
            "self.helpers.git_commit",
            "logger.info",
            "logger.warning",
            "logger.warning",
            "logger.error"
          ]
        },
        {
          "name": "_generate_commit_message",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트에 따른 커밋 메시지 생성",
          "calls": [
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "messages.get",
            "event.details.get"
          ]
        },
        {
          "name": "set_enabled",
          "args": [
            "self",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "자동 커밋 활성화/비활성화",
          "calls": [
            "logger.info"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.events.EventBus": {
      "name": "EventBus",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "register",
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 등록",
          "calls": [
            "hasattr",
            "self.listeners.append",
            "logger.info",
            "logger.warning"
          ]
        },
        {
          "name": "unregister",
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 제거",
          "calls": [
            "self.listeners.remove",
            "logger.info"
          ]
        },
        {
          "name": "emit",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 리스너에 이벤트 전달",
          "calls": [
            "listener.handle_event",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.event_bus.Event": {
      "name": "Event",
      "bases": [],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 생성 후 처리",
          "calls": [
            "ValueError",
            "self.metadata.update",
            "self.timestamp.isoformat"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_bus.EventBus": {
      "name": "EventBus",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "EventBus 초기화",
          "calls": [
            "hasattr",
            "defaultdict",
            "Queue",
            "ThreadPoolExecutor",
            "logger.info"
          ]
        },
        {
          "name": "start",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리 시작",
          "calls": [
            "logger.warning",
            "threading.Thread",
            "self._processor_thread.start",
            "logger.info"
          ]
        },
        {
          "name": "stop",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리 중지",
          "calls": [
            "self._event_queue.put",
            "self._processor_thread.join",
            "self._executor.shutdown",
            "logger.info"
          ]
        },
        {
          "name": "subscribe",
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 핸들러 등록\n\nArgs:\n    event_type: 구독할 이벤트 타입\n    handler: 이벤트 처리 함수 (Event 객체를 받음)",
          "calls": [
            "callable",
            "ValueError",
            "type",
            "<ast.Subscript object at 0x0000010C6A067880>.append",
            "logger.debug"
          ]
        },
        {
          "name": "unsubscribe",
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 핸들러 제거\n\nArgs:\n    event_type: 구독 해제할 이벤트 타입\n    handler: 제거할 핸들러 함수",
          "calls": [
            "<ast.Subscript object at 0x0000010C6A066E90>.remove",
            "logger.debug"
          ]
        },
        {
          "name": "publish",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 발행 (비동기)\n\nArgs:\n    event: 발행할 이벤트 객체",
          "calls": [
            "hasattr",
            "hasattr",
            "ValueError",
            "type",
            "self._event_queue.put",
            "logger.debug"
          ]
        },
        {
          "name": "publish_sync",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 동기 발행 (테스트용)\n\nArgs:\n    event: 발행할 이벤트 객체\n\nReturns:\n    핸들러 실행 Future 리스트",
          "calls": [
            "self._handlers.get",
            "self._executor.submit",
            "futures.append"
          ]
        },
        {
          "name": "_process_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "백그라운드 이벤트 처리 루프",
          "calls": [
            "logger.info",
            "self._event_queue.get",
            "self._process_single_event",
            "logger.error",
            "logger.debug",
            "traceback.format_exc",
            "logger.info"
          ]
        },
        {
          "name": "_process_single_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "단일 이벤트 처리",
          "calls": [
            "self._handlers.get",
            "logger.debug",
            "logger.debug",
            "len",
            "self._executor.submit"
          ]
        },
        {
          "name": "_execute_handler",
          "args": [
            "self",
            "handler",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "핸들러 실행 (재시도 로직 포함)\n\nArgs:\n    handler: 실행할 핸들러 함수\n    event: 처리할 이벤트",
          "calls": [
            "handler",
            "logger.debug",
            "logger.error",
            "logger.debug",
            "traceback.format_exc",
            "self._handle_failed_event",
            "logger.warning",
            "time.sleep"
          ]
        },
        {
          "name": "_handle_failed_event",
          "args": [
            "self",
            "event",
            "handler",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "실패한 이벤트 처리\n\n향후 Dead Letter Queue 구현 시 여기에 추가",
          "calls": [
            "str",
            "traceback.format_exc",
            "<ast.Call object at 0x0000010C6A04C910>.isoformat",
            "datetime.now",
            "logger.error"
          ]
        },
        {
          "name": "get_stats",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리 통계 반환",
          "calls": [
            "self._stats.copy"
          ]
        },
        {
          "name": "get_handlers_count",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 타입별 핸들러 수 반환",
          "calls": [
            "len",
            "self._handlers.items"
          ]
        },
        {
          "name": "clear_handlers",
          "args": [
            "self",
            "event_type"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "핸들러 초기화\n\nArgs:\n    event_type: 특정 이벤트 타입만 초기화 (None이면 전체)",
          "calls": [
            "<ast.Subscript object at 0x0000010C6A04E0E0>.clear",
            "self._handlers.clear"
          ]
        },
        {
          "name": "__repr__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "len"
          ]
        },
        {
          "name": "reset",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "EventBus 리셋 (테스트용)",
          "calls": [
            "self.stop",
            "self._handlers.clear",
            "logger.info"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.event_types.EventType": {
      "name": "EventType",
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "decorators": []
    },
    "workflow.v3.event_types.Event": {
      "name": "Event",
      "bases": [],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 생성 후 처리",
          "calls": [
            "ValueError",
            "self.metadata.update",
            "self.timestamp.isoformat"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_types.WorkflowEvent": {
      "name": "WorkflowEvent",
      "bases": [
        "Event"
      ],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A088310>.__post_init__",
            "super"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_types.PlanEvent": {
      "name": "PlanEvent",
      "bases": [
        "WorkflowEvent"
      ],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A08BE20>.__post_init__",
            "super"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_types.TaskEvent": {
      "name": "TaskEvent",
      "bases": [
        "WorkflowEvent"
      ],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A0A9F90>.__post_init__",
            "super"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_types.ContextEvent": {
      "name": "ContextEvent",
      "bases": [
        "Event"
      ],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A0A8700>.__post_init__",
            "super"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_types.CommandEvent": {
      "name": "CommandEvent",
      "bases": [
        "Event"
      ],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A058850>.__post_init__",
            "super"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_types.ProjectEvent": {
      "name": "ProjectEvent",
      "bases": [
        "Event"
      ],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A05BFA0>.__post_init__",
            "super"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_types.FileEvent": {
      "name": "FileEvent",
      "bases": [
        "Event"
      ],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A05B9D0>.__post_init__",
            "super"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_types.GitEvent": {
      "name": "GitEvent",
      "bases": [
        "Event"
      ],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A059B70>.__post_init__",
            "super"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.event_types.SystemEvent": {
      "name": "SystemEvent",
      "bases": [
        "Event"
      ],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A0587C0>.__post_init__",
            "super"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager": {
      "name": "ListenerManager",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "event_bus"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Args:\n    event_bus: EventBus 인스턴스",
          "calls": [
            "defaultdict",
            "defaultdict"
          ]
        },
        {
          "name": "register_listener",
          "args": [
            "self",
            "name",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 등록\n\nArgs:\n    name: 리스너 이름\n    listener: BaseEventListener 인스턴스",
          "calls": [
            "logger.warning",
            "self.unregister_listener",
            "listener.get_subscribed_events",
            "self._create_handler_wrapper",
            "self.event_bus.subscribe",
            "<ast.Subscript object at 0x0000010C6A08B670>.append",
            "logger.info",
            "len",
            "listener.get_subscribed_events"
          ]
        },
        {
          "name": "unregister_listener",
          "args": [
            "self",
            "name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 등록 해제\n\nArgs:\n    name: 리스너 이름",
          "calls": [
            "logger.warning",
            "self.event_bus.unsubscribe",
            "logger.info"
          ]
        },
        {
          "name": "_create_handler_wrapper",
          "args": [
            "self",
            "name",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "메트릭 수집을 포함한 핸들러 래퍼 생성\n\nArgs:\n    name: 리스너 이름\n    listener: 리스너 인스턴스\n\nReturns:\n    래핑된 핸들러 함수",
          "calls": []
        },
        {
          "name": "wrapper",
          "args": [
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "time.time",
            "time.time",
            "self._convert_to_workflow_event",
            "listener.process",
            "time.time",
            "logger.debug",
            "time.time",
            "logger.error"
          ]
        },
        {
          "name": "_convert_to_workflow_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Event를 WorkflowEvent로 변환\n\nArgs:\n    event: EventBus의 Event 객체\n\nReturns:\n    WorkflowEvent 객체",
          "calls": [
            "isinstance",
            "EventType",
            "WorkflowEvent",
            "getattr",
            "getattr",
            "hasattr",
            "event.payload.get",
            "hasattr",
            "event.payload.get",
            "hasattr",
            "event.payload.get",
            "hasattr",
            "event.payload.items"
          ]
        },
        {
          "name": "get_metrics",
          "args": [
            "self",
            "name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 메트릭 조회\n\nArgs:\n    name: 특정 리스너 이름 (None이면 전체)\n\nReturns:\n    메트릭 정보",
          "calls": [
            "<ast.Subscript object at 0x0000010C6A04F640>.copy",
            "<ast.Subscript object at 0x0000010C6A04CFD0>.get_metrics",
            "metrics.update",
            "self.get_metrics",
            "sum",
            "all_metrics.values",
            "sum",
            "all_metrics.values",
            "sum",
            "all_metrics.values",
            "len"
          ]
        },
        {
          "name": "enable_listener",
          "args": [
            "self",
            "name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 활성화",
          "calls": [
            "logger.info"
          ]
        },
        {
          "name": "disable_listener",
          "args": [
            "self",
            "name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 비활성화",
          "calls": [
            "logger.info"
          ]
        },
        {
          "name": "get_listener_status",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 리스너의 활성화 상태 반환",
          "calls": [
            "self.listeners.items"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.manager.WorkflowManager": {
      "name": "WorkflowManager",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "project_name",
            "enable_listeners"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트별 워크플로우 관리자 초기화",
          "calls": [
            "WorkflowState",
            "EventStore",
            "CommandParser",
            "WorkflowStorage",
            "ContextIntegration",
            "WorkflowEventAdapter",
            "EventBus",
            "ListenerManager",
            "EnhancedListenerIntegration",
            "self.listener_integration.initialize",
            "logger.info",
            "logger.error",
            "logger.info",
            "self.listener_integration.get_status",
            "logger.info",
            "<ast.Constant object at 0x0000010C6A1482E0>.join",
            "TaskContextManager",
            "TaskContextEventHandlers",
            "task_handlers.register_all",
            "logger.info",
            "logger.warning",
            "logger.debug",
            "traceback.format_exc",
            "InternalWorkflowAPI",
            "UserCommandAPI",
            "self._load_data",
            "self.context.sync_plan_summary"
          ]
        },
        {
          "name": "get_instance",
          "args": [
            "cls",
            "project_name"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "프로젝트별 싱글톤 인스턴스 반환",
          "calls": [
            "logger.info",
            "cls",
            "instance.storage.main_file.exists",
            "instance.storage.main_file.stat",
            "hasattr",
            "logger.info",
            "instance.reload"
          ]
        },
        {
          "name": "clear_instance",
          "args": [
            "cls",
            "project_name"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "인스턴스 캐시 무효화\n\nArgs:\n    project_name: 특정 프로젝트만 제거. None이면 모든 캐시 제거",
          "calls": [
            "logger.info",
            "cls._instances.clear",
            "logger.info"
          ]
        },
        {
          "name": "invalidate_and_reload",
          "args": [
            "cls",
            "project_name"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "인스턴스 캐시 무효화 후 새로 로드\n\nArgs:\n    project_name: 프로젝트 이름\n\nReturns:\n    새로 로드된 WorkflowManager 인스턴스",
          "calls": [
            "cls.clear_instance",
            "cls.get_instance"
          ]
        },
        {
          "name": "_load_data",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "저장된 데이터 로드",
          "calls": [
            "self.storage.load",
            "WorkflowState.from_dict",
            "logger.info",
            "hasattr",
            "len",
            "hasattr",
            "hasattr",
            "self.event_store.from_list",
            "self.event_store.from_list",
            "logger.info",
            "len",
            "logger.warning",
            "EventStore",
            "logger.error",
            "logger.error",
            "traceback.format_exc",
            "WorkflowState",
            "EventStore",
            "WorkflowState",
            "EventStore"
          ]
        },
        {
          "name": "_save_data",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "데이터를 파일에 저장",
          "calls": [
            "datetime.now",
            "self.storage.save",
            "self.state.to_dict",
            "logger.info",
            "logger.warning",
            "logger.error"
          ]
        },
        {
          "name": "start_plan",
          "args": [
            "self",
            "name",
            "description"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "새 플랜 시작",
          "calls": [
            "self.archive_plan",
            "WorkflowPlan",
            "plan.start",
            "self._add_event",
            "EventBuilder.plan_created",
            "self._add_event",
            "EventBuilder.plan_started",
            "self.context.sync_plan_summary",
            "self.context.record_event",
            "self.context.record_event",
            "self._save_data",
            "logger.error"
          ]
        },
        {
          "name": "add_task",
          "args": [
            "self",
            "title",
            "description"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 플랜에 태스크 추가",
          "calls": [
            "logger.error",
            "Task",
            "self.state.current_plan.tasks.append",
            "datetime.now",
            "EventBuilder.task_added",
            "self._add_event",
            "self.context.sync_plan_summary",
            "self._save_data",
            "logger.error"
          ]
        },
        {
          "name": "add_task_note",
          "args": [
            "self",
            "note",
            "task_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 태스크 또는 지정된 태스크에 노트 추가",
          "calls": [
            "logger.warning",
            "logger.warning",
            "self.get_current_task",
            "logger.warning",
            "task.notes.append",
            "datetime.now",
            "WorkflowEvent",
            "self.state.add_event",
            "self._add_event",
            "self._save_data",
            "logger.info"
          ]
        },
        {
          "name": "complete_task",
          "args": [
            "self",
            "task_id",
            "note"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료 처리",
          "calls": [
            "logger.error",
            "task.complete",
            "datetime.now",
            "EventBuilder.task_completed",
            "self._add_event",
            "self.context.record_event",
            "self.is_plan_completed",
            "self.state.current_plan.complete",
            "EventBuilder.plan_completed",
            "self._add_event",
            "self.context.record_event",
            "self.context.sync_plan_summary",
            "self._save_data"
          ]
        },
        {
          "name": "complete_current_task",
          "args": [
            "self",
            "note"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 태스크 완료하고 다음 태스크 반환",
          "calls": [
            "self.get_current_task",
            "self.complete_task",
            "self.get_current_task"
          ]
        },
        {
          "name": "fail_task",
          "args": [
            "self",
            "task_id",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 실패 처리",
          "calls": [
            "logger.error",
            "task.fail",
            "datetime.now",
            "EventBuilder.task_failed",
            "self._add_event",
            "self.context.sync_plan_summary",
            "self._save_data"
          ]
        },
        {
          "name": "block_task",
          "args": [
            "self",
            "task_id",
            "blocker"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 차단 처리",
          "calls": [
            "logger.error",
            "task.block",
            "datetime.now",
            "EventBuilder.task_blocked",
            "self._add_event",
            "self.context.sync_plan_summary",
            "self._save_data"
          ]
        },
        {
          "name": "unblock_task",
          "args": [
            "self",
            "task_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 차단 해제 처리",
          "calls": [
            "logger.error",
            "task.unblock",
            "datetime.now",
            "EventBuilder.task_unblocked",
            "self._add_event",
            "self.context.sync_plan_summary",
            "self._save_data"
          ]
        },
        {
          "name": "cancel_task",
          "args": [
            "self",
            "task_id",
            "reason"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 취소 처리",
          "calls": [
            "logger.error",
            "task.cancel",
            "datetime.now",
            "EventBuilder.task_cancelled",
            "self._add_event",
            "self.context.sync_plan_summary",
            "self._save_data"
          ]
        },
        {
          "name": "archive_plan",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 플랜 아카이브",
          "calls": [
            "self.state.current_plan.archive",
            "EventBuilder.plan_archived",
            "self._add_event",
            "self.context.record_event",
            "self.context.sync_plan_summary",
            "self._save_data"
          ]
        },
        {
          "name": "get_current_task",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 작업 중인 태스크 반환",
          "calls": [
            "self.state.current_plan.get_current_task"
          ]
        },
        {
          "name": "get_task_by_number",
          "args": [
            "self",
            "number"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "번호로 태스크 조회 (1부터 시작)",
          "calls": [
            "len"
          ]
        },
        {
          "name": "is_plan_completed",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜의 모든 태스크가 완료되었는지 확인",
          "calls": []
        },
        {
          "name": "get_status",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 상태 정보",
          "calls": [
            "len",
            "len",
            "self.get_current_task",
            "hasattr",
            "str",
            "int",
            "hasattr",
            "str",
            "plan.created_at.isoformat",
            "plan.updated_at.isoformat"
          ]
        },
        {
          "name": "get_tasks",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 플랜의 태스크 목록",
          "calls": [
            "enumerate",
            "tasks.append",
            "task.created_at.isoformat",
            "task.completed_at.isoformat"
          ]
        },
        {
          "name": "get_plan_history",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 히스토리 (이벤트 로그 기반)",
          "calls": [
            "self.state.get_plan_history"
          ]
        },
        {
          "name": "get_recent_events",
          "args": [
            "self",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "최근 이벤트 목록",
          "calls": [
            "self.event_store.get_recent_events",
            "e.to_dict"
          ]
        },
        {
          "name": "execute_command",
          "args": [
            "self",
            "command_str"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "명령어 문자열 실행 (개선된 버전)",
          "calls": [
            "hasattr",
            "self.user_api.execute_command",
            "self.parser.parse",
            "self.command_handlers.get",
            "handler",
            "WorkflowError",
            "ErrorMessages.get",
            "HelperResult",
            "e.to_dict",
            "HelperResult",
            "str",
            "logger.exception",
            "ErrorHandler.handle_error",
            "HelperResult"
          ]
        },
        {
          "name": "_handle_start",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "start 명령 처리",
          "calls": [
            "self.start_plan",
            "HelperResult",
            "SuccessMessages.get",
            "HelperResult",
            "HelperResult",
            "HelperResult"
          ]
        },
        {
          "name": "_handle_focus",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "focus 명령 처리",
          "calls": [
            "HelperResult",
            "self.get_current_task",
            "HelperResult",
            "HelperResult",
            "self.get_task_by_number",
            "enumerate",
            "self._save_data",
            "HelperResult",
            "HelperResult"
          ]
        },
        {
          "name": "_handle_plan",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "plan 명령 처리",
          "calls": [
            "self.get_plan_history",
            "HelperResult",
            "len",
            "parsed.args.get",
            "self.archive_plan",
            "self.start_plan",
            "HelperResult",
            "HelperResult",
            "self.get_status",
            "isinstance",
            "hasattr",
            "hasattr",
            "HelperResult",
            "HelperResult"
          ]
        },
        {
          "name": "_handle_task",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "task 명령 처리",
          "calls": [
            "WorkflowError",
            "ErrorMessages.get",
            "self._handle_focus",
            "self.get_tasks",
            "HelperResult",
            "len",
            "len",
            "t.get",
            "len",
            "parsed.args.get",
            "HelperResult",
            "self.add_task_note",
            "HelperResult",
            "HelperResult",
            "parsed.title.strip",
            "HelperResult",
            "self.add_task",
            "len",
            "HelperResult",
            "HelperResult",
            "self.add_task",
            "len",
            "HelperResult",
            "HelperResult",
            "HelperResult",
            "self.get_tasks",
            "HelperResult",
            "len"
          ]
        },
        {
          "name": "_handle_next",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "next 명령 처리",
          "calls": [
            "HelperResult",
            "self.get_current_task",
            "HelperResult",
            "HelperResult",
            "parsed.args.get",
            "self.complete_current_task",
            "len",
            "sum",
            "int",
            "HelperResult"
          ]
        },
        {
          "name": "_handle_build",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "build 명령 처리 - 개선된 버전",
          "calls": [
            "Path.cwd",
            "str",
            "Path.cwd",
            "os.walk",
            "len",
            "len",
            "HelperResult",
            "self.get_status",
            "self.get_recent_events",
            "HelperResult",
            "self.get_current_task",
            "HelperResult",
            "HelperResult",
            "self.get_status",
            "<ast.Call object at 0x0000010C6A1CAB30>.exists",
            "Path",
            "HelperResult"
          ]
        },
        {
          "name": "_handle_status",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "status 명령 처리",
          "calls": [
            "self.get_plan_history",
            "self.get_recent_events",
            "HelperResult",
            "len",
            "len",
            "self.get_status",
            "HelperResult",
            "status.get",
            "self.get_tasks",
            "self.get_recent_events",
            "HelperResult",
            "len",
            "len",
            "len",
            "len"
          ]
        },
        {
          "name": "clear_cache",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "캐시 클리어 (필요시 구현)",
          "calls": []
        },
        {
          "name": "save",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 상태를 파일에 저장 (public 메서드)",
          "calls": [
            "self._save_data"
          ]
        },
        {
          "name": "reload",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "데이터 다시 로드",
          "calls": [
            "self._load_data"
          ]
        },
        {
          "name": "export_data",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "전체 데이터 내보내기",
          "calls": [
            "self.state.to_dict"
          ]
        },
        {
          "name": "import_data",
          "args": [
            "self",
            "data"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "데이터 가져오기",
          "calls": [
            "WorkflowState.from_dict",
            "self.event_store.from_list",
            "self._save_data",
            "logger.error"
          ]
        },
        {
          "name": "cleanup",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리소스 정리 및 이벤트 어댑터 해제",
          "calls": [
            "hasattr",
            "self.event_adapter.cleanup",
            "logger.info",
            "hasattr",
            "self.listener_manager.get_metrics",
            "metrics.get",
            "logger.info"
          ]
        },
        {
          "name": "_add_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트를 EventStore에 추가하고 EventBus로 발행",
          "calls": [
            "self.event_store.add",
            "hasattr",
            "isinstance",
            "WorkflowEvent",
            "event.get",
            "event.get",
            "event.get",
            "event.get",
            "event.get",
            "event.get",
            "self.event_adapter.publish_workflow_event",
            "self.event_adapter.publish_workflow_event",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.models.TaskStatus": {
      "name": "TaskStatus",
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "decorators": []
    },
    "workflow.v3.models.PlanStatus": {
      "name": "PlanStatus",
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "decorators": []
    },
    "workflow.v3.models.WorkflowEvent": {
      "name": "WorkflowEvent",
      "bases": [],
      "methods": [
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트를 딕셔너리로 변환",
          "calls": [
            "self.timestamp.isoformat"
          ]
        },
        {
          "name": "from_dict",
          "args": [
            "cls",
            "data"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "딕셔너리에서 이벤트 생성",
          "calls": [
            "data.get",
            "<ast.Call object at 0x0000010C6A10E5C0>.isoformat",
            "datetime.now",
            "datetime.fromisoformat",
            "timestamp.replace",
            "datetime.now",
            "cls",
            "data.get",
            "str",
            "uuid.uuid4",
            "EventType",
            "data.get",
            "data.get",
            "data.get",
            "data.get",
            "data.get",
            "data.get"
          ]
        },
        {
          "name": "create_plan_event",
          "args": [
            "cls",
            "event_type",
            "plan"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "플랜 관련 이벤트 생성 헬퍼",
          "calls": [
            "cls"
          ]
        },
        {
          "name": "create_task_event",
          "args": [
            "cls",
            "event_type",
            "task",
            "plan_id"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "태스크 관련 이벤트 생성 헬퍼",
          "calls": [
            "cls"
          ]
        },
        {
          "name": "create_note_event",
          "args": [
            "cls",
            "event_type",
            "task_id",
            "plan_id",
            "note"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "노트 관련 이벤트 생성 헬퍼",
          "calls": [
            "<ast.Call object at 0x0000010C6A0B1ED0>.isoformat",
            "datetime.now",
            "cls"
          ]
        },
        {
          "name": "create_system_event",
          "args": [
            "cls",
            "event_type",
            "message",
            "plan_id"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "시스템 관련 이벤트 생성 헬퍼",
          "calls": [
            "<ast.Call object at 0x0000010C6A0B2620>.isoformat",
            "datetime.now",
            "cls"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.models.Task": {
      "name": "Task",
      "bases": [],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "생성 후 검증",
          "calls": [
            "InputValidator.validate_title",
            "InputValidator.validate_description",
            "self.title.strip",
            "ValueError",
            "self.title.strip",
            "len",
            "ValueError"
          ]
        },
        {
          "name": "start",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 시작",
          "calls": [
            "datetime.now",
            "datetime.now"
          ]
        },
        {
          "name": "complete",
          "args": [
            "self",
            "note"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료",
          "calls": [
            "datetime.now",
            "datetime.now",
            "int",
            "<ast.BinOp object at 0x0000010C6A0F7D90>.total_seconds",
            "self.notes.append"
          ]
        },
        {
          "name": "fail",
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 실패",
          "calls": [
            "datetime.now",
            "self.notes.append"
          ]
        },
        {
          "name": "block",
          "args": [
            "self",
            "blocker"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 차단",
          "calls": [
            "<ast.Call object at 0x0000010C6A0F4400>.isoformat",
            "datetime.now",
            "datetime.now",
            "self.notes.append"
          ]
        },
        {
          "name": "unblock",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 차단 해제",
          "calls": [
            "self.outputs.pop",
            "TaskStatus",
            "datetime.now",
            "self.notes.append"
          ]
        },
        {
          "name": "cancel",
          "args": [
            "self",
            "reason"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 취소",
          "calls": [
            "datetime.now",
            "self.notes.append",
            "self.notes.append"
          ]
        },
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "객체를 딕셔너리로 변환",
          "calls": [
            "self.created_at.isoformat",
            "self.updated_at.isoformat",
            "self.started_at.isoformat",
            "self.completed_at.isoformat"
          ]
        },
        {
          "name": "from_dict",
          "args": [
            "cls",
            "data"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "딕셔너리에서 객체 생성",
          "calls": [
            "cls._parse_datetime",
            "data.get",
            "cls._parse_datetime",
            "data.get",
            "data.get",
            "cls._parse_datetime",
            "data.get",
            "data.get",
            "cls._parse_datetime",
            "data.get",
            "cls",
            "data.get",
            "str",
            "uuid.uuid4",
            "data.get",
            "data.get",
            "TaskStatus",
            "data.get",
            "data.get",
            "data.get",
            "data.get"
          ]
        },
        {
          "name": "_parse_datetime",
          "args": [
            "dt_str"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "날짜/시간 문자열 파싱",
          "calls": [
            "datetime.now",
            "datetime.fromisoformat",
            "dt.replace",
            "datetime.now"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.models.WorkflowPlan": {
      "name": "WorkflowPlan",
      "bases": [],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "생성 후 검증",
          "calls": [
            "InputValidator.validate_title",
            "InputValidator.validate_description",
            "self.name.strip",
            "ValueError",
            "self.name.strip",
            "len",
            "ValueError"
          ]
        },
        {
          "name": "start",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 시작",
          "calls": [
            "datetime.now"
          ]
        },
        {
          "name": "complete",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 완료",
          "calls": [
            "datetime.now",
            "datetime.now",
            "self._update_stats"
          ]
        },
        {
          "name": "archive",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 보관 처리",
          "calls": [
            "datetime.now",
            "datetime.now",
            "self._update_stats"
          ]
        },
        {
          "name": "archive",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 아카이브",
          "calls": [
            "self.complete",
            "datetime.now",
            "datetime.now"
          ]
        },
        {
          "name": "_update_stats",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "통계 정보 업데이트",
          "calls": [
            "len",
            "len",
            "sum"
          ]
        },
        {
          "name": "get_current_task",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 작업 중인 태스크 반환",
          "calls": [
            "len",
            "enumerate"
          ]
        },
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "객체를 딕셔너리로 변환",
          "calls": [
            "task.to_dict",
            "self.created_at.isoformat",
            "self.updated_at.isoformat",
            "self.completed_at.isoformat",
            "self.archived_at.isoformat"
          ]
        },
        {
          "name": "from_dict",
          "args": [
            "cls",
            "data"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "딕셔너리에서 객체 생성",
          "calls": [
            "Task._parse_datetime",
            "data.get",
            "Task._parse_datetime",
            "data.get",
            "data.get",
            "Task._parse_datetime",
            "data.get",
            "data.get",
            "Task._parse_datetime",
            "data.get",
            "Task.from_dict",
            "data.get",
            "cls",
            "data.get",
            "str",
            "uuid.uuid4",
            "data.get",
            "data.get",
            "PlanStatus",
            "data.get",
            "data.get",
            "data.get",
            "data.get"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.models.WorkflowState": {
      "name": "WorkflowState",
      "bases": [],
      "methods": [
        {
          "name": "add_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 추가",
          "calls": [
            "self.events.append",
            "datetime.now"
          ]
        },
        {
          "name": "get_all_plans",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 플랜 반환 (현재는 current_plan만)",
          "calls": []
        },
        {
          "name": "plans",
          "args": [
            "self"
          ],
          "decorators": [
            "property"
          ],
          "is_async": false,
          "docstring": "플랜 목록 반환 (호환성을 위한 속성)",
          "calls": [
            "self.get_all_plans"
          ]
        },
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "상태를 딕셔너리로 변환 (v46: plans + active_plan_id 구조)",
          "calls": [
            "self.current_plan.to_dict",
            "event.to_dict",
            "self.last_saved.isoformat"
          ]
        },
        {
          "name": "from_dict",
          "args": [
            "cls",
            "data"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "딕셔너리에서 상태 복원 (개선된 버전)",
          "calls": [
            "data.get",
            "data.get",
            "plan_data.get",
            "WorkflowPlan.from_dict",
            "data.get",
            "WorkflowPlan.from_dict",
            "WorkflowEvent.from_dict",
            "data.get",
            "Task._parse_datetime",
            "data.get",
            "cls",
            "data.get",
            "data.get"
          ]
        },
        {
          "name": "get_plan_history",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 로그에서 플랜 히스토리 추출",
          "calls": [
            "event.details.get",
            "list",
            "plan_events.values"
          ]
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.parser.ParsedCommand": {
      "name": "ParsedCommand",
      "bases": [],
      "methods": [
        {
          "name": "__post_init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        }
      ],
      "decorators": [
        "dataclass"
      ]
    },
    "workflow.v3.parser.CommandParser": {
      "name": "CommandParser",
      "bases": [],
      "methods": [
        {
          "name": "parse",
          "args": [
            "self",
            "command_str"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "명령어 문자열 파싱\n\nArgs:\n    command_str: 슬래시로 시작하는 명령어 문자열\n    \nReturns:\n    ParsedCommand: 파싱된 명령어 객체\n    \nRaises:\n    ValueError: 잘못된 명령어 형식",
          "calls": [
            "ValueError",
            "command_str.strip",
            "command_str.startswith",
            "ValueError",
            "<ast.Subscript object at 0x0000010C6A1058A0>.strip",
            "ValueError",
            "cmd_parts.split",
            "<ast.Subscript object at 0x0000010C6A105F60>.lower",
            "ParsedCommand",
            "len",
            "<ast.Constant object at 0x0000010C6A1066B0>.join",
            "ValueError",
            "ParsedCommand",
            "len",
            "<ast.Subscript object at 0x0000010C6A0B1510>.lower",
            "len",
            "<ast.Constant object at 0x0000010C6A0B0370>.join",
            "<ast.Constant object at 0x0000010C6A0B1AB0>.join",
            "self._parse_start",
            "self._parse_focus",
            "self._parse_plan",
            "self._parse_task",
            "self._parse_next",
            "self._parse_build",
            "self._parse_status"
          ]
        },
        {
          "name": "_parse_title_description",
          "args": [
            "self",
            "text"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "제목과 설명 파싱 (파이프 구분)",
          "calls": [
            "text.split",
            "<ast.Subscript object at 0x0000010C6A0676D0>.strip",
            "len",
            "<ast.Subscript object at 0x0000010C6A067460>.strip",
            "text.strip"
          ]
        },
        {
          "name": "_parse_start",
          "args": [
            "self",
            "args",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "start/plan 명령어 파싱",
          "calls": [
            "self._parse_title_description",
            "ValueError",
            "len",
            "ValueError"
          ]
        },
        {
          "name": "_parse_focus",
          "args": [
            "self",
            "args",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "focus 명령어 파싱",
          "calls": [
            "args.strip",
            "parsed.title.isdigit",
            "int"
          ]
        },
        {
          "name": "_parse_plan",
          "args": [
            "self",
            "args",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "plan 명령어 파싱",
          "calls": [
            "self._parse_title_description",
            "ValueError",
            "len",
            "ValueError",
            "<ast.Call object at 0x0000010C6A064B50>.strip",
            "parsed.description.replace"
          ]
        },
        {
          "name": "_parse_task",
          "args": [
            "self",
            "args",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "task 명령어 파싱",
          "calls": [
            "ValueError",
            "self._parse_title_description",
            "ValueError",
            "len",
            "ValueError",
            "args.lower",
            "args_lower.startswith",
            "<ast.Subscript object at 0x0000010C6A00BFD0>.strip",
            "note_text.startswith",
            "note_text.endswith",
            "note_text.startswith",
            "note_text.endswith",
            "ValueError",
            "self._parse_title_description",
            "ValueError",
            "len",
            "ValueError"
          ]
        },
        {
          "name": "_parse_next",
          "args": [
            "self",
            "args",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "next 명령어 파싱",
          "calls": [
            "args.strip"
          ]
        },
        {
          "name": "_parse_build",
          "args": [
            "self",
            "args",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "build 명령어 파싱",
          "calls": [
            "<ast.Call object at 0x0000010C6A04DBA0>.strip",
            "args.lower"
          ]
        },
        {
          "name": "_parse_status",
          "args": [
            "self",
            "args",
            "parsed"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "status 명령어 파싱",
          "calls": [
            "<ast.Call object at 0x0000010C6A04FAC0>.strip",
            "args.lower"
          ]
        },
        {
          "name": "validate_title",
          "args": [
            "self",
            "title",
            "field_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "제목 검증 및 정규화",
          "calls": [
            "ValueError",
            "title.strip",
            "ValueError",
            "len",
            "ValueError"
          ]
        },
        {
          "name": "extract_command",
          "args": [
            "text"
          ],
          "decorators": [
            "staticmethod"
          ],
          "is_async": false,
          "docstring": "텍스트에서 명령어 추출 (슬래시로 시작하는 부분)",
          "calls": [
            "re.search",
            "<ast.Call object at 0x0000010C6A04ECB0>.strip",
            "match.group"
          ]
        },
        {
          "name": "get_help",
          "args": [
            "self",
            "command"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "명령어 도움말",
          "calls": [
            "command.lower",
            "help_map.get"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.storage.WorkflowStorage": {
      "name": "WorkflowStorage",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "project_name",
            "base_dir"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "Path.cwd",
            "self.base_dir.mkdir",
            "self.backup_dir.mkdir",
            "self.cache_dir.mkdir",
            "Lock",
            "self._ensure_file_exists"
          ]
        },
        {
          "name": "save",
          "args": [
            "self",
            "data",
            "create_backup"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "데이터 저장 (원자적 쓰기)",
          "calls": [
            "self._validate_workflow_data",
            "logger.error",
            "self.main_file.exists",
            "self._create_backup",
            "<ast.Subscript object at 0x0000010C6A10D4B0>.update",
            "<ast.Call object at 0x0000010C6A10CCA0>.isoformat",
            "datetime.now",
            "str",
            "self.main_file.with_suffix",
            "write_json",
            "temp_file.replace",
            "logger.info",
            "logger.error",
            "locals",
            "temp_file.exists",
            "temp_file.unlink"
          ]
        },
        {
          "name": "load",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "데이터 로드",
          "calls": [
            "self.main_file.exists",
            "read_json",
            "logger.info",
            "logger.error"
          ]
        },
        {
          "name": "exists",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 파일 존재 여부",
          "calls": [
            "self.main_file.exists"
          ]
        },
        {
          "name": "delete",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 데이터 삭제",
          "calls": [
            "self.main_file.exists",
            "self._create_backup",
            "self.main_file.unlink",
            "logger.info",
            "logger.error"
          ]
        },
        {
          "name": "_create_backup",
          "args": [
            "self",
            "suffix"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "백업 생성",
          "calls": [
            "<ast.Call object at 0x0000010C6A066560>.strftime",
            "datetime.now",
            "shutil.copy2",
            "datetime.now",
            "self._cleanup_old_backups",
            "logger.info",
            "logger.error"
          ]
        },
        {
          "name": "_cleanup_old_backups",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "오래된 백업 파일 정리",
          "calls": [
            "sorted",
            "self.backup_dir.glob",
            "len",
            "old_backup.unlink",
            "logger.info",
            "logger.error"
          ]
        },
        {
          "name": "_ensure_file_exists",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 파일이 없으면 생성",
          "calls": [
            "self.main_file.exists",
            "<ast.Call object at 0x0000010C6A106410>.isoformat",
            "datetime.now",
            "str",
            "self.save"
          ]
        },
        {
          "name": "list_backups",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "백업 파일 목록",
          "calls": [
            "sorted",
            "self.backup_dir.glob"
          ]
        },
        {
          "name": "restore_from_backup",
          "args": [
            "self",
            "backup_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "백업에서 복구",
          "calls": [
            "open",
            "json.load",
            "self.main_file.exists",
            "self._create_backup",
            "self.save",
            "logger.error"
          ]
        },
        {
          "name": "get_file_info",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일 정보",
          "calls": [
            "self.main_file.exists",
            "self.main_file.stat",
            "str",
            "<ast.Call object at 0x0000010C69E1C160>.isoformat",
            "datetime.fromtimestamp",
            "str"
          ]
        },
        {
          "name": "get_statistics",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "통계 정보",
          "calls": [
            "str",
            "len",
            "list",
            "self.backup_dir.glob",
            "len",
            "list",
            "self.cache_dir.glob",
            "self.main_file.exists",
            "self.main_file.stat",
            "<ast.Call object at 0x0000010C6A04C8E0>.isoformat",
            "datetime.fromtimestamp"
          ]
        },
        {
          "name": "_validate_workflow_data",
          "args": [
            "self",
            "data"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 데이터 유효성 검증",
          "calls": [
            "len",
            "logger.warning",
            "logger.warning",
            "<ast.Constant object at 0x0000010C6A04FDC0>.join",
            "traceback.format_stack",
            "any",
            "logger.warning",
            "list",
            "data.keys",
            "len",
            "json.dumps",
            "logger.warning",
            "logger.error"
          ]
        },
        {
          "name": "get_project_data",
          "args": [
            "self",
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 데이터 반환 (호환성)",
          "calls": [
            "self.load"
          ]
        },
        {
          "name": "save_project_data",
          "args": [
            "self",
            "project_name",
            "data",
            "create_backup"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 데이터 저장 (호환성)",
          "calls": [
            "self.save"
          ]
        },
        {
          "name": "get_active_project",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "활성 프로젝트 반환 (호환성)",
          "calls": []
        },
        {
          "name": "set_active_project",
          "args": [
            "self",
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "활성 프로젝트 설정 (호환성)",
          "calls": []
        },
        {
          "name": "list_projects",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 목록 (호환성)",
          "calls": []
        },
        {
          "name": "delete_project",
          "args": [
            "self",
            "project_name"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 삭제 (호환성)",
          "calls": [
            "self.delete"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.storage_adapter.WorkflowStorage": {
      "name": "WorkflowStorage",
      "bases": [],
      "methods": [
        {
          "name": "_get_unified_storage",
          "args": [
            "cls"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "싱글톤 통합 스토리지 인스턴스",
          "calls": [
            "UnifiedWorkflowStorage"
          ]
        },
        {
          "name": "__init__",
          "args": [
            "self",
            "project_name",
            "base_dir"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "기존 API 호환성을 위한 초기화\n\nArgs:\n    project_name: 프로젝트 이름\n    base_dir: (무시됨) 통합 스토리지는 단일 경로 사용",
          "calls": [
            "self._get_unified_storage"
          ]
        },
        {
          "name": "save",
          "args": [
            "self",
            "data",
            "create_backup"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "데이터 저장 (프로젝트별)\n\nArgs:\n    data: 저장할 데이터 (current_plan, events 등)\n    create_backup: 백업 생성 여부\n    \nReturns:\n    성공 여부",
          "calls": [
            "self.storage.save_project_data"
          ]
        },
        {
          "name": "load",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "데이터 로드",
          "calls": [
            "self.storage.get_project_data"
          ]
        },
        {
          "name": "exists",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 데이터 존재 여부",
          "calls": [
            "self.storage.list_projects"
          ]
        },
        {
          "name": "delete",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 데이터 삭제",
          "calls": [
            "self.storage.delete_project"
          ]
        },
        {
          "name": "create_backup",
          "args": [
            "self",
            "suffix"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "백업 생성 (통합 백업으로 위임)",
          "calls": [
            "self.storage._create_backup"
          ]
        },
        {
          "name": "list_backups",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "백업 목록 (통합 백업)",
          "calls": [
            "sorted",
            "self.storage.backup_dir.glob"
          ]
        },
        {
          "name": "restore_from_backup",
          "args": [
            "self",
            "backup_path"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "백업에서 복구\n\nNote: 통합 스토리지에서는 전체 복구만 지원",
          "calls": []
        },
        {
          "name": "migrate_all_v3_files",
          "args": [
            "cls"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "모든 V3 파일을 통합 스토리지로 마이그레이션",
          "calls": [
            "cls._get_unified_storage",
            "storage.migrate_from_v3_files"
          ]
        },
        {
          "name": "get_all_projects",
          "args": [
            "cls"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "모든 프로젝트 목록",
          "calls": [
            "cls._get_unified_storage",
            "storage.list_projects"
          ]
        },
        {
          "name": "get_statistics",
          "args": [
            "cls"
          ],
          "decorators": [
            "classmethod"
          ],
          "is_async": false,
          "docstring": "전체 통계",
          "calls": [
            "cls._get_unified_storage",
            "storage.get_statistics"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers": {
      "name": "TaskContextEventHandlers",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "task_context_manager"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "register_all",
          "args": [
            "self",
            "event_bus"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 핸들러 등록",
          "calls": [
            "event_bus.subscribe",
            "event_bus.subscribe",
            "event_bus.subscribe",
            "event_bus.subscribe",
            "event_bus.subscribe",
            "event_bus.subscribe",
            "event_bus.subscribe"
          ]
        },
        {
          "name": "on_plan_created",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 생성 시",
          "calls": [
            "event.data.get",
            "event.data.get",
            "event.data.get",
            "event.data.get",
            "self.tcm.on_plan_created"
          ]
        },
        {
          "name": "on_plan_started",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 시작 시",
          "calls": [
            "event.data.get",
            "self.tcm.on_plan_started"
          ]
        },
        {
          "name": "on_task_added",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 추가 시",
          "calls": [
            "event.data.get",
            "event.data.get",
            "event.data.get",
            "event.data.get",
            "event.data.get",
            "self.tcm.on_task_added"
          ]
        },
        {
          "name": "on_task_started",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 시작 시",
          "calls": [
            "event.data.get",
            "self.tcm.on_task_started"
          ]
        },
        {
          "name": "on_task_completed",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료 시",
          "calls": [
            "event.data.get",
            "event.data.get",
            "self.tcm.on_task_updated",
            "work_results.get",
            "work_results.get",
            "work_results.get",
            "self.tcm.on_task_completed"
          ]
        },
        {
          "name": "on_task_updated",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 업데이트 시",
          "calls": [
            "event.data.get",
            "self.tcm.on_task_updated"
          ]
        },
        {
          "name": "on_plan_completed",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 완료 시",
          "calls": [
            "event.data.get",
            "self.tcm.on_plan_completed"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.task_context_manager.TaskContextManager": {
      "name": "TaskContextManager",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "memory_dir"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "Path",
            "self.memory_dir.mkdir",
            "self.archive_dir.mkdir",
            "self._load_context"
          ]
        },
        {
          "name": "_load_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트 파일 로드",
          "calls": [
            "self.context_file.exists",
            "open",
            "json.load",
            "logger.error",
            "self._get_default_context",
            "self._get_default_context"
          ]
        },
        {
          "name": "_get_default_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "기본 컨텍스트 구조",
          "calls": [
            "<ast.Call object at 0x0000010C6A0A9C00>.isoformat",
            "datetime.now"
          ]
        },
        {
          "name": "_save_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트 저장",
          "calls": [
            "<ast.Call object at 0x0000010C6A0A9810>.isoformat",
            "datetime.now",
            "open",
            "json.dump",
            "self._update_realtime",
            "logger.error"
          ]
        },
        {
          "name": "_update_realtime",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "실시간 파일 업데이트 (현재 상태만)",
          "calls": [
            "self.context.get",
            "self.context.get",
            "<ast.Call object at 0x0000010C6A0A88E0>.isoformat",
            "datetime.now",
            "open",
            "json.dump",
            "logger.warning"
          ]
        },
        {
          "name": "_add_event",
          "args": [
            "self",
            "event_type",
            "data"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 기록",
          "calls": [
            "<ast.Call object at 0x0000010C6A05BE50>.isoformat",
            "datetime.now",
            "<ast.Subscript object at 0x0000010C6A05BD00>.append",
            "len"
          ]
        },
        {
          "name": "on_plan_created",
          "args": [
            "self",
            "plan_id",
            "plan_name",
            "description"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 생성 시",
          "calls": [
            "<ast.Call object at 0x0000010C6A0B1FC0>.isoformat",
            "datetime.now",
            "self._add_event",
            "self._save_context",
            "logger.info"
          ]
        },
        {
          "name": "on_plan_started",
          "args": [
            "self",
            "plan_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 시작 시",
          "calls": [
            "<ast.Call object at 0x0000010C6A0B2E90>.isoformat",
            "datetime.now",
            "self._add_event",
            "self._save_context",
            "logger.info"
          ]
        },
        {
          "name": "on_plan_completed",
          "args": [
            "self",
            "plan_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 완료 시",
          "calls": [
            "<ast.Call object at 0x0000010C6A0B3EB0>.isoformat",
            "datetime.now",
            "self._archive_plan",
            "self._add_event",
            "self._save_context",
            "logger.info"
          ]
        },
        {
          "name": "_archive_plan",
          "args": [
            "self",
            "plan_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 아카이브",
          "calls": [
            "<ast.Call object at 0x0000010C6A0B0220>.strftime",
            "datetime.now",
            "plan_data.get",
            "plan_tasks.append",
            "<ast.Call object at 0x0000010C6A106E00>.isoformat",
            "datetime.now",
            "open",
            "json.dump",
            "logger.info",
            "logger.error"
          ]
        },
        {
          "name": "on_task_added",
          "args": [
            "self",
            "plan_id",
            "task_id",
            "task_title",
            "description"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 추가 시",
          "calls": [
            "<ast.Call object at 0x0000010C6A1044C0>.isoformat",
            "datetime.now",
            "<ast.Subscript object at 0x0000010C6A064A90>.append",
            "self._add_event",
            "self._save_context",
            "logger.info"
          ]
        },
        {
          "name": "on_task_started",
          "args": [
            "self",
            "task_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 시작 시",
          "calls": [
            "<ast.Call object at 0x0000010C6A0668C0>.isoformat",
            "datetime.now",
            "self._add_event",
            "self._save_context",
            "logger.info"
          ]
        },
        {
          "name": "on_task_completed",
          "args": [
            "self",
            "task_id",
            "note"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료 시",
          "calls": [
            "<ast.Call object at 0x0000010C6A065540>.isoformat",
            "datetime.now",
            "datetime.fromisoformat",
            "datetime.now",
            "str",
            "<ast.Subscript object at 0x0000010C6A066E90>.append",
            "<ast.Call object at 0x0000010C6A065660>.isoformat",
            "datetime.now",
            "self._add_event",
            "self._save_context",
            "logger.info"
          ]
        },
        {
          "name": "on_task_updated",
          "args": [
            "self",
            "task_id",
            "updates"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 업데이트 시",
          "calls": [
            "updates.items",
            "<ast.Subscript object at 0x0000010C6A00B7C0>.append",
            "<ast.Call object at 0x0000010C6A009AB0>.isoformat",
            "datetime.now",
            "<ast.Subscript object at 0x0000010C6A00A4D0>.append",
            "<ast.Call object at 0x0000010C6A00B100>.isoformat",
            "datetime.now",
            "isinstance",
            "<ast.Subscript object at 0x0000010C6A00AB60>.extend",
            "<ast.Subscript object at 0x0000010C6A00A020>.append",
            "<ast.Call object at 0x0000010C6A00BAF0>.isoformat",
            "datetime.now",
            "self._add_event",
            "list",
            "updates.keys",
            "self._save_context"
          ]
        },
        {
          "name": "get_current_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 컨텍스트 반환",
          "calls": [
            "self.context.get",
            "self.context.get",
            "<ast.Subscript object at 0x0000010C6A04F850>.get",
            "<ast.Subscript object at 0x0000010C6A04D840>.get"
          ]
        },
        {
          "name": "get_plan_context",
          "args": [
            "self",
            "plan_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 플랜의 컨텍스트",
          "calls": [
            "plan.get",
            "tasks.append"
          ]
        },
        {
          "name": "get_task_context",
          "args": [
            "self",
            "task_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "특정 태스크의 컨텍스트",
          "calls": [
            "<ast.Subscript object at 0x0000010C6A04DFF0>.get"
          ]
        },
        {
          "name": "get_recent_events",
          "args": [
            "self",
            "limit"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "최근 이벤트 반환",
          "calls": []
        },
        {
          "name": "clear_old_events",
          "args": [
            "self",
            "keep_days"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "오래된 이벤트 정리",
          "calls": [
            "<ast.Call object at 0x0000010C6A04CF40>.timestamp",
            "datetime.now",
            "<ast.Call object at 0x0000010C6A04C730>.timestamp",
            "datetime.fromisoformat",
            "new_events.append",
            "new_events.append",
            "self._save_context",
            "logger.info",
            "len"
          ]
        },
        {
          "name": "export_current_state",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "현재 상태 내보내기",
          "calls": [
            "self.get_current_context",
            "self.get_recent_events",
            "<ast.Call object at 0x0000010C6A1ED7E0>.isoformat",
            "datetime.now"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter": {
      "name": "WorkflowEventAdapter",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "workflow_manager"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "EventBus",
            "self.event_bus.start",
            "logger.info",
            "self._register_handlers"
          ]
        },
        {
          "name": "add_listener",
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 리스너 추가",
          "calls": [
            "self.event_bus.subscribe",
            "logger.debug"
          ]
        },
        {
          "name": "remove_listener",
          "args": [
            "self",
            "event_type",
            "handler"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 리스너 제거",
          "calls": [
            "self.event_bus.unsubscribe",
            "logger.debug"
          ]
        },
        {
          "name": "add_workflow_listener",
          "args": [
            "self",
            "listener"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "BaseEventListener 인터페이스를 구현한 리스너 추가",
          "calls": [
            "hasattr",
            "hasattr",
            "listener.get_subscribed_events",
            "hasattr",
            "str"
          ]
        },
        {
          "name": "create_handler",
          "args": [
            "listener_ref"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "handler",
          "args": [
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "self._convert_event_to_workflow_event",
            "listener_ref.handle_event"
          ]
        },
        {
          "name": "_convert_event_to_workflow_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "EventBus의 Event를 WorkflowEvent로 변환",
          "calls": [
            "logger.warning",
            "hasattr",
            "WorkflowEvent",
            "hasattr",
            "str",
            "uuid.uuid4",
            "hasattr",
            "datetime.now",
            "data.get",
            "data.get",
            "data.get",
            "data.get",
            "data.get",
            "logger.error"
          ]
        },
        {
          "name": "_register_handlers",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "기본 핸들러 등록",
          "calls": [
            "self.event_bus.subscribe"
          ]
        },
        {
          "name": "_on_project_switched",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 전환 이벤트 처리",
          "calls": [
            "logger.info"
          ]
        },
        {
          "name": "_convert_workflow_event_to_event",
          "args": [
            "self",
            "workflow_event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "WorkflowEvent를 EventBus의 Event로 변환",
          "calls": [
            "hasattr",
            "logger.error",
            "type",
            "hasattr",
            "str",
            "logger.debug",
            "logger.error",
            "Event"
          ]
        },
        {
          "name": "publish_workflow_event",
          "args": [
            "self",
            "workflow_event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "WorkflowEvent를 EventBus로 발행",
          "calls": [
            "isinstance",
            "logger.error",
            "type",
            "self._convert_workflow_event_to_event",
            "self.event_bus.publish",
            "logger.info",
            "logger.error",
            "logger.error"
          ]
        },
        {
          "name": "publish_plan_created",
          "args": [
            "self",
            "plan"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 생성 이벤트 발행",
          "calls": [
            "EventBuilder.plan_created",
            "self.publish_workflow_event"
          ]
        },
        {
          "name": "publish_plan_started",
          "args": [
            "self",
            "plan"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 시작 이벤트 발행",
          "calls": [
            "EventBuilder.plan_started",
            "self.publish_workflow_event"
          ]
        },
        {
          "name": "publish_plan_completed",
          "args": [
            "self",
            "plan"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 완료 이벤트 발행",
          "calls": [
            "EventBuilder.plan_completed",
            "self.publish_workflow_event"
          ]
        },
        {
          "name": "publish_task_added",
          "args": [
            "self",
            "task",
            "plan"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 추가 이벤트 발행",
          "calls": [
            "EventBuilder.task_added",
            "self.publish_workflow_event"
          ]
        },
        {
          "name": "publish_task_started",
          "args": [
            "self",
            "task",
            "plan"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 시작 이벤트 발행",
          "calls": [
            "EventBuilder.task_started",
            "self.publish_workflow_event"
          ]
        },
        {
          "name": "publish_task_completed",
          "args": [
            "self",
            "task",
            "plan"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료 이벤트 발행",
          "calls": [
            "EventBuilder.task_completed",
            "self.publish_workflow_event"
          ]
        },
        {
          "name": "publish_task_failed",
          "args": [
            "self",
            "task",
            "plan",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 실패 이벤트 발행",
          "calls": [
            "EventBuilder.task_failed",
            "self.publish_workflow_event"
          ]
        },
        {
          "name": "cleanup",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "정리 작업",
          "calls": [
            "self.event_bus.stop",
            "logger.info"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI": {
      "name": "InternalWorkflowAPI",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "workflow_manager"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "set_current_plan",
          "args": [
            "self",
            "plan"
          ],
          "decorators": [
            "internal_only",
            "<ast.Call object at 0x0000010C6A08A2C0>",
            "transactional"
          ],
          "is_async": false,
          "docstring": "현재 플랜 직접 설정",
          "calls": [
            "WorkflowEvent",
            "self._add_event",
            "log_command"
          ]
        },
        {
          "name": "update_task_status",
          "args": [
            "self",
            "task_id",
            "status",
            "metadata"
          ],
          "decorators": [
            "internal_only",
            "<ast.Call object at 0x0000010C6A088910>",
            "transactional"
          ],
          "is_async": false,
          "docstring": "태스크 상태 직접 업데이트",
          "calls": [
            "self._get_task_by_id",
            "WorkflowError",
            "datetime.now",
            "task.outputs.update",
            "datetime.now",
            "datetime.now",
            "int",
            "<ast.BinOp object at 0x0000010C6A088F40>.total_seconds",
            "EventBuilder.task_updated",
            "self._add_event",
            "log_command"
          ]
        },
        {
          "name": "get_task_by_id",
          "args": [
            "self",
            "task_id"
          ],
          "decorators": [
            "internal_only",
            "<ast.Call object at 0x0000010C6A0885B0>"
          ],
          "is_async": false,
          "docstring": "ID로 태스크 조회",
          "calls": [
            "self._get_task_by_id",
            "log_command"
          ]
        },
        {
          "name": "batch_update_tasks",
          "args": [
            "self",
            "updates"
          ],
          "decorators": [
            "internal_only",
            "<ast.Call object at 0x0000010C6A105B40>",
            "auto_save"
          ],
          "is_async": false,
          "docstring": "여러 태스크 일괄 업데이트\n\nArgs:\n    updates: [{'task_id': str, 'status': TaskStatus, 'metadata': dict}, ...]",
          "calls": [
            "self.update_task_status",
            "update.get",
            "update.get",
            "updated_tasks.append",
            "log_command"
          ]
        },
        {
          "name": "force_complete_plan",
          "args": [
            "self",
            "plan_id"
          ],
          "decorators": [
            "internal_only",
            "<ast.Call object at 0x0000010C6A106C50>",
            "transactional",
            "auto_save"
          ],
          "is_async": false,
          "docstring": "플랜 강제 완료",
          "calls": [
            "task.notes.append",
            "datetime.now",
            "EventBuilder.plan_completed",
            "self._add_event",
            "log_command"
          ]
        },
        {
          "name": "create_plan_from_template",
          "args": [
            "self",
            "template"
          ],
          "decorators": [
            "internal_only",
            "<ast.Call object at 0x0000010C6A034880>"
          ],
          "is_async": false,
          "docstring": "템플릿에서 플랜 생성\n\nArgs:\n    template: {\n        'name': str,\n        'description': str,\n        'tasks': [{'title': str, 'description': str}, ...]\n    }",
          "calls": [
            "WorkflowPlan",
            "template.get",
            "template.get",
            "Task",
            "task_data.get",
            "plan.tasks.append",
            "log_command"
          ]
        },
        {
          "name": "get_event_history",
          "args": [
            "self",
            "plan_id",
            "event_type",
            "limit"
          ],
          "decorators": [
            "internal_only"
          ],
          "is_async": false,
          "docstring": "이벤트 히스토리 조회",
          "calls": [
            "sorted"
          ]
        },
        {
          "name": "calculate_plan_statistics",
          "args": [
            "self",
            "plan"
          ],
          "decorators": [
            "internal_only"
          ],
          "is_async": false,
          "docstring": "플랜 통계 계산",
          "calls": [
            "len",
            "len",
            "len",
            "len",
            "sum"
          ]
        },
        {
          "name": "create_checkpoint",
          "args": [
            "self"
          ],
          "decorators": [
            "internal_only",
            "<ast.Call object at 0x0000010C6A00B550>"
          ],
          "is_async": false,
          "docstring": "현재 상태의 체크포인트 생성",
          "calls": [
            "str",
            "uuid4",
            "<ast.Call object at 0x0000010C6A00B3A0>.isoformat",
            "datetime.now",
            "hasattr",
            "self.state.to_dict",
            "self.state.current_plan.to_dict",
            "os.makedirs",
            "os.path.dirname",
            "open",
            "json.dump",
            "logger.info",
            "log_command"
          ]
        },
        {
          "name": "restore_checkpoint",
          "args": [
            "self",
            "checkpoint_id"
          ],
          "decorators": [
            "internal_only",
            "<ast.Call object at 0x0000010C6A04C130>"
          ],
          "is_async": false,
          "docstring": "체크포인트에서 상태 복원",
          "calls": [
            "os.path.exists",
            "logger.error",
            "open",
            "json.load",
            "logger.info",
            "log_command"
          ]
        },
        {
          "name": "_get_task_by_id",
          "args": [
            "self",
            "task_id"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 ID로 조회",
          "calls": []
        },
        {
          "name": "_add_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 추가",
          "calls": [
            "self.event_store.add",
            "hasattr",
            "self.manager.event_adapter.publish_workflow_event",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.api.user_api.UserCommandAPI": {
      "name": "UserCommandAPI",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "workflow_manager"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "CommandParser",
            "self._register_extended_commands"
          ]
        },
        {
          "name": "_register_extended_commands",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "확장 명령어 핸들러 등록",
          "calls": [
            "hasattr",
            "self.manager.command_handlers.update"
          ]
        },
        {
          "name": "execute_command",
          "args": [
            "self",
            "command_str"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A0ECF40>"
          ],
          "is_async": false,
          "docstring": "사용자 명령어 실행 (개선된 버전)",
          "calls": [
            "self.parser.parse",
            "self.manager.command_handlers.get",
            "handler",
            "WorkflowError",
            "self._get_user_friendly_error",
            "HelperResult",
            "e.to_dict",
            "logger.error",
            "type",
            "str",
            "traceback.format_exc",
            "HelperResult",
            "type",
            "str",
            "log_command"
          ]
        },
        {
          "name": "_get_user_friendly_error",
          "args": [
            "self",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "사용자 친화적 에러 메시지 생성",
          "calls": [
            "error_messages.get"
          ]
        },
        {
          "name": "_handle_auto",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A064670>"
          ],
          "is_async": false,
          "docstring": "자동 실행 모드 제어",
          "calls": [
            "hasattr",
            "AutoTaskExecutor",
            "parsed.title.lower",
            "HelperResult",
            "parsed.title.lower",
            "executor.start",
            "HelperResult",
            "parsed.title.lower",
            "executor.stop",
            "HelperResult",
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_handle_pause",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A065480>"
          ],
          "is_async": false,
          "docstring": "자동 실행 일시 정지",
          "calls": [
            "hasattr",
            "self.manager._auto_executor.pause",
            "HelperResult",
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_handle_resume",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A065630>"
          ],
          "is_async": false,
          "docstring": "자동 실행 재개",
          "calls": [
            "hasattr",
            "self.manager._auto_executor.resume",
            "HelperResult",
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_handle_skip",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A065F60>",
            "require_active_plan"
          ],
          "is_async": false,
          "docstring": "현재 태스크 건너뛰기",
          "calls": [
            "self.manager.get_current_task",
            "HelperResult",
            "self.manager.cancel_task",
            "self.manager.get_current_task",
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_handle_delete",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A035D20>",
            "require_active_plan",
            "<ast.Call object at 0x0000010C6A035DE0>"
          ],
          "is_async": false,
          "docstring": "태스크 삭제",
          "calls": [
            "enumerate",
            "str",
            "HelperResult",
            "self.manager.state.current_plan.tasks.pop",
            "max",
            "self.manager._save_data",
            "HelperResult",
            "log_command",
            "validate_arguments",
            "len"
          ]
        },
        {
          "name": "_handle_move",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A08A020>",
            "require_active_plan"
          ],
          "is_async": false,
          "docstring": "태스크 순서 변경",
          "calls": [
            "parsed.title.split",
            "len",
            "HelperResult",
            "int",
            "enumerate",
            "str",
            "HelperResult",
            "len",
            "HelperResult",
            "self.manager.state.current_plan.tasks.pop",
            "self.manager.state.current_plan.tasks.insert",
            "self.manager._save_data",
            "HelperResult",
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_handle_depend",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A04D060>",
            "require_active_plan"
          ],
          "is_async": false,
          "docstring": "태스크 의존성 설정",
          "calls": [
            "parsed.title.split",
            "len",
            "HelperResult",
            "enumerate",
            "str",
            "str",
            "HelperResult",
            "HelperResult",
            "<ast.Subscript object at 0x0000010C6A08B4F0>.append",
            "self.manager._save_data",
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_handle_export",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A04C0A0>"
          ],
          "is_async": false,
          "docstring": "워크플로우 내보내기",
          "calls": [
            "HelperResult",
            "<ast.Call object at 0x0000010C6A04DB10>.isoformat",
            "datetime.now",
            "self.manager.state.current_plan.to_dict",
            "len",
            "<ast.Call object at 0x0000010C6A04D480>.strftime",
            "datetime.now",
            "filename.endswith",
            "os.makedirs",
            "open",
            "json.dump",
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_handle_import",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A04FEB0>"
          ],
          "is_async": false,
          "docstring": "워크플로우 가져오기",
          "calls": [
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_handle_template",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A04DCC0>"
          ],
          "is_async": false,
          "docstring": "워크플로우 템플릿 관리",
          "calls": [
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_handle_report",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A04C5E0>",
            "require_active_plan"
          ],
          "is_async": false,
          "docstring": "진행 상황 리포트",
          "calls": [
            "self._generate_progress_report",
            "self._generate_timeline_report",
            "HelperResult",
            "log_command"
          ]
        },
        {
          "name": "_generate_progress_report",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "진행 상황 리포트 생성",
          "calls": [
            "len",
            "len",
            "len",
            "enumerate",
            "<ast.Dict object at 0x0000010C6A00BB80>.get",
            "HelperResult"
          ]
        },
        {
          "name": "_generate_timeline_report",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "타임라인 리포트 생성",
          "calls": [
            "HelperResult"
          ]
        },
        {
          "name": "_handle_stats",
          "args": [
            "self",
            "parsed"
          ],
          "decorators": [
            "<ast.Call object at 0x0000010C6A1626B0>"
          ],
          "is_async": false,
          "docstring": "통계 정보",
          "calls": [
            "InternalWorkflowAPI",
            "internal_api.calculate_plan_statistics",
            "HelperResult",
            "HelperResult",
            "log_command"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor": {
      "name": "AutoTaskExecutor",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "workflow_manager"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "threading.Event",
            "threading.Event",
            "self._subscribe_events"
          ]
        },
        {
          "name": "_subscribe_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 이벤트 구독",
          "calls": [
            "event_bus.subscribe",
            "event_bus.subscribe"
          ]
        },
        {
          "name": "start",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "자동 실행 시작",
          "calls": [
            "logger.warning",
            "self._stop_event.clear",
            "datetime.now",
            "threading.Thread",
            "self._thread.start",
            "logger.info"
          ]
        },
        {
          "name": "stop",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "자동 실행 중지",
          "calls": [
            "self._stop_event.set",
            "self._thread.join",
            "datetime.now",
            "logger.info"
          ]
        },
        {
          "name": "pause",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "일시 정지",
          "calls": [
            "self._pause_event.set",
            "logger.info"
          ]
        },
        {
          "name": "resume",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "재개",
          "calls": [
            "self._pause_event.clear",
            "logger.info"
          ]
        },
        {
          "name": "_run_loop",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "메인 실행 루프",
          "calls": [
            "logger.info",
            "self._stop_event.is_set",
            "time.sleep",
            "self._get_next_executable_task",
            "logger.info",
            "self._on_all_complete",
            "self._execute_task",
            "time.sleep",
            "logger.error",
            "self.pause",
            "logger.info"
          ]
        },
        {
          "name": "_get_next_executable_task",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "다음 실행 가능한 태스크 찾기",
          "calls": [
            "self.manager.get_current_task",
            "self._get_next_executable_task",
            "self._get_next_executable_task",
            "self._has_unmet_dependencies",
            "logger.info",
            "self._run_hooks",
            "hasattr",
            "self.manager.block_task",
            "self._get_next_executable_task"
          ]
        },
        {
          "name": "_has_unmet_dependencies",
          "args": [
            "self",
            "task"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크의 의존성이 충족되지 않았는지 확인",
          "calls": [
            "isinstance",
            "self.manager.internal_api.get_task_by_id"
          ]
        },
        {
          "name": "_execute_task",
          "args": [
            "self",
            "task"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 실행",
          "calls": [
            "logger.info",
            "self._run_hooks",
            "self.manager.internal_api.update_task_status",
            "<ast.Call object at 0x0000010C6A0EF1F0>.isoformat",
            "datetime.now",
            "self._simulate_task_execution",
            "self.manager.complete_task",
            "self._run_hooks",
            "logger.error",
            "hasattr",
            "self.manager.fail_task",
            "str",
            "self._run_hooks",
            "self.pause"
          ]
        },
        {
          "name": "_simulate_task_execution",
          "args": [
            "self",
            "task"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 실행 시뮬레이션 (실제 구현 시 교체 필요)",
          "calls": [
            "task.description.startswith",
            "<ast.Subscript object at 0x0000010C6A04C490>.strip",
            "logger.info",
            "task.outputs.get",
            "time.sleep"
          ]
        },
        {
          "name": "_on_task_completed",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료 이벤트 핸들러",
          "calls": [
            "logger.debug"
          ]
        },
        {
          "name": "_on_task_failed",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 실패 이벤트 핸들러",
          "calls": [
            "self.pause"
          ]
        },
        {
          "name": "_on_all_complete",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 태스크 완료 시 호출",
          "calls": [
            "logger.info",
            "self._run_hooks",
            "self.stop"
          ]
        },
        {
          "name": "_run_hooks",
          "args": [
            "self",
            "hook_type",
            "task"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "훅 실행",
          "calls": [
            "hook",
            "logger.error"
          ]
        },
        {
          "name": "register_hook",
          "args": [
            "self",
            "hook_type",
            "callback"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "훅 등록\n\nArgs:\n    hook_type: 'before_task', 'after_task', 'on_error', 'on_blocked', 'on_complete'\n    callback: 콜백 함수",
          "calls": [
            "ValueError",
            "<ast.Subscript object at 0x0000010C6A04CA60>.append",
            "logger.debug"
          ]
        },
        {
          "name": "unregister_hook",
          "args": [
            "self",
            "hook_type",
            "callback"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "훅 제거",
          "calls": [
            "<ast.Subscript object at 0x0000010C6A04FCD0>.remove"
          ]
        },
        {
          "name": "get_status",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "실행기 상태 조회",
          "calls": [
            "self.stats.copy",
            "datetime.now",
            "<ast.BinOp object at 0x0000010C6A00B340>.total_seconds"
          ]
        },
        {
          "name": "__del__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "소멸자",
          "calls": [
            "self.stop",
            "event_bus.unsubscribe",
            "event_bus.unsubscribe"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.ai_instruction_base.ActionType": {
      "name": "ActionType",
      "bases": [
        "Enum"
      ],
      "methods": [],
      "decorators": []
    },
    "workflow.v3.listeners.ai_instruction_base.Priority": {
      "name": "Priority",
      "bases": [
        "Enum"
      ],
      "methods": [],
      "decorators": []
    },
    "workflow.v3.listeners.ai_instruction_base.AIInstruction": {
      "name": "AIInstruction",
      "bases": [],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "event_type",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A0DAE30>.strftime",
            "datetime.now",
            "<ast.Call object at 0x0000010C6A0D8070>.isoformat",
            "datetime.now"
          ]
        },
        {
          "name": "add_action",
          "args": [
            "self",
            "action_type",
            "params",
            "order",
            "depends_on"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "AI가 수행할 작업 추가",
          "calls": [
            "len",
            "len",
            "self.actions.append"
          ]
        },
        {
          "name": "set_priority",
          "args": [
            "self",
            "priority"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "우선순위 설정",
          "calls": []
        },
        {
          "name": "to_dict",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "딕셔너리로 변환",
          "calls": []
        },
        {
          "name": "save",
          "args": [
            "self",
            "filepath"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "지시서 저장",
          "calls": [
            "os.makedirs",
            "os.path.dirname",
            "os.path.exists",
            "open",
            "json.load",
            "instructions.append",
            "self.to_dict",
            "len",
            "open",
            "json.dump",
            "open",
            "json.dump",
            "self.to_dict"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.automation_listeners.TaskAutoProgressListener": {
      "name": "TaskAutoProgressListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "workflow_manager",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A036890>.__init__",
            "super"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료 시 자동으로 다음 태스크 시작",
          "calls": [
            "hasattr",
            "self.workflow_manager.auto_start_next_task",
            "logger.info",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.automation_listeners.PlanAutoArchiveListener": {
      "name": "PlanAutoArchiveListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "workflow_manager",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A037940>.__init__",
            "super"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 완료 시 자동 보관",
          "calls": [
            "hasattr",
            "self.workflow_manager.archive_completed_plan",
            "logger.info",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.automation_listeners.ContextSyncListener": {
      "name": "ContextSyncListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "context_integration",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A0D8AF0>.__init__",
            "super"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "event.details.get",
            "self.context.sync_plan_summary",
            "self.context.sync_plan_summary",
            "self.context.record_event",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.automation_listeners.AutoSaveListener": {
      "name": "AutoSaveListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "storage",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A0DAD40>.__init__",
            "super"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "list"
          ]
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "logger.debug",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.automation_listeners.GitCommitListener": {
      "name": "GitCommitListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A04D5A0>.__init__",
            "super"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "details.get",
            "self._auto_commit",
            "details.get",
            "self._auto_commit",
            "logger.error"
          ]
        },
        {
          "name": "_auto_commit",
          "args": [
            "self",
            "message"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Git 자동 커밋 수행",
          "calls": [
            "logger.info"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.automation_listeners.AuditLogListener": {
      "name": "AuditLogListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A04DB10>.__init__",
            "super",
            "Path"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "list"
          ]
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "hasattr",
            "str",
            "self.audit_entries.append",
            "len",
            "self._save_audit_log"
          ]
        },
        {
          "name": "_save_audit_log",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "감사 로그 저장",
          "calls": [
            "self.audit_log_path.exists",
            "open",
            "json.load",
            "existing.extend",
            "self.audit_log_path.parent.mkdir",
            "open",
            "json.dump",
            "self.audit_entries.clear",
            "logger.debug",
            "len",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.base.BaseEventListener": {
      "name": "BaseEventListener",
      "bases": [
        "ABC"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Args:\n    enabled: 리스너 활성화 여부",
          "calls": [
            "self.get_subscribed_events"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [
            "abstractmethod"
          ],
          "is_async": false,
          "docstring": "구독할 이벤트 타입 반환\n\nReturns:\n    구독할 EventType의 집합",
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [
            "abstractmethod"
          ],
          "is_async": false,
          "docstring": "이벤트 처리 로직\n\nArgs:\n    event: 처리할 워크플로우 이벤트\n\nReturns:\n    처리 결과 딕셔너리 (선택적)",
          "calls": []
        },
        {
          "name": "should_handle",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리 여부 결정\n\nArgs:\n    event: 확인할 이벤트\n\nReturns:\n    처리해야 하면 True",
          "calls": []
        },
        {
          "name": "on_error",
          "args": [
            "self",
            "event",
            "error"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 처리\n\nArgs:\n    event: 에러가 발생한 이벤트\n    error: 발생한 예외",
          "calls": [
            "logger.error"
          ]
        },
        {
          "name": "process",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리 래퍼 (메트릭 포함)\n\nArgs:\n    event: 처리할 이벤트\n\nReturns:\n    처리 결과",
          "calls": [
            "self.should_handle",
            "self.handle_event",
            "self.on_error"
          ]
        },
        {
          "name": "get_metrics",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "리스너 메트릭 반환\n\nReturns:\n    처리 통계 정보",
          "calls": [
            "len",
            "max"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.context_listener.ContextUpdateListener": {
      "name": "ContextUpdateListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A035BA0>.__init__",
            "super",
            "Path"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "구독할 이벤트 타입",
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리",
          "calls": [
            "self.context_file.exists",
            "open",
            "json.load",
            "event.details.get",
            "hasattr",
            "event.timestamp.isoformat",
            "str",
            "event.details.get",
            "hasattr",
            "event.timestamp.isoformat",
            "str",
            "<ast.Subscript object at 0x0000010C6A036E00>.append",
            "event.details.get",
            "hasattr",
            "event.timestamp.isoformat",
            "str",
            "<ast.Call object at 0x0000010C6A04E200>.isoformat",
            "datetime.now",
            "self.context_file.parent.mkdir",
            "open",
            "json.dump",
            "logger.debug",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener": {
      "name": "DocsGeneratorListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A035090>.__init__",
            "super",
            "Path",
            "self.docs_dir.mkdir"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "구독할 이벤트 타입",
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리",
          "calls": [
            "self._generate_task_docs",
            "self._generate_plan_summary",
            "logger.error"
          ]
        },
        {
          "name": "_generate_task_docs",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 문서 생성",
          "calls": [
            "Path",
            "task_context_path.exists",
            "open",
            "json.load",
            "<ast.Call object at 0x0000010C6A0358A0>.get",
            "all_contexts.get",
            "logger.debug",
            "details.get",
            "task_context.get",
            "<ast.Call object at 0x0000010C6A00A290>.strftime",
            "datetime.now",
            "details.get",
            "details.get",
            "task_context.get",
            "details.get",
            "self._format_file_list",
            "task_context.get",
            "self._format_file_list",
            "task_context.get",
            "self._format_code_changes",
            "self._format_test_results",
            "task_context.get",
            "self._format_additional_info",
            "<ast.Call object at 0x0000010C6A00B490>.lower",
            "details.get",
            "<ast.Constant object at 0x0000010C6A00BFA0>.join",
            "c.isalnum",
            "<ast.Call object at 0x0000010C6A00BA30>.strftime",
            "datetime.now",
            "doc_path.write_text",
            "self.generated_docs.append",
            "str",
            "logger.info",
            "print"
          ]
        },
        {
          "name": "_generate_plan_summary",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 완료 시 요약 문서 생성",
          "calls": [
            "details.get",
            "details.get",
            "details.get",
            "details.get",
            "self._format_generated_docs",
            "details.get",
            "<ast.Call object at 0x0000010C6A04F5B0>.strftime",
            "datetime.now",
            "summary_path.write_text",
            "print"
          ]
        },
        {
          "name": "_format_file_list",
          "args": [
            "self",
            "files"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일 목록 포맷팅",
          "calls": [
            "<ast.Constant object at 0x0000010C6A04DAE0>.join"
          ]
        },
        {
          "name": "_format_code_changes",
          "args": [
            "self",
            "context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "코드 변경사항 포맷팅",
          "calls": [
            "context.get",
            "context.get",
            "<ast.Constant object at 0x0000010C6A04DD20>.join"
          ]
        },
        {
          "name": "_format_test_results",
          "args": [
            "self",
            "results"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "테스트 결과 포맷팅",
          "calls": [
            "output.append",
            "output.append",
            "output.append",
            "<ast.Constant object at 0x0000010C6A0E4D00>.join"
          ]
        },
        {
          "name": "_format_additional_info",
          "args": [
            "self",
            "context",
            "details"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "추가 정보 포맷팅",
          "calls": [
            "context.get",
            "info.append",
            "info.append",
            "context.get",
            "info.append",
            "<ast.Subscript object at 0x0000010C6A0E4280>.items",
            "info.append",
            "details.get",
            "info.append",
            "info.append",
            "<ast.Constant object at 0x0000010C6A0E7A30>.join"
          ]
        },
        {
          "name": "_format_generated_docs",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "생성된 문서 목록",
          "calls": [
            "<ast.Constant object at 0x0000010C6A0E7D90>.join",
            "Path"
          ]
        },
        {
          "name": "get_generated_docs_count",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "생성된 문서 수 반환",
          "calls": [
            "len"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.error_collector_listener.ErrorCollectorListener": {
      "name": "ErrorCollectorListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A00BA60>.__init__",
            "super",
            "Path"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "구독할 이벤트 타입",
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리",
          "calls": [
            "self._collect_error"
          ]
        },
        {
          "name": "_collect_error",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "오류 수집",
          "calls": [
            "event.details.get",
            "<ast.Subscript object at 0x0000010C6A00A050>.append",
            "self.error_log_path.parent.mkdir",
            "self.error_log_path.write_text",
            "json.dumps",
            "print"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor": {
      "name": "ErrorInstructor",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A066560>.__init__",
            "super"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 이벤트를 AI 해결 지시로 변환",
          "calls": [
            "event.details.get",
            "event.details.get",
            "AIInstruction",
            "event.details.get",
            "event.details.get",
            "event.timestamp.isoformat",
            "self._add_file_not_found_actions",
            "self._add_permission_error_actions",
            "self._add_import_error_actions",
            "self._add_syntax_error_actions",
            "self._add_network_error_actions",
            "self._add_generic_error_actions",
            "instruction.add_action",
            "instruction.set_priority",
            "instruction.save",
            "print",
            "print",
            "len",
            "print"
          ]
        },
        {
          "name": "_add_file_not_found_actions",
          "args": [
            "self",
            "instruction",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "파일 없음 에러 해결 지시",
          "calls": [
            "self._extract_file_path",
            "event.details.get",
            "instruction.add_action",
            "instruction.add_action",
            "instruction.add_action"
          ]
        },
        {
          "name": "_add_permission_error_actions",
          "args": [
            "self",
            "instruction",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "권한 에러 해결 지시",
          "calls": [
            "instruction.add_action",
            "instruction.add_action"
          ]
        },
        {
          "name": "_add_import_error_actions",
          "args": [
            "self",
            "instruction",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Import 에러 해결 지시",
          "calls": [
            "self._extract_module_name",
            "event.details.get",
            "instruction.add_action",
            "instruction.add_action",
            "instruction.add_action"
          ]
        },
        {
          "name": "_add_syntax_error_actions",
          "args": [
            "self",
            "instruction",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "문법 에러 해결 지시",
          "calls": [
            "instruction.add_action",
            "event.details.get",
            "event.details.get",
            "instruction.add_action"
          ]
        },
        {
          "name": "_add_network_error_actions",
          "args": [
            "self",
            "instruction",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "네트워크 에러 해결 지시",
          "calls": [
            "instruction.add_action",
            "instruction.add_action"
          ]
        },
        {
          "name": "_add_generic_error_actions",
          "args": [
            "self",
            "instruction",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "일반 에러 해결 지시",
          "calls": [
            "instruction.add_action",
            "event.details.get",
            "instruction.add_action",
            "instruction.add_action"
          ]
        },
        {
          "name": "_extract_file_path",
          "args": [
            "self",
            "error_message"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 메시지에서 파일 경로 추출",
          "calls": [
            "re.search",
            "match.group"
          ]
        },
        {
          "name": "_extract_module_name",
          "args": [
            "self",
            "error_message"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "에러 메시지에서 모듈명 추출",
          "calls": [
            "re.search",
            "<ast.Call object at 0x0000010C6A04F250>.split",
            "match.group"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.error_listener.ErrorHandlerListener": {
      "name": "ErrorHandlerListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "workflow_manager",
            "retry_limit",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A009E40>.__init__",
            "super"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "구독할 이벤트 타입",
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리",
          "calls": [
            "self.retry_counts.get",
            "logger.info",
            "hasattr",
            "self.workflow_manager.retry_task",
            "logger.error",
            "hasattr",
            "self.workflow_manager.pause_plan",
            "logger.warning",
            "details.get",
            "hasattr",
            "self.workflow_manager.handle_blocked_task",
            "logger.error"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.error_report_listener.ErrorReportListener": {
      "name": "ErrorReportListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A035540>.__init__",
            "super",
            "self.ensure_log_files"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "ensure_log_files",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "로그 파일 초기화",
          "calls": [
            "os.makedirs",
            "os.path.exists",
            "open",
            "json.dump",
            "os.path.exists",
            "open",
            "json.dump"
          ]
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "오류 이벤트 처리",
          "calls": [
            "<ast.Call object at 0x0000010C6A036770>.strftime",
            "datetime.now",
            "<ast.Call object at 0x0000010C6A037BE0>.isoformat",
            "datetime.now",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "self._suggest_actions",
            "self._determine_severity",
            "open",
            "json.load",
            "<ast.Subscript object at 0x0000010C6A035270>.append",
            "<ast.Call object at 0x0000010C6A0375B0>.isoformat",
            "datetime.now",
            "open",
            "json.dump",
            "open",
            "json.load",
            "history.append",
            "open",
            "json.dump",
            "print",
            "print"
          ]
        },
        {
          "name": "_suggest_actions",
          "args": [
            "self",
            "details"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "오류에 따른 권장 조치 제안",
          "calls": [
            "details.get",
            "suggestions.append",
            "suggestions.append",
            "suggestions.append",
            "suggestions.append",
            "suggestions.append",
            "suggestions.append",
            "suggestions.append",
            "suggestions.append",
            "suggestions.append",
            "suggestions.append",
            "suggestions.append"
          ]
        },
        {
          "name": "_determine_severity",
          "args": [
            "self",
            "details"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "오류 심각도 판단",
          "calls": [
            "details.get",
            "any",
            "any",
            "any"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.task_completion_instructor.TaskCompletionInstructor": {
      "name": "TaskCompletionInstructor",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A034550>.__init__",
            "super"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료 이벤트를 AI 지시로 변환",
          "calls": [
            "AIInstruction",
            "event.details.get",
            "event.details.get",
            "event.timestamp.isoformat",
            "self._should_commit",
            "instruction.add_action",
            "event.details.get",
            "event.details.get",
            "instruction.add_action",
            "event.details.get",
            "self._create_report_message",
            "instruction.add_action",
            "self._should_update_docs",
            "instruction.add_action",
            "event.details.get",
            "event.details.get",
            "instruction.add_action",
            "next_task.get",
            "<ast.Call object at 0x0000010C6A00AB00>.lower",
            "event.details.get",
            "instruction.add_action",
            "event.details.get",
            "<ast.Call object at 0x0000010C6A00B430>.lower",
            "event.details.get",
            "instruction.set_priority",
            "instruction.save",
            "print",
            "len",
            "print",
            "event.details.get",
            "print",
            "print"
          ]
        },
        {
          "name": "_should_commit",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "Git 커밋이 필요한지 판단",
          "calls": [
            "<ast.Call object at 0x0000010C6A00A200>.lower",
            "event.details.get",
            "any"
          ]
        },
        {
          "name": "_should_update_docs",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "문서 업데이트가 필요한지 판단",
          "calls": [
            "<ast.Call object at 0x0000010C6A04FCD0>.lower",
            "event.details.get",
            "any"
          ]
        },
        {
          "name": "_create_report_message",
          "args": [
            "self",
            "event",
            "next_task"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "사용자 보고 메시지 생성",
          "calls": [
            "event.details.get",
            "event.timestamp.strftime",
            "event.details.get",
            "event.details.get",
            "next_task.get"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.task_completion_listener.TaskCompletionListener": {
      "name": "TaskCompletionListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A04D090>.__init__",
            "super",
            "self.ensure_log_file"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": []
        },
        {
          "name": "ensure_log_file",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "로그 파일 초기화",
          "calls": [
            "os.makedirs",
            "os.path.exists",
            "open",
            "json.dump"
          ]
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료 이벤트 처리",
          "calls": [
            "open",
            "json.load",
            "event.details.get",
            "<ast.Call object at 0x0000010C6A04F1C0>.isoformat",
            "datetime.now",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "completions.append",
            "len",
            "open",
            "json.dump",
            "print",
            "event.details.get",
            "print"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener": {
      "name": "TaskContextListener",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self",
            "enabled"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A160CD0>.__init__",
            "super",
            "Path"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "구독할 이벤트 타입",
          "calls": []
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이벤트 처리",
          "calls": [
            "self._provide_task_context",
            "self._prepare_task_context",
            "logger.error"
          ]
        },
        {
          "name": "_prepare_task_context",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 추가 시 컨텍스트 준비",
          "calls": [
            "details.get",
            "self._find_similar_tasks",
            "<ast.Call object at 0x0000010C6A163040>.isoformat",
            "datetime.now",
            "logger.debug"
          ]
        },
        {
          "name": "_provide_task_context",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 시작 시 컨텍스트 제공",
          "calls": [
            "details.get",
            "self.task_contexts.get",
            "self._load_related_docs",
            "context.get",
            "self._load_previous_tasks",
            "self._load_project_context",
            "self._display_context",
            "self._update_task_context",
            "str",
            "context.get"
          ]
        },
        {
          "name": "_find_similar_tasks",
          "args": [
            "self",
            "task_title"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "유사한 이전 태스크 찾기",
          "calls": [
            "Path",
            "task_context_path.exists",
            "open",
            "json.load",
            "<ast.Call object at 0x0000010C6A0D8190>.items",
            "all_contexts.get",
            "context.get",
            "self._calculate_similarity",
            "similar_tasks.append",
            "context.get",
            "context.get",
            "logger.debug",
            "similar_tasks.sort"
          ]
        },
        {
          "name": "_calculate_similarity",
          "args": [
            "self",
            "text1",
            "text2"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "간단한 텍스트 유사도 계산",
          "calls": [
            "set",
            "<ast.Call object at 0x0000010C6A0348B0>.split",
            "text1.lower",
            "set",
            "<ast.Call object at 0x0000010C6A0342E0>.split",
            "text2.lower",
            "len",
            "len"
          ]
        },
        {
          "name": "_load_related_docs",
          "args": [
            "self",
            "task_title",
            "similar_tasks"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "관련 문서 로드",
          "calls": [
            "self.docs_dir.exists",
            "self.docs_dir.glob",
            "doc.exists",
            "related_docs.append",
            "<ast.Call object at 0x0000010C6A037580>.split",
            "task_title.lower",
            "self.docs_dir.glob",
            "doc.stem.lower",
            "any",
            "related_docs.append"
          ]
        },
        {
          "name": "_load_previous_tasks",
          "args": [
            "self",
            "task_title"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "이전 태스크 정보 로드",
          "calls": [
            "Path",
            "workflow_path.exists",
            "open",
            "json.load",
            "workflow_data.get",
            "plan.get",
            "task.get",
            "any",
            "<ast.Call object at 0x0000010C6A034FD0>.lower",
            "task.get",
            "<ast.Call object at 0x0000010C6A00ADA0>.split",
            "task_title.lower",
            "previous_tasks.append",
            "task.get",
            "task.get",
            "task.get",
            "logger.debug"
          ]
        },
        {
          "name": "_load_project_context",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "프로젝트 전체 컨텍스트 로드",
          "calls": [
            "Path",
            "context_path.exists",
            "open",
            "json.load",
            "logger.debug",
            "context.get",
            "context.get",
            "<ast.Call object at 0x0000010C6A009C60>.get",
            "context.get"
          ]
        },
        {
          "name": "_display_context",
          "args": [
            "self",
            "task_title",
            "related_docs",
            "previous_tasks",
            "project_context"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "컨텍스트 정보 표시",
          "calls": [
            "print",
            "len",
            "print",
            "print",
            "len",
            "print",
            "task.get",
            "print",
            "print",
            "project_context.get",
            "project_context.get"
          ]
        },
        {
          "name": "_update_task_context",
          "args": [
            "self",
            "task_id",
            "context_data"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "task_context.json 업데이트",
          "calls": [
            "Path",
            "task_context_path.exists",
            "open",
            "json.load",
            "<ast.Subscript object at 0x0000010C6A04ED40>.update",
            "open",
            "json.dump"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor": {
      "name": "WorkflowInstructor",
      "bases": [
        "BaseEventListener"
      ],
      "methods": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "<ast.Call object at 0x0000010C6A1EE500>.__init__",
            "super",
            "self._ensure_state_file"
          ]
        },
        {
          "name": "get_subscribed_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 주요 워크플로우 이벤트 구독",
          "calls": []
        },
        {
          "name": "_ensure_state_file",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 상태 파일 초기화",
          "calls": [
            "os.makedirs",
            "os.path.exists",
            "open",
            "json.dump"
          ]
        },
        {
          "name": "handle_event",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 이벤트별 AI 지시 생성",
          "calls": [
            "self._handle_plan_created",
            "self._handle_plan_started",
            "self._handle_task_started",
            "self._handle_task_completed",
            "self._handle_task_failed",
            "self._handle_plan_completed",
            "print"
          ]
        },
        {
          "name": "_handle_plan_created",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 생성 시 AI 지시",
          "calls": [
            "AIInstruction",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "instruction.add_action",
            "event.details.get",
            "instruction.add_action",
            "instruction.add_action",
            "instruction.save",
            "self._update_state"
          ]
        },
        {
          "name": "_handle_plan_started",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 시작 시 AI 지시",
          "calls": [
            "AIInstruction",
            "event.details.get",
            "event.details.get",
            "<ast.Call object at 0x0000010C6A162800>.lower",
            "<ast.Call object at 0x0000010C6A160E80>.replace",
            "event.details.get",
            "instruction.add_action",
            "event.details.get",
            "instruction.add_action",
            "instruction.save"
          ]
        },
        {
          "name": "_handle_task_started",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 시작 시 AI 지시",
          "calls": [
            "AIInstruction",
            "event.details.get",
            "instruction.add_action",
            "event.details.get",
            "<ast.Call object at 0x0000010C6A0D99C0>.lower",
            "event.details.get",
            "instruction.add_action",
            "instruction.add_action",
            "instruction.save",
            "self._update_state"
          ]
        },
        {
          "name": "_handle_task_completed",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 완료는 TaskCompletionInstructor가 처리하므로 여기서는 상태만 업데이트",
          "calls": [
            "self._update_state",
            "event.details.get",
            "event.timestamp.isoformat"
          ]
        },
        {
          "name": "_handle_task_failed",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "태스크 실패는 ErrorInstructor가 처리하므로 여기서는 복구 전략만 추가",
          "calls": [
            "AIInstruction",
            "event.details.get",
            "instruction.add_action",
            "instruction.set_priority",
            "instruction.save"
          ]
        },
        {
          "name": "_handle_plan_completed",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 완료 시 종합 보고 및 마무리 작업 지시",
          "calls": [
            "AIInstruction",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "instruction.add_action",
            "instruction.add_action",
            "event.details.get",
            "event.details.get",
            "instruction.add_action",
            "event.details.get",
            "event.details.get",
            "max",
            "event.details.get",
            "instruction.add_action",
            "event.details.get",
            "event.details.get",
            "event.details.get",
            "self._generate_achievements_summary",
            "instruction.add_action",
            "instruction.save",
            "self._update_state"
          ]
        },
        {
          "name": "_update_state",
          "args": [
            "self",
            "key",
            "value"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "워크플로우 상태 업데이트",
          "calls": [
            "open",
            "json.load",
            "os.path.getmtime",
            "open",
            "json.dump",
            "print"
          ]
        },
        {
          "name": "_generate_achievements_summary",
          "args": [
            "self",
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "플랜 성과 요약 생성",
          "calls": [
            "event.details.get",
            "achievements.append",
            "event.details.get",
            "event.details.get",
            "achievements.append",
            "event.details.get",
            "event.details.get",
            "achievements.append",
            "event.details.get",
            "<ast.Constant object at 0x0000010C6A00AAD0>.join"
          ]
        }
      ],
      "decorators": []
    },
    "workflow.v3.tests.test_event_publishing.TestEventPublishing": {
      "name": "TestEventPublishing",
      "bases": [
        "unittest.TestCase"
      ],
      "methods": [
        {
          "name": "setUp",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "테스트 환경 설정",
          "calls": [
            "tempfile.mkdtemp",
            "Path",
            "self.memory_dir.mkdir",
            "self._register_event_capture",
            "WorkflowManager.clear_instance"
          ]
        },
        {
          "name": "tearDown",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "테스트 환경 정리",
          "calls": [
            "shutil.rmtree",
            "WorkflowManager.clear_instance",
            "event_bus._subscribers.clear"
          ]
        },
        {
          "name": "_register_event_capture",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "모든 이벤트를 캡처하는 핸들러 등록",
          "calls": []
        },
        {
          "name": "capture_event",
          "args": [
            "event"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": null,
          "calls": [
            "self.captured_events.append",
            "print"
          ]
        },
        {
          "name": "test_event_bus_basic",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "EventBus 기본 기능 테스트",
          "calls": [
            "print",
            "Event",
            "event_bus.publish",
            "self.assertEqual",
            "len",
            "self.assertEqual",
            "self.assertEqual",
            "print"
          ]
        },
        {
          "name": "test_workflow_manager_events",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "WorkflowManager의 이벤트 발행 테스트",
          "calls": [
            "print",
            "WorkflowManager",
            "wm.start_plan",
            "self.assertEqual",
            "len",
            "next",
            "self.assertEqual",
            "created_event.data.get",
            "wm.add_task",
            "self.assertEqual",
            "len",
            "self.assertEqual",
            "<ast.Subscript object at 0x0000010C6A0DB220>.data.get",
            "print",
            "len"
          ]
        },
        {
          "name": "test_task_context_integration",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "TaskContextManager 통합 테스트",
          "calls": [
            "print",
            "TaskContextManager",
            "str",
            "TaskContextEventHandlers",
            "handlers.register_all",
            "WorkflowManager",
            "wm.start_plan",
            "self.assertTrue",
            "context_file.exists",
            "open",
            "json.load",
            "self.assertIn",
            "context_data.get",
            "self.assertEqual",
            "print"
          ]
        },
        {
          "name": "test_event_chain",
          "args": [
            "self"
          ],
          "decorators": [],
          "is_async": false,
          "docstring": "전체 이벤트 체인 테스트",
          "calls": [
            "print",
            "TaskContextManager",
            "str",
            "TaskContextEventHandlers",
            "handlers.register_all",
            "WorkflowManager",
            "wm.start_plan",
            "wm.add_task",
            "wm.add_task",
            "EventBuilder.task_started",
            "wm._add_event",
            "wm.complete_task",
            "print",
            "len",
            "event_types.get",
            "print",
            "event_types.items",
            "print",
            "self.assertIn",
            "self.assertIn",
            "self.assertIn",
            "self.assertIn",
            "open",
            "json.load",
            "<ast.Subscript object at 0x0000010C6A04C8E0>.get",
            "self.assertIsNotNone",
            "self.assertEqual",
            "print"
          ]
        }
      ],
      "decorators": []
    },
    "events.unified_event_types.EventType": {
      "name": "EventType",
      "bases": [
        "str",
        "Enum"
      ],
      "methods": [],
      "decorators": []
    },
    "events.unified_event_types.EventTypes": {
      "name": "EventTypes",
      "bases": [],
      "methods": [],
      "decorators": []
    }
  },
  "function_definitions": {
    "core.cache_manager.CacheManager.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "cache_dir"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "Path",
        "self.cache_dir.mkdir",
        "defaultdict",
        "Lock",
        "self._load_metadata"
      ]
    },
    "core.cache_manager.CacheManager._load_metadata": {
      "name": "_load_metadata",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 메타데이터 로드",
      "calls": [
        "self.metadata_file.exists",
        "open",
        "json.load",
        "data.get",
        "data.get",
        "defaultdict",
        "deps.items",
        "set",
        "logger.error"
      ]
    },
    "core.cache_manager.CacheManager._save_metadata": {
      "name": "_save_metadata",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 메타데이터 저장",
      "calls": [
        "list",
        "self._dependencies.items",
        "<ast.Call object at 0x0000010C6A054790>.isoformat",
        "datetime.now",
        "open",
        "json.dump",
        "logger.error"
      ]
    },
    "core.cache_manager.CacheManager._calculate_file_hash": {
      "name": "_calculate_file_hash",
      "args": [
        "self",
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일의 해시 계산",
      "calls": [
        "filepath.exists",
        "filepath.stat",
        "open",
        "<ast.Call object at 0x0000010C6A03C580>.hexdigest",
        "hashlib.md5",
        "f.read",
        "hashlib.md5",
        "open",
        "hasher.update",
        "f.read",
        "f.seek",
        "hasher.update",
        "f.read",
        "f.seek",
        "hasher.update",
        "f.read",
        "hasher.update",
        "<ast.Call object at 0x0000010C6A03F850>.encode",
        "str",
        "hasher.hexdigest",
        "logger.error"
      ]
    },
    "core.cache_manager.CacheManager._is_file_changed": {
      "name": "_is_file_changed",
      "args": [
        "self",
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일이 변경되었는지 확인",
      "calls": [
        "<ast.Call object at 0x0000010C6A03FF40>.resolve",
        "Path",
        "self._calculate_file_hash",
        "self._file_hashes.get",
        "str",
        "str"
      ]
    },
    "core.cache_manager.CacheManager.track_dependency": {
      "name": "track_dependency",
      "args": [
        "self",
        "cache_key",
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 항목이 의존하는 파일 추적",
      "calls": [
        "<ast.Call object at 0x0000010C6A030A60>.resolve",
        "Path",
        "<ast.Subscript object at 0x0000010C6A030B80>.add",
        "str",
        "str",
        "self._calculate_file_hash",
        "str"
      ]
    },
    "core.cache_manager.CacheManager.check_invalidation": {
      "name": "check_invalidation",
      "args": [
        "self",
        "cache_key"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 항목이 무효화되어야 하는지 확인",
      "calls": [
        "self._dependencies.get",
        "set",
        "self._is_file_changed",
        "Path",
        "logger.info"
      ]
    },
    "core.cache_manager.CacheManager.get": {
      "name": "get",
      "args": [
        "self",
        "key",
        "check_dependencies"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시에서 값 가져오기",
      "calls": [
        "self.check_invalidation",
        "self.invalidate",
        "cache_file.exists",
        "open",
        "json.load",
        "datetime.fromisoformat",
        "datetime.now",
        "self.invalidate",
        "data.get",
        "logger.error"
      ]
    },
    "core.cache_manager.CacheManager.set": {
      "name": "set",
      "args": [
        "self",
        "key",
        "value",
        "ttl",
        "dependencies"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시에 값 저장",
      "calls": [
        "self.track_dependency",
        "<ast.Call object at 0x0000010C6A00A7D0>.isoformat",
        "datetime.now",
        "<ast.Call object at 0x0000010C6A00A830>.timestamp",
        "datetime.now",
        "open",
        "json.dump",
        "self._save_metadata",
        "logger.error"
      ]
    },
    "core.cache_manager.CacheManager.invalidate": {
      "name": "invalidate",
      "args": [
        "self",
        "key"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 캐시 항목 무효화",
      "calls": [
        "self._cache.pop",
        "cache_file.exists",
        "cache_file.unlink",
        "self._dependencies.pop",
        "logger.info"
      ]
    },
    "core.cache_manager.CacheManager.invalidate_by_file": {
      "name": "invalidate_by_file",
      "args": [
        "self",
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 파일에 의존하는 모든 캐시 무효화",
      "calls": [
        "<ast.Call object at 0x0000010C6A04C760>.resolve",
        "Path",
        "self._is_file_changed",
        "list",
        "self._dependencies.items",
        "str",
        "self.invalidate",
        "invalidated.append",
        "self._save_metadata"
      ]
    },
    "core.cache_manager.CacheManager.clear_all": {
      "name": "clear_all",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 캐시 삭제",
      "calls": [
        "self._cache.clear",
        "self._dependencies.clear",
        "self._file_hashes.clear",
        "self.cache_dir.glob",
        "cache_file.unlink",
        "self._save_metadata",
        "logger.info"
      ]
    },
    "core.cache_manager.CacheManager.get_statistics": {
      "name": "get_statistics",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 통계",
      "calls": [
        "list",
        "self.cache_dir.glob",
        "sum",
        "f.stat",
        "len",
        "len",
        "len",
        "len",
        "str"
      ]
    },
    "core.cache_manager.get_cache_manager": {
      "name": "get_cache_manager",
      "args": [
        "cache_dir"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "싱글톤 캐시 매니저 인스턴스 가져오기",
      "calls": [
        "Path",
        "get_memory_path",
        "CacheManager"
      ]
    },
    "core.context_manager.CacheAPI.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "cache_manager"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Args:\n    cache_manager: CacheManager 인스턴스 또는 None",
      "calls": []
    },
    "core.context_manager.CacheAPI.get": {
      "name": "get",
      "args": [
        "self",
        "key",
        "default"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시에서 값 조회",
      "calls": [
        "self._manager.get",
        "self._fallback_cache.get"
      ]
    },
    "core.context_manager.CacheAPI.set": {
      "name": "set",
      "args": [
        "self",
        "key",
        "value",
        "ttl",
        "dependencies"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시에 값 저장",
      "calls": [
        "Path",
        "self._manager.set"
      ]
    },
    "core.context_manager.CacheAPI.invalidate": {
      "name": "invalidate",
      "args": [
        "self",
        "key"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 키 무효화",
      "calls": [
        "self._manager.invalidate",
        "self._fallback_cache.pop"
      ]
    },
    "core.context_manager.CacheAPI.invalidate_by_file": {
      "name": "invalidate_by_file",
      "args": [
        "self",
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일 변경에 따른 무효화",
      "calls": [
        "self._manager.invalidate_by_file",
        "Path",
        "list",
        "self._fallback_cache.keys",
        "self._fallback_cache.clear"
      ]
    },
    "core.context_manager.CacheAPI.clear": {
      "name": "clear",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "전체 캐시 클리어",
      "calls": [
        "self._manager.clear_all",
        "self._fallback_cache.clear"
      ]
    },
    "core.context_manager.CacheAPI.exists": {
      "name": "exists",
      "args": [
        "self",
        "key"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "키 존재 여부 확인",
      "calls": [
        "self._manager.get"
      ]
    },
    "core.context_manager.CacheAPI.get_stats": {
      "name": "get_stats",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 통계",
      "calls": [
        "self._manager.get_statistics",
        "len"
      ]
    },
    "core.context_manager.CacheAPI.set_with_file_dependency": {
      "name": "set_with_file_dependency",
      "args": [
        "self",
        "key",
        "value",
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일 의존성과 함께 캐시 설정 (편의 메서드)",
      "calls": [
        "self.set"
      ]
    },
    "core.context_manager.ContextManager.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "core.context_manager.ContextManager.get_current_project_name": {
      "name": "get_current_project_name",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 프로젝트 이름을 반환합니다.",
      "calls": []
    },
    "core.context_manager.ContextManager.cache": {
      "name": "cache",
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_async": false,
      "docstring": "레거시 호환성을 위한 캐시 접근자",
      "calls": [
        "hasattr",
        "hasattr"
      ]
    },
    "core.context_manager.ContextManager.initialize": {
      "name": "initialize",
      "args": [
        "self",
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트 매니저를 초기화합니다.",
      "calls": [
        "self.get_current_project_name",
        "CacheAPI",
        "self.get_current_project_name",
        "self.load_all"
      ]
    },
    "core.context_manager.ContextManager._ensure_cache_manager": {
      "name": "_ensure_cache_manager",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 매니저를 지연 초기화합니다 (필요할 때만)",
      "calls": [
        "get_cache_dir",
        "get_cache_manager",
        "hasattr",
        "logger.debug",
        "logger.warning"
      ]
    },
    "core.context_manager.ContextManager.switch_project": {
      "name": "switch_project",
      "args": [
        "self",
        "new_project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트를 전환합니다.",
      "calls": [
        "print",
        "self.save_all",
        "print",
        "get_project_root",
        "project_root.exists",
        "ValueError",
        "switch_project_workflow",
        "self.load_all"
      ]
    },
    "core.context_manager.ContextManager.load_all": {
      "name": "load_all",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 데이터를 로드합니다.",
      "calls": [
        "self.get_current_project_name",
        "get_context_path",
        "context_path.exists",
        "read_json",
        "print",
        "len",
        "print",
        "self._migrate_old_cache",
        "get_workflow_path",
        "workflow_path.exists",
        "read_json",
        "print",
        "print",
        "self._migrate_old_workflow"
      ]
    },
    "core.context_manager.ContextManager.save_all": {
      "name": "save_all",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 데이터를 저장합니다.",
      "calls": [
        "get_context_path",
        "self.context.items",
        "os.path.join",
        "os.path.dirname",
        "os.makedirs",
        "os.path.join",
        "write_json",
        "<ast.Call object at 0x0000010C6A057970>.isoformat",
        "datetime.now",
        "Path",
        "print",
        "<ast.Call object at 0x0000010C6A057550>.isoformat",
        "datetime.now",
        "write_json",
        "Path",
        "print",
        "print",
        "get_workflow_path",
        "write_json",
        "Path",
        "print",
        "print"
      ]
    },
    "core.context_manager.ContextManager.save": {
      "name": "save",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "save_all의 별칭 (기존 코드 호환성)",
      "calls": [
        "self.save_all"
      ]
    },
    "core.context_manager.ContextManager._migrate_old_cache": {
      "name": "_migrate_old_cache",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "기존 캐시 파일들을 새 구조로 마이그레이션합니다.",
      "calls": [
        "Path",
        "old_cache_dir.exists",
        "print",
        "core_file.exists",
        "open",
        "json.load",
        "analyzed_file.exists",
        "open",
        "json.load"
      ]
    },
    "core.context_manager.ContextManager._migrate_old_workflow": {
      "name": "_migrate_old_workflow",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "기존 워크플로우 데이터를 마이그레이션합니다.",
      "calls": [
        "Path",
        "old_workflow.exists",
        "open",
        "json.load",
        "print",
        "Path",
        "old_cache_dir.exists",
        "filepath.exists",
        "open",
        "<ast.Call object at 0x0000010C6A00B2B0>.replace",
        "cache_file.replace",
        "json.load"
      ]
    },
    "core.context_manager.ContextManager.update_context": {
      "name": "update_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트를 업데이트합니다.",
      "calls": [
        "len",
        "hasattr",
        "self._cache_api.set",
        "dependencies.append",
        "Path",
        "self._cache_manager.set",
        "self.context.update",
        "hasattr",
        "kwargs.items",
        "self._cache_api.set",
        "kwargs.items",
        "self._cache_manager.set"
      ]
    },
    "core.context_manager.ContextManager.update_cache": {
      "name": "update_cache",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "update_context의 별칭 (기존 코드 호환성)",
      "calls": [
        "self.update_context"
      ]
    },
    "core.context_manager.ContextManager.get_value": {
      "name": "get_value",
      "args": [
        "self",
        "key",
        "default"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트에서 값을 가져옵니다.",
      "calls": [
        "hasattr",
        "str",
        "self._cache_api.get",
        "self.context.get",
        "hasattr",
        "str",
        "self._cache_api.set"
      ]
    },
    "core.context_manager.ContextManager.get_context": {
      "name": "get_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "전체 컨텍스트를 반환합니다 (최적화된 버전).",
      "calls": [
        "self.context.items"
      ]
    },
    "core.context_manager.ContextManager.get": {
      "name": "get",
      "args": [
        "self",
        "key",
        "default"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "get_value의 별칭",
      "calls": [
        "self.get_value"
      ]
    },
    "core.context_manager.ContextManager.track_file_access": {
      "name": "track_file_access",
      "args": [
        "self",
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일 접근을 추적합니다.",
      "calls": [
        "<ast.Call object at 0x0000010C6A04C430>.isoformat",
        "datetime.now",
        "<ast.Subscript object at 0x0000010C6A086B90>.append",
        "self._cache_manager.invalidate_by_file",
        "Path",
        "print",
        "len"
      ]
    },
    "core.context_manager.ContextManager.track_function_edit": {
      "name": "track_function_edit",
      "args": [
        "self",
        "file",
        "function",
        "changes"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "함수 수정을 추적합니다.",
      "calls": [
        "<ast.Call object at 0x0000010C6A0877C0>.isoformat",
        "datetime.now",
        "<ast.Subscript object at 0x0000010C6A0878E0>.append"
      ]
    },
    "core.context_manager.ContextManager.update_workflow_summary": {
      "name": "update_workflow_summary",
      "args": [
        "self",
        "summary"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 요약 정보 업데이트",
      "calls": [
        "hasattr",
        "summary.get",
        "summary.get",
        "summary.get",
        "summary.get",
        "<ast.Call object at 0x0000010C6A0D8460>.isoformat",
        "datetime.now",
        "self.save"
      ]
    },
    "core.context_manager.ContextManager.add_workflow_event": {
      "name": "add_workflow_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 이벤트 추가 (중요 이벤트만)",
      "calls": [
        "hasattr",
        "<ast.Subscript object at 0x0000010C6A0D8CA0>.append",
        "len",
        "self.save"
      ]
    },
    "core.context_manager.ContextManager.get_task_context": {
      "name": "get_task_context",
      "args": [
        "self",
        "task_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 태스크의 컨텍스트 조회",
      "calls": [
        "hasattr",
        "<ast.Subscript object at 0x0000010C6A0D9660>.get"
      ]
    },
    "core.context_manager.ContextManager.clear_workflow_data": {
      "name": "clear_workflow_data",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 데이터 초기화",
      "calls": [
        "hasattr",
        "self.save"
      ]
    },
    "core.context_manager.ContextManager.get_recent_workflow_events": {
      "name": "get_recent_workflow_events",
      "args": [
        "self",
        "limit"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "최근 워크플로우 이벤트 조회",
      "calls": [
        "hasattr"
      ]
    },
    "core.context_manager.ContextManager.invalidate_cache": {
      "name": "invalidate_cache",
      "args": [
        "self",
        "key"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 캐시 항목 무효화",
      "calls": [
        "hasattr",
        "self._cache_api.invalidate",
        "hasattr",
        "self._fallback_cache.pop",
        "self._ensure_cache_manager",
        "self._cache_manager.invalidate"
      ]
    },
    "core.context_manager.ContextManager.invalidate_cache_by_file": {
      "name": "invalidate_cache_by_file",
      "args": [
        "self",
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일 변경에 따른 캐시 무효화",
      "calls": [
        "self._ensure_cache_manager",
        "self._cache_manager.invalidate_by_file",
        "Path",
        "hasattr",
        "self._cache_api.clear",
        "hasattr",
        "self._fallback_cache.clear"
      ]
    },
    "core.context_manager.ContextManager.get_cache_statistics": {
      "name": "get_cache_statistics",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 통계 조회",
      "calls": [
        "hasattr",
        "self._cache_api.get_stats",
        "len",
        "getattr",
        "self._ensure_cache_manager",
        "self._cache_manager.get_statistics",
        "stats.update"
      ]
    },
    "core.context_manager.ContextManager.set_cache_with_dependencies": {
      "name": "set_cache_with_dependencies",
      "args": [
        "self",
        "key",
        "value",
        "dependencies"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "의존성이 있는 캐시 항목 설정",
      "calls": [
        "hasattr",
        "self._cache_api.set_with_file_dependency",
        "self._ensure_cache_manager",
        "Path",
        "self._cache_manager.set"
      ]
    },
    "core.context_manager.ContextManager.get_tracking": {
      "name": "get_tracking",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "통합 tracking 데이터 반환",
      "calls": []
    },
    "core.context_manager.ContextManager.get_file_access_history": {
      "name": "get_file_access_history",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일 접근 이력 반환 (레거시 호환성)",
      "calls": [
        "self.get_tracking",
        "<ast.Subscript object at 0x0000010C6A0FDEA0>.items",
        "file_data.get",
        "history.append",
        "op.get",
        "sorted"
      ]
    },
    "core.context_manager.ContextManager.get_error_log": {
      "name": "get_error_log",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 로그 반환 (레거시 호환성)",
      "calls": [
        "self.get_tracking",
        "tracking.get"
      ]
    },
    "core.context_manager.ContextManager.get_tracking_statistics": {
      "name": "get_tracking_statistics",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "추적 통계 반환",
      "calls": [
        "self.get_tracking",
        "<ast.Call object at 0x0000010C6A0FEFB0>.copy",
        "tracking.get",
        "len",
        "tracking.get",
        "len",
        "tracking.get"
      ]
    },
    "core.context_manager.get_context_manager": {
      "name": "get_context_manager",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "싱글톤 ContextManager 인스턴스를 반환합니다.",
      "calls": [
        "ContextManager",
        "_context_manager_instance.initialize"
      ]
    },
    "core.context_manager_refactored.ContextManager.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "base_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "ContextManager 초기화",
      "calls": [
        "Path",
        "self.base_path.mkdir",
        "self._load_context",
        "self._register_event_handlers",
        "logger.info"
      ]
    },
    "core.context_manager_refactored.ContextManager._register_event_handlers": {
      "name": "_register_event_handlers",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 핸들러 등록",
      "calls": [
        "event_bus.subscribe",
        "event_bus.subscribe",
        "event_bus.subscribe",
        "event_bus.subscribe",
        "event_bus.subscribe",
        "logger.debug"
      ]
    },
    "core.context_manager_refactored.ContextManager.switch_project": {
      "name": "switch_project",
      "args": [
        "self",
        "new_project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 전환 (이벤트 기반)\n\n더 이상 WorkflowManager를 직접 호출하지 않고,\nPROJECT_SWITCHED 이벤트를 발행합니다.",
      "calls": [
        "self.save_all",
        "logger.info",
        "self._load_context",
        "create_project_event",
        "<ast.Call object at 0x0000010C6A036A10>.isoformat",
        "datetime.now",
        "event_bus.publish",
        "logger.info",
        "create_context_event",
        "<ast.Call object at 0x0000010C6A05EA40>.isoformat",
        "datetime.now",
        "event_bus.publish",
        "logger.error"
      ]
    },
    "core.context_manager_refactored.ContextManager._on_project_loaded": {
      "name": "_on_project_loaded",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "PROJECT_LOADED 이벤트 핸들러",
      "calls": [
        "hasattr",
        "logger.info",
        "hasattr",
        "self.workflow_data.update",
        "self._save_workflow"
      ]
    },
    "core.context_manager_refactored.ContextManager._on_plan_created": {
      "name": "_on_plan_created",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "PLAN_CREATED 이벤트 핸들러",
      "calls": [
        "hasattr",
        "event.payload.get",
        "event.payload.get",
        "event.timestamp.isoformat",
        "self.add_workflow_event",
        "event.timestamp.isoformat",
        "logger.debug"
      ]
    },
    "core.context_manager_refactored.ContextManager._on_plan_updated": {
      "name": "_on_plan_updated",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "PLAN_UPDATED 이벤트 핸들러",
      "calls": [
        "hasattr",
        "self.update_workflow_summary"
      ]
    },
    "core.context_manager_refactored.ContextManager._on_plan_completed": {
      "name": "_on_plan_completed",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "PLAN_COMPLETED 이벤트 핸들러",
      "calls": [
        "hasattr",
        "self.add_workflow_event",
        "event.payload.get",
        "event.timestamp.isoformat"
      ]
    },
    "core.context_manager_refactored.ContextManager._on_task_completed": {
      "name": "_on_task_completed",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "TASK_COMPLETED 이벤트 핸들러",
      "calls": [
        "hasattr",
        "event.payload.get",
        "event.payload.get",
        "event.timestamp.isoformat",
        "self.add_workflow_event",
        "event.timestamp.isoformat"
      ]
    },
    "core.context_manager_refactored.ContextManager._load_context": {
      "name": "_load_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트 파일 로드",
      "calls": [
        "self.context_file.exists",
        "open",
        "json.load",
        "logger.debug",
        "logger.error",
        "self._load_workflow"
      ]
    },
    "core.context_manager_refactored.ContextManager._load_workflow": {
      "name": "_load_workflow",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 데이터 로드",
      "calls": [
        "self.workflow_file.exists",
        "open",
        "json.load",
        "logger.error"
      ]
    },
    "core.context_manager_refactored.ContextManager.save_all": {
      "name": "save_all",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 컨텍스트 데이터 저장",
      "calls": [
        "self._save_context",
        "self._save_workflow",
        "create_context_event",
        "<ast.Call object at 0x0000010C6A076CE0>.isoformat",
        "datetime.now",
        "event_bus.publish"
      ]
    },
    "core.context_manager_refactored.ContextManager._save_context": {
      "name": "_save_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트 파일 저장",
      "calls": [
        "self.context_file.exists",
        "open",
        "json.load",
        "open",
        "json.dump",
        "logger.debug",
        "logger.error"
      ]
    },
    "core.context_manager_refactored.ContextManager._save_workflow": {
      "name": "_save_workflow",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 데이터 저장",
      "calls": [
        "self.workflow_file.exists",
        "open",
        "json.load",
        "open",
        "json.dump",
        "logger.error"
      ]
    },
    "core.context_manager_refactored.ContextManager.update_workflow_summary": {
      "name": "update_workflow_summary",
      "args": [
        "self",
        "summary"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 요약 정보 업데이트",
      "calls": [
        "<ast.Subscript object at 0x0000010C6A04E3E0>.update",
        "<ast.Call object at 0x0000010C6A04C4F0>.isoformat",
        "datetime.now",
        "self._save_workflow"
      ]
    },
    "core.context_manager_refactored.ContextManager.add_workflow_event": {
      "name": "add_workflow_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 이벤트 추가",
      "calls": [
        "<ast.Subscript object at 0x0000010C6A04C130>.append",
        "len",
        "self._save_workflow"
      ]
    },
    "core.context_manager_refactored.ContextManager.get_task_context": {
      "name": "get_task_context",
      "args": [
        "self",
        "task_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 태스크의 컨텍스트 조회",
      "calls": [
        "self.context_data.get",
        "task_contexts.get"
      ]
    },
    "core.context_manager_refactored.ContextManager.clear_workflow_data": {
      "name": "clear_workflow_data",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 데이터 초기화",
      "calls": [
        "self._save_workflow"
      ]
    },
    "core.context_manager_refactored.ContextManager.get_recent_workflow_events": {
      "name": "get_recent_workflow_events",
      "args": [
        "self",
        "limit"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "최근 워크플로우 이벤트 조회",
      "calls": [
        "self.workflow_data.get"
      ]
    },
    "core.context_manager_refactored.ContextManager.cleanup": {
      "name": "cleanup",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "정리 작업 (이벤트 핸들러 제거)",
      "calls": [
        "event_bus.unsubscribe",
        "event_bus.unsubscribe",
        "event_bus.unsubscribe",
        "event_bus.unsubscribe",
        "event_bus.unsubscribe",
        "self.save_all",
        "logger.info"
      ]
    },
    "core.error_reporter.ErrorReporter.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "core.error_reporter.ErrorReporter.report": {
      "name": "report",
      "args": [
        "self",
        "error",
        "location",
        "cause",
        "attempted_solutions",
        "next_steps"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 보고 및 출력\n\nArgs:\n    error: 예외 객체 또는 에러 메시지\n    location: 에러 발생 위치\n    cause: 추정 원인\n    attempted_solutions: 시도한 해결책 목록\n    next_steps: 다음 단계 제안\n    \nReturns:\n    ErrorReport: 생성된 에러 보고",
      "calls": [
        "isinstance",
        "type",
        "str",
        "traceback.extract_tb",
        "str",
        "ErrorReport",
        "<ast.Call object at 0x0000010C6A034B80>.isoformat",
        "datetime.now",
        "self._print_report",
        "self._save_to_log"
      ]
    },
    "core.error_reporter.ErrorReporter._print_report": {
      "name": "_print_report",
      "args": [
        "self",
        "report"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 보고를 콘솔에 출력",
      "calls": [
        "print",
        "self.report_template.format",
        "self._format_list",
        "self._format_list"
      ]
    },
    "core.error_reporter.ErrorReporter._format_list": {
      "name": "_format_list",
      "args": [
        "self",
        "items"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스트를 포맷팅",
      "calls": [
        "<ast.Constant object at 0x0000010C6A04F910>.join",
        "enumerate"
      ]
    },
    "core.error_reporter.ErrorReporter._save_to_log": {
      "name": "_save_to_log",
      "args": [
        "self",
        "report"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 로그 저장",
      "calls": [
        "<ast.Call object at 0x0000010C6A04EF50>.strftime",
        "datetime.now",
        "log_file.exists",
        "open",
        "json.load",
        "logs.append",
        "asdict",
        "open",
        "json.dump"
      ]
    },
    "core.project_storage.ProjectStorageManager.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "get_project_root",
        "get_memory_dir",
        "get_context_path",
        "get_workflow_path",
        "get_cache_dir",
        "get_backup_dir",
        "self.ensure_memory_structure"
      ]
    },
    "core.project_storage.ProjectStorageManager.ensure_memory_structure": {
      "name": "ensure_memory_structure",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "필수 디렉토리 구조 생성",
      "calls": [
        "ensure_dir",
        "logger.debug"
      ]
    },
    "core.project_storage.ProjectStorageManager.load_project_state": {
      "name": "load_project_state",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트의 모든 상태를 로드\n\nReturns:\n    {\n        'context': {...},\n        'workflow': {...},\n        'cache': {\n            'file_directory': [...],\n            'analyzed_files': [...],\n            'ast_cache': {...}\n        }\n    }",
      "calls": [
        "read_json",
        "read_json",
        "self.cache_files.items",
        "cache_path.exists",
        "read_json",
        "logger.info"
      ]
    },
    "core.project_storage.ProjectStorageManager.save_project_state": {
      "name": "save_project_state",
      "args": [
        "self",
        "context",
        "workflow",
        "cache_data"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 상태를 원자적으로 저장\n\nArgs:\n    context: context.json에 저장할 데이터\n    workflow: workflow.json에 저장할 데이터  \n    cache_data: 캐시 파일들에 저장할 데이터 (선택적)\n\nReturns:\n    성공 여부",
      "calls": [
        "<ast.Call object at 0x0000010C6A030400>.isoformat",
        "datetime.now",
        "write_json",
        "logger.error",
        "write_json",
        "logger.error",
        "cache_data.items",
        "write_json",
        "logger.warning",
        "logger.info",
        "logger.error"
      ]
    },
    "core.project_storage.ProjectStorageManager.update_cache_file": {
      "name": "update_cache_file",
      "args": [
        "self",
        "cache_name",
        "data"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 캐시 파일 업데이트\n\nArgs:\n    cache_name: 캐시 이름 (file_directory, analyzed_files, ast_cache 등)\n    data: 저장할 데이터\n\nReturns:\n    성공 여부",
      "calls": [
        "logger.error",
        "<ast.Call object at 0x0000010C6A034070>.isoformat",
        "datetime.now",
        "write_json"
      ]
    },
    "core.project_storage.ProjectStorageManager.get_cache_data": {
      "name": "get_cache_data",
      "args": [
        "self",
        "cache_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 캐시 데이터 읽기\n\nArgs:\n    cache_name: 캐시 이름\n\nReturns:\n    캐시 데이터 또는 None",
      "calls": [
        "cache_path.exists",
        "read_json",
        "isinstance",
        "cache_content.get"
      ]
    },
    "core.project_storage.ProjectStorageManager.create_backup": {
      "name": "create_backup",
      "args": [
        "self",
        "include_cache"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 상태 백업 생성\n\nArgs:\n    include_cache: 캐시 파일도 백업할지 여부\n\nReturns:\n    백업 디렉토리 경로 또는 None",
      "calls": [
        "<ast.Call object at 0x0000010C6A036200>.strftime",
        "datetime.now",
        "self.context_path.exists",
        "ensure_dir",
        "backup_file",
        "self.workflow_path.exists",
        "ensure_dir",
        "backup_file",
        "ensure_dir",
        "self.cache_files.items",
        "cache_path.exists",
        "backup_file",
        "logger.info",
        "logger.error"
      ]
    },
    "core.project_storage.ProjectStorageManager.get_file_paths": {
      "name": "get_file_paths",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 관리 파일 경로 반환",
      "calls": [
        "self.cache_files.items"
      ]
    },
    "core.project_storage.ProjectStorageManager.get_storage_info": {
      "name": "get_storage_info",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "스토리지 상태 정보 반환",
      "calls": [
        "str",
        "<ast.Call object at 0x0000010C6A00AE00>.items",
        "self.get_file_paths",
        "path.is_file",
        "path.exists",
        "path.stat",
        "<ast.Call object at 0x0000010C6A00AE60>.isoformat",
        "datetime.fromtimestamp",
        "path.stat"
      ]
    },
    "core.project_storage.ProjectStorageManager.clear_cache": {
      "name": "clear_cache",
      "args": [
        "self",
        "cache_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 삭제\n\nArgs:\n    cache_name: 특정 캐시만 삭제 (None이면 모든 캐시)\n\nReturns:\n    성공 여부",
      "calls": [
        "cache_path.exists",
        "cache_path.unlink",
        "logger.info",
        "self.cache_files.items",
        "path.exists",
        "path.unlink",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.ai_instruction_executor.AIInstructionExecutor.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "instruction_file"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "Path"
      ]
    },
    "workflow.v3.ai_instruction_executor.AIInstructionExecutor.get_pending_instructions": {
      "name": "get_pending_instructions",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "대기 중인 지시서 목록 반환",
      "calls": [
        "self.instruction_file.exists",
        "open",
        "json.load",
        "data.get",
        "pending.sort",
        "priority_order.get",
        "x.get",
        "x.get",
        "logger.error"
      ]
    },
    "workflow.v3.ai_instruction_executor.AIInstructionExecutor.execute_next_instruction": {
      "name": "execute_next_instruction",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "다음 지시서를 실행",
      "calls": [
        "self.get_pending_instructions",
        "logger.info",
        "logger.info",
        "logger.info",
        "logger.info",
        "logger.info",
        "logger.info",
        "logger.info",
        "<ast.Call object at 0x0000010C6A030580>.isoformat",
        "datetime.now",
        "enumerate",
        "logger.info",
        "len",
        "self._execute_action",
        "<ast.Subscript object at 0x0000010C6A030F10>.append",
        "logger.info",
        "<ast.Subscript object at 0x0000010C6A0322C0>.append",
        "logger.error",
        "<ast.Subscript object at 0x0000010C6A032A10>.append",
        "str",
        "logger.error",
        "<ast.Call object at 0x0000010C6A0330A0>.isoformat",
        "datetime.now",
        "self._update_instruction_status",
        "logger.info",
        "logger.info",
        "logger.info",
        "len",
        "logger.info",
        "len",
        "logger.info"
      ]
    },
    "workflow.v3.ai_instruction_executor.AIInstructionExecutor._execute_action": {
      "name": "_execute_action",
      "args": [
        "self",
        "action"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "개별 작업 실행",
      "calls": [
        "action.get",
        "print",
        "print",
        "outputs.append",
        "str"
      ]
    },
    "workflow.v3.ai_instruction_executor.AIInstructionExecutor._update_instruction_status": {
      "name": "_update_instruction_status",
      "args": [
        "self",
        "instruction_id",
        "status",
        "result"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "지시서 상태 업데이트",
      "calls": [
        "open",
        "json.load",
        "<ast.Subscript object at 0x0000010C6A04FB20>.append",
        "<ast.Subscript object at 0x0000010C6A04E230>.append",
        "<ast.Subscript object at 0x0000010C6A04F730>.remove",
        "open",
        "json.dump",
        "logger.error"
      ]
    },
    "workflow.v3.ai_instruction_executor.AIInstructionExecutor.execute_all_pending": {
      "name": "execute_all_pending",
      "args": [
        "self",
        "max_count"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 대기 중인 지시 실행 (최대 개수 제한)",
      "calls": [
        "range",
        "self.execute_next_instruction",
        "results.append"
      ]
    },
    "workflow.v3.ai_instruction_executor.AIInstructionExecutor.get_execution_summary": {
      "name": "get_execution_summary",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "실행 요약 정보 반환",
      "calls": [
        "self.instruction_file.exists",
        "open",
        "json.load",
        "len",
        "data.get",
        "len",
        "data.get",
        "len",
        "data.get",
        "data.get",
        "<ast.Subscript object at 0x0000010C6A00B5B0>.get",
        "data.get",
        "logger.error",
        "str"
      ]
    },
    "workflow.v3.ai_instruction_executor.check_ai_instructions": {
      "name": "check_ai_instructions",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "AI 지시서 확인",
      "calls": [
        "AIInstructionExecutor",
        "executor.get_execution_summary",
        "print",
        "print",
        "summary.get",
        "print",
        "summary.get",
        "print",
        "summary.get",
        "summary.get",
        "print",
        "summary.get",
        "print"
      ]
    },
    "workflow.v3.ai_instruction_executor.execute_ai_instruction": {
      "name": "execute_ai_instruction",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "다음 AI 지시 실행",
      "calls": [
        "AIInstructionExecutor",
        "executor.execute_next_instruction"
      ]
    },
    "workflow.v3.ai_instruction_executor.execute_all_ai_instructions": {
      "name": "execute_all_ai_instructions",
      "args": [
        "max_count"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 대기 중인 AI 지시 실행",
      "calls": [
        "AIInstructionExecutor",
        "executor.execute_all_pending",
        "print",
        "len"
      ]
    },
    "workflow.v3.code_integration.WorkflowCodeIntegration.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "os.path.join",
        "WorkflowManager.get_instance",
        "CommandParser"
      ]
    },
    "workflow.v3.code_integration.WorkflowCodeIntegration.get_current_task_context": {
      "name": "get_current_task_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 태스크 컨텍스트 가져오기",
      "calls": [
        "self.manager.get_state",
        "state.current_plan.get_current_task"
      ]
    },
    "workflow.v3.code_integration.WorkflowCodeIntegration.record_code_execution": {
      "name": "record_code_execution",
      "args": [
        "self",
        "code",
        "result",
        "execution_time"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "코드 실행 기록",
      "calls": [
        "self.manager.get_state",
        "state.current_plan.get_current_task",
        "current_task.add_note",
        "len",
        "result.get",
        "self.manager._save_data"
      ]
    },
    "workflow.v3.code_integration.WorkflowCodeIntegration.auto_progress_task": {
      "name": "auto_progress_task",
      "args": [
        "self",
        "completion_note"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 자동 진행",
      "calls": [
        "self.manager.execute_command",
        "str"
      ]
    },
    "workflow.v3.code_integration.WorkflowCodeIntegration.get_workflow_status": {
      "name": "get_workflow_status",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 상태 조회",
      "calls": [
        "self.manager.execute_command",
        "str"
      ]
    },
    "workflow.v3.context_integration.ContextIntegration.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "self._initialize"
      ]
    },
    "workflow.v3.context_integration.ContextIntegration._initialize": {
      "name": "_initialize",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트 매니저 초기화",
      "calls": [
        "ContextManager",
        "hasattr",
        "logger.info",
        "logger.warning",
        "logger.error"
      ]
    },
    "workflow.v3.context_integration.ContextIntegration.is_available": {
      "name": "is_available",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트 연동 가능 여부",
      "calls": []
    },
    "workflow.v3.context_integration.ContextIntegration.sync_plan_summary": {
      "name": "sync_plan_summary",
      "args": [
        "self",
        "plan"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 플랜의 요약 정보만 동기화\n\nArgs:\n    plan: 현재 워크플로우 플랜\n    \nReturns:\n    성공 여부",
      "calls": [
        "self.is_available",
        "len",
        "len",
        "plan.updated_at.isoformat",
        "self.context_manager.update_workflow_summary",
        "logger.debug",
        "logger.error"
      ]
    },
    "workflow.v3.context_integration.ContextIntegration.record_event": {
      "name": "record_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "중요 이벤트만 컨텍스트에 기록\n\nArgs:\n    event: 워크플로우 이벤트\n    \nReturns:\n    성공 여부",
      "calls": [
        "self.is_available",
        "event.timestamp.isoformat",
        "self._extract_event_details",
        "self.context_manager.add_workflow_event",
        "logger.debug",
        "logger.error"
      ]
    },
    "workflow.v3.context_integration.ContextIntegration._extract_event_details": {
      "name": "_extract_event_details",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트에서 핵심 정보만 추출\n\nArgs:\n    event: 워크플로우 이벤트\n    \nReturns:\n    핵심 정보 딕셔너리",
      "calls": [
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "event.details.get"
      ]
    },
    "workflow.v3.context_integration.ContextIntegration.get_current_task_context": {
      "name": "get_current_task_context",
      "args": [
        "self",
        "task"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 태스크의 컨텍스트 정보 조회\n\nArgs:\n    task: 현재 태스크\n    \nReturns:\n    태스크 컨텍스트 정보",
      "calls": [
        "self.is_available",
        "self.context_manager.get_task_context",
        "context.update",
        "logger.error"
      ]
    },
    "workflow.v3.context_integration.ContextIntegration.clear_workflow_context": {
      "name": "clear_workflow_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 관련 컨텍스트 정보 초기화\n\nReturns:\n    성공 여부",
      "calls": [
        "self.is_available",
        "self.context_manager.clear_workflow_data",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.context_integration.ContextIntegration.get_recent_activity": {
      "name": "get_recent_activity",
      "args": [
        "self",
        "limit"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "최근 워크플로우 활동 조회\n\nArgs:\n    limit: 조회할 활동 수\n    \nReturns:\n    최근 활동 목록",
      "calls": [
        "self.is_available",
        "self.context_manager.get_recent_workflow_events",
        "logger.error"
      ]
    },
    "workflow.v3.context_integration.MockContextManager.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.context_integration.MockContextManager.update_workflow_summary": {
      "name": "update_workflow_summary",
      "args": [
        "self",
        "summary"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.context_integration.MockContextManager.add_workflow_event": {
      "name": "add_workflow_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "self.workflow_events.append",
        "len"
      ]
    },
    "workflow.v3.context_integration.MockContextManager.get_task_context": {
      "name": "get_task_context",
      "args": [
        "self",
        "task_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.context_integration.MockContextManager.clear_workflow_data": {
      "name": "clear_workflow_data",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "self.workflow_events.clear"
      ]
    },
    "workflow.v3.context_integration.MockContextManager.get_recent_workflow_events": {
      "name": "get_recent_workflow_events",
      "args": [
        "self",
        "limit"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.dispatcher.WorkflowDispatcher.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "project_name",
        "storage_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "WorkflowManager.get_instance",
        "CommandParser"
      ]
    },
    "workflow.v3.dispatcher.WorkflowDispatcher.execute": {
      "name": "execute",
      "args": [
        "self",
        "command"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "명령어 실행",
      "calls": [
        "self.manager.execute_command",
        "str",
        "str"
      ]
    },
    "workflow.v3.dispatcher.get_current_project_name": {
      "name": "get_current_project_name",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 프로젝트 이름 가져오기",
      "calls": [
        "os.environ.get",
        "os.getcwd",
        "os.path.basename"
      ]
    },
    "workflow.v3.dispatcher.get_dispatcher": {
      "name": "get_dispatcher",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "전역 디스패처 인스턴스 가져오기 - 프로젝트별로 관리 (개선됨)",
      "calls": [
        "get_current_project_name",
        "WorkflowManager.clear_instance",
        "WorkflowDispatcher",
        "WorkflowManager._instances.get"
      ]
    },
    "workflow.v3.dispatcher.execute_workflow_command": {
      "name": "execute_workflow_command",
      "args": [
        "command"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 명령어 실행 (공개 API)",
      "calls": [
        "get_dispatcher",
        "dispatcher.execute"
      ]
    },
    "workflow.v3.dispatcher.update_dispatcher_project": {
      "name": "update_dispatcher_project",
      "args": [
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "디스패처의 프로젝트 업데이트",
      "calls": [
        "WorkflowDispatcher"
      ]
    },
    "workflow.v3.enhanced_listener_integration.EnhancedListenerIntegration.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "workflow_manager",
        "helpers"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.enhanced_listener_integration.EnhancedListenerIntegration.initialize": {
      "name": "initialize",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 시스템 초기화",
      "calls": [
        "hasattr",
        "WorkflowEventAdapter",
        "self._register_all_listeners",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.enhanced_listener_integration.EnhancedListenerIntegration._register_all_listeners": {
      "name": "_register_all_listeners",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 리스너 자동 등록",
      "calls": [
        "TaskContextListener",
        "self._register_listener",
        "logger.info",
        "ErrorCollectorListener",
        "self._register_listener",
        "logger.info",
        "DocsGeneratorListener",
        "self._register_listener",
        "logger.info",
        "TaskAutoProgressListener",
        "self._register_listener",
        "logger.info",
        "PlanAutoArchiveListener",
        "self._register_listener",
        "logger.info",
        "ErrorHandlerListener",
        "self._register_listener",
        "logger.info",
        "logger.warning",
        "GitAutoCommitListener",
        "self._register_listener",
        "logger.info",
        "logger.warning"
      ]
    },
    "workflow.v3.enhanced_listener_integration.EnhancedListenerIntegration._register_listener": {
      "name": "_register_listener",
      "args": [
        "self",
        "name",
        "listener"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "개별 리스너 등록",
      "calls": [
        "self.event_adapter.add_workflow_listener",
        "logger.error"
      ]
    },
    "workflow.v3.enhanced_listener_integration.EnhancedListenerIntegration.get_status": {
      "name": "get_status",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 시스템 상태 조회",
      "calls": [
        "list",
        "self.listeners.keys",
        "self.listeners.items",
        "hasattr"
      ]
    },
    "workflow.v3.enhanced_listener_integration.EnhancedListenerIntegration.enable_listener": {
      "name": "enable_listener",
      "args": [
        "self",
        "name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 리스너 활성화",
      "calls": [
        "hasattr",
        "logger.info"
      ]
    },
    "workflow.v3.enhanced_listener_integration.EnhancedListenerIntegration.disable_listener": {
      "name": "disable_listener",
      "args": [
        "self",
        "name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 리스너 비활성화",
      "calls": [
        "hasattr",
        "logger.info"
      ]
    },
    "workflow.v3.enhanced_listener_integration.integrate_enhanced_listeners": {
      "name": "integrate_enhanced_listeners",
      "args": [
        "workflow_manager",
        "helpers"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우에 향상된 리스너 시스템 통합\n\nArgs:\n    workflow_manager: WorkflowManager 인스턴스\n    helpers: helpers 객체 (선택사항)\n    \nReturns:\n    EnhancedListenerIntegration 인스턴스 또는 None",
      "calls": [
        "EnhancedListenerIntegration",
        "integration.initialize"
      ]
    },
    "workflow.v3.enhanced_listener_integration.test_enhanced_integration": {
      "name": "test_enhanced_integration",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "향상된 통합 시스템 테스트",
      "calls": [
        "print"
      ]
    },
    "workflow.v3.enhanced_listener_integration.MockWorkflowManager.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.errors.WorkflowError.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "message",
        "code",
        "details"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A059F90>.__init__",
        "super"
      ]
    },
    "workflow.v3.errors.ValidationError.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "message",
        "details"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A059AB0>.__init__",
        "super"
      ]
    },
    "workflow.v3.errors.StorageError.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "message",
        "details"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A0596C0>.__init__",
        "super"
      ]
    },
    "workflow.v3.errors.ExecutionError.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "message",
        "details"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A0592D0>.__init__",
        "super"
      ]
    },
    "workflow.v3.errors.InputValidator.validate_non_empty_string": {
      "name": "validate_non_empty_string",
      "args": [
        "value",
        "field_name"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "비어있지 않은 문자열 검증",
      "calls": [
        "value.strip",
        "WorkflowError"
      ]
    },
    "workflow.v3.errors.InputValidator.validate_task_id": {
      "name": "validate_task_id",
      "args": [
        "task_id"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "태스크 ID 검증",
      "calls": [
        "InputValidator.validate_non_empty_string"
      ]
    },
    "workflow.v3.errors.InputValidator.validate_title": {
      "name": "validate_title",
      "args": [
        "title",
        "field_name"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "제목 검증 및 정리",
      "calls": [
        "title.strip",
        "ValidationError",
        "title.strip",
        "len",
        "ValidationError"
      ]
    },
    "workflow.v3.errors.InputValidator.validate_description": {
      "name": "validate_description",
      "args": [
        "description"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "설명 검증 및 정리",
      "calls": [
        "description.strip"
      ]
    },
    "workflow.v3.errors.ErrorMessages.get_message": {
      "name": "get_message",
      "args": [
        "cls",
        "error_type"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "에러 메시지 포맷팅",
      "calls": [
        "getattr",
        "message.format"
      ]
    },
    "workflow.v3.errors.ErrorMessages.format_error": {
      "name": "format_error",
      "args": [
        "cls",
        "error_type",
        "details"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "에러 정보를 포맷팅하여 반환",
      "calls": [
        "cls.get_message"
      ]
    },
    "workflow.v3.errors.SuccessMessages.get": {
      "name": "get",
      "args": [
        "cls",
        "key"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "성공 메시지 가져오기 및 포맷팅",
      "calls": [
        "getattr",
        "message.format"
      ]
    },
    "workflow.v3.errors.ErrorHandler.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.errors.ErrorHandler.handle_error": {
      "name": "handle_error",
      "args": [
        "self",
        "error",
        "context"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러를 처리하고 표준화된 응답 반환",
      "calls": [
        "self._get_timestamp",
        "type",
        "str",
        "self.add_to_log",
        "isinstance",
        "error_info.update",
        "self._create_error_response"
      ]
    },
    "workflow.v3.errors.ErrorHandler.add_to_log": {
      "name": "add_to_log",
      "args": [
        "self",
        "error_info"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 로그에 추가",
      "calls": [
        "self.error_log.append",
        "len",
        "self.error_log.pop"
      ]
    },
    "workflow.v3.errors.ErrorHandler.get_recent_errors": {
      "name": "get_recent_errors",
      "args": [
        "self",
        "count"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "최근 에러들 반환",
      "calls": []
    },
    "workflow.v3.errors.ErrorHandler.clear_log": {
      "name": "clear_log",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 로그 초기화",
      "calls": [
        "self.error_log.clear"
      ]
    },
    "workflow.v3.errors.ErrorHandler._get_timestamp": {
      "name": "_get_timestamp",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 타임스탬프 반환",
      "calls": [
        "<ast.Call object at 0x0000010C6A067760>.isoformat",
        "datetime.now"
      ]
    },
    "workflow.v3.errors.ErrorHandler._create_error_response": {
      "name": "_create_error_response",
      "args": [
        "self",
        "error_info"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 응답 생성",
      "calls": [
        "error_info.get",
        "error_info.get"
      ]
    },
    "workflow.v3.errors.ErrorHandler.create_validation_error": {
      "name": "create_validation_error",
      "args": [
        "cls",
        "message",
        "field"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "검증 에러 생성",
      "calls": [
        "ValidationError"
      ]
    },
    "workflow.v3.errors.ErrorHandler.create_storage_error": {
      "name": "create_storage_error",
      "args": [
        "cls",
        "message",
        "operation"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "저장소 에러 생성",
      "calls": [
        "StorageError"
      ]
    },
    "workflow.v3.errors.ErrorHandler.create_execution_error": {
      "name": "create_execution_error",
      "args": [
        "cls",
        "message",
        "command"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "실행 에러 생성",
      "calls": [
        "ExecutionError"
      ]
    },
    "workflow.v3.errors.get_error_handler": {
      "name": "get_error_handler",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "전역 에러 핸들러 반환",
      "calls": []
    },
    "workflow.v3.errors.handle_error": {
      "name": "handle_error",
      "args": [
        "error",
        "context"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 처리 편의 함수",
      "calls": [
        "_error_handler.handle_error"
      ]
    },
    "workflow.v3.errors.log_error": {
      "name": "log_error",
      "args": [
        "message",
        "error_type",
        "context"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 로깅 편의 함수",
      "calls": [
        "_error_handler._get_timestamp",
        "_error_handler.add_to_log"
      ]
    },
    "workflow.v3.events.EventProcessor.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "self._register_default_handlers"
      ]
    },
    "workflow.v3.events.EventProcessor._register_default_handlers": {
      "name": "_register_default_handlers",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "기본 이벤트 핸들러 등록",
      "calls": []
    },
    "workflow.v3.events.EventProcessor._default_handler": {
      "name": "_default_handler",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "기본 이벤트 핸들러 - 로깅",
      "calls": [
        "logger.info"
      ]
    },
    "workflow.v3.events.EventProcessor.process": {
      "name": "process",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리",
      "calls": [
        "self.handlers.get",
        "handler",
        "logger.error",
        "str"
      ]
    },
    "workflow.v3.events.EventBuilder.plan_created": {
      "name": "plan_created",
      "args": [
        "plan",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "플랜 생성 이벤트",
      "calls": [
        "WorkflowEvent"
      ]
    },
    "workflow.v3.events.EventBuilder.plan_started": {
      "name": "plan_started",
      "args": [
        "plan",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "플랜 시작 이벤트",
      "calls": [
        "WorkflowEvent",
        "len"
      ]
    },
    "workflow.v3.events.EventBuilder.plan_completed": {
      "name": "plan_completed",
      "args": [
        "plan",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "플랜 완료 이벤트",
      "calls": [
        "WorkflowEvent",
        "len",
        "len"
      ]
    },
    "workflow.v3.events.EventBuilder.plan_archived": {
      "name": "plan_archived",
      "args": [
        "plan",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "플랜 아카이브 이벤트",
      "calls": [
        "WorkflowEvent",
        "plan.archived_at.isoformat",
        "<ast.Call object at 0x0000010C6A08B220>.isoformat",
        "datetime.now"
      ]
    },
    "workflow.v3.events.EventBuilder.task_added": {
      "name": "task_added",
      "args": [
        "plan_id",
        "task",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "태스크 추가 이벤트",
      "calls": [
        "WorkflowEvent"
      ]
    },
    "workflow.v3.events.EventBuilder.task_started": {
      "name": "task_started",
      "args": [
        "plan_id",
        "task",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "태스크 시작 이벤트",
      "calls": [
        "WorkflowEvent"
      ]
    },
    "workflow.v3.events.EventBuilder.task_completed": {
      "name": "task_completed",
      "args": [
        "plan_id",
        "task",
        "note",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "태스크 완료 이벤트",
      "calls": [
        "WorkflowEvent"
      ]
    },
    "workflow.v3.events.EventBuilder.task_cancelled": {
      "name": "task_cancelled",
      "args": [
        "plan_id",
        "task",
        "reason",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "태스크 취소 이벤트",
      "calls": [
        "WorkflowEvent"
      ]
    },
    "workflow.v3.events.EventBuilder.task_failed": {
      "name": "task_failed",
      "args": [
        "plan_id",
        "task",
        "error",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "태스크 실패 이벤트",
      "calls": [
        "WorkflowEvent"
      ]
    },
    "workflow.v3.events.EventBuilder.task_blocked": {
      "name": "task_blocked",
      "args": [
        "plan_id",
        "task",
        "blocker",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "태스크 차단 이벤트",
      "calls": [
        "WorkflowEvent"
      ]
    },
    "workflow.v3.events.EventBuilder.task_unblocked": {
      "name": "task_unblocked",
      "args": [
        "plan_id",
        "task",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "태스크 차단 해제 이벤트",
      "calls": [
        "WorkflowEvent"
      ]
    },
    "workflow.v3.events.EventBuilder.task_updated": {
      "name": "task_updated",
      "args": [
        "plan_id",
        "task",
        "changes",
        "user"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "태스크 업데이트 이벤트",
      "calls": [
        "WorkflowEvent"
      ]
    },
    "workflow.v3.events.EventStore.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "EventProcessor"
      ]
    },
    "workflow.v3.events.EventStore.add": {
      "name": "add",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 추가",
      "calls": [
        "self.events.append",
        "self.processor.process"
      ]
    },
    "workflow.v3.events.EventStore.get_events_for_plan": {
      "name": "get_events_for_plan",
      "args": [
        "self",
        "plan_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 플랜의 이벤트 조회",
      "calls": []
    },
    "workflow.v3.events.EventStore.get_events_for_task": {
      "name": "get_events_for_task",
      "args": [
        "self",
        "task_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 태스크의 이벤트 조회",
      "calls": []
    },
    "workflow.v3.events.EventStore.get_events_by_type": {
      "name": "get_events_by_type",
      "args": [
        "self",
        "event_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 타입의 이벤트 조회",
      "calls": []
    },
    "workflow.v3.events.EventStore.get_recent_events": {
      "name": "get_recent_events",
      "args": [
        "self",
        "limit"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "최근 이벤트 조회",
      "calls": [
        "sorted"
      ]
    },
    "workflow.v3.events.EventStore.clear": {
      "name": "clear",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 이벤트 삭제",
      "calls": [
        "self.events.clear"
      ]
    },
    "workflow.v3.events.EventStore.to_list": {
      "name": "to_list",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 목록을 딕셔너리 리스트로 변환",
      "calls": [
        "e.to_dict"
      ]
    },
    "workflow.v3.events.EventStore.from_list": {
      "name": "from_list",
      "args": [
        "self",
        "events_data"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "딕셔너리 리스트에서 이벤트 복원",
      "calls": [
        "WorkflowEvent.from_dict"
      ]
    },
    "workflow.v3.events.EventStore.get_plan_summary": {
      "name": "get_plan_summary",
      "args": [
        "self",
        "plan_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜의 이벤트 요약",
      "calls": [
        "self.get_events_for_plan",
        "len"
      ]
    },
    "workflow.v3.events.GitAutoCommitListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "helpers"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Args:\n    helpers: helpers 객체 (Git 명령 실행용)",
      "calls": []
    },
    "workflow.v3.events.GitAutoCommitListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리 - Git 자동 커밋",
      "calls": [
        "self.helpers.git_status",
        "status.data.get",
        "self._generate_commit_message",
        "self.helpers.git_add",
        "self.helpers.git_commit",
        "logger.info",
        "logger.warning",
        "logger.warning",
        "logger.error"
      ]
    },
    "workflow.v3.events.GitAutoCommitListener._generate_commit_message": {
      "name": "_generate_commit_message",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트에 따른 커밋 메시지 생성",
      "calls": [
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "messages.get",
        "event.details.get"
      ]
    },
    "workflow.v3.events.GitAutoCommitListener.set_enabled": {
      "name": "set_enabled",
      "args": [
        "self",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "자동 커밋 활성화/비활성화",
      "calls": [
        "logger.info"
      ]
    },
    "workflow.v3.events.EventBus.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.events.EventBus.register": {
      "name": "register",
      "args": [
        "self",
        "listener"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 등록",
      "calls": [
        "hasattr",
        "self.listeners.append",
        "logger.info",
        "logger.warning"
      ]
    },
    "workflow.v3.events.EventBus.unregister": {
      "name": "unregister",
      "args": [
        "self",
        "listener"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 제거",
      "calls": [
        "self.listeners.remove",
        "logger.info"
      ]
    },
    "workflow.v3.events.EventBus.emit": {
      "name": "emit",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 리스너에 이벤트 전달",
      "calls": [
        "listener.handle_event",
        "logger.error"
      ]
    },
    "workflow.v3.event_bus.Event.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 생성 후 처리",
      "calls": [
        "ValueError",
        "self.metadata.update",
        "self.timestamp.isoformat"
      ]
    },
    "workflow.v3.event_bus.EventBus.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "EventBus 초기화",
      "calls": [
        "hasattr",
        "defaultdict",
        "Queue",
        "ThreadPoolExecutor",
        "logger.info"
      ]
    },
    "workflow.v3.event_bus.EventBus.start": {
      "name": "start",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리 시작",
      "calls": [
        "logger.warning",
        "threading.Thread",
        "self._processor_thread.start",
        "logger.info"
      ]
    },
    "workflow.v3.event_bus.EventBus.stop": {
      "name": "stop",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리 중지",
      "calls": [
        "self._event_queue.put",
        "self._processor_thread.join",
        "self._executor.shutdown",
        "logger.info"
      ]
    },
    "workflow.v3.event_bus.EventBus.subscribe": {
      "name": "subscribe",
      "args": [
        "self",
        "event_type",
        "handler"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 핸들러 등록\n\nArgs:\n    event_type: 구독할 이벤트 타입\n    handler: 이벤트 처리 함수 (Event 객체를 받음)",
      "calls": [
        "callable",
        "ValueError",
        "type",
        "<ast.Subscript object at 0x0000010C6A067880>.append",
        "logger.debug"
      ]
    },
    "workflow.v3.event_bus.EventBus.unsubscribe": {
      "name": "unsubscribe",
      "args": [
        "self",
        "event_type",
        "handler"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 핸들러 제거\n\nArgs:\n    event_type: 구독 해제할 이벤트 타입\n    handler: 제거할 핸들러 함수",
      "calls": [
        "<ast.Subscript object at 0x0000010C6A066E90>.remove",
        "logger.debug"
      ]
    },
    "workflow.v3.event_bus.EventBus.publish": {
      "name": "publish",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 발행 (비동기)\n\nArgs:\n    event: 발행할 이벤트 객체",
      "calls": [
        "hasattr",
        "hasattr",
        "ValueError",
        "type",
        "self._event_queue.put",
        "logger.debug"
      ]
    },
    "workflow.v3.event_bus.EventBus.publish_sync": {
      "name": "publish_sync",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 동기 발행 (테스트용)\n\nArgs:\n    event: 발행할 이벤트 객체\n\nReturns:\n    핸들러 실행 Future 리스트",
      "calls": [
        "self._handlers.get",
        "self._executor.submit",
        "futures.append"
      ]
    },
    "workflow.v3.event_bus.EventBus._process_events": {
      "name": "_process_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "백그라운드 이벤트 처리 루프",
      "calls": [
        "logger.info",
        "self._event_queue.get",
        "self._process_single_event",
        "logger.error",
        "logger.debug",
        "traceback.format_exc",
        "logger.info"
      ]
    },
    "workflow.v3.event_bus.EventBus._process_single_event": {
      "name": "_process_single_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "단일 이벤트 처리",
      "calls": [
        "self._handlers.get",
        "logger.debug",
        "logger.debug",
        "len",
        "self._executor.submit"
      ]
    },
    "workflow.v3.event_bus.EventBus._execute_handler": {
      "name": "_execute_handler",
      "args": [
        "self",
        "handler",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "핸들러 실행 (재시도 로직 포함)\n\nArgs:\n    handler: 실행할 핸들러 함수\n    event: 처리할 이벤트",
      "calls": [
        "handler",
        "logger.debug",
        "logger.error",
        "logger.debug",
        "traceback.format_exc",
        "self._handle_failed_event",
        "logger.warning",
        "time.sleep"
      ]
    },
    "workflow.v3.event_bus.EventBus._handle_failed_event": {
      "name": "_handle_failed_event",
      "args": [
        "self",
        "event",
        "handler",
        "error"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "실패한 이벤트 처리\n\n향후 Dead Letter Queue 구현 시 여기에 추가",
      "calls": [
        "str",
        "traceback.format_exc",
        "<ast.Call object at 0x0000010C6A04C910>.isoformat",
        "datetime.now",
        "logger.error"
      ]
    },
    "workflow.v3.event_bus.EventBus.get_stats": {
      "name": "get_stats",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리 통계 반환",
      "calls": [
        "self._stats.copy"
      ]
    },
    "workflow.v3.event_bus.EventBus.get_handlers_count": {
      "name": "get_handlers_count",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 타입별 핸들러 수 반환",
      "calls": [
        "len",
        "self._handlers.items"
      ]
    },
    "workflow.v3.event_bus.EventBus.clear_handlers": {
      "name": "clear_handlers",
      "args": [
        "self",
        "event_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "핸들러 초기화\n\nArgs:\n    event_type: 특정 이벤트 타입만 초기화 (None이면 전체)",
      "calls": [
        "<ast.Subscript object at 0x0000010C6A04E0E0>.clear",
        "self._handlers.clear"
      ]
    },
    "workflow.v3.event_bus.EventBus.__repr__": {
      "name": "__repr__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "len"
      ]
    },
    "workflow.v3.event_bus.EventBus.reset": {
      "name": "reset",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "EventBus 리셋 (테스트용)",
      "calls": [
        "self.stop",
        "self._handlers.clear",
        "logger.info"
      ]
    },
    "workflow.v3.event_types.Event.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 생성 후 처리",
      "calls": [
        "ValueError",
        "self.metadata.update",
        "self.timestamp.isoformat"
      ]
    },
    "workflow.v3.event_types.WorkflowEvent.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A088310>.__post_init__",
        "super"
      ]
    },
    "workflow.v3.event_types.PlanEvent.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A08BE20>.__post_init__",
        "super"
      ]
    },
    "workflow.v3.event_types.TaskEvent.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A0A9F90>.__post_init__",
        "super"
      ]
    },
    "workflow.v3.event_types.ContextEvent.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A0A8700>.__post_init__",
        "super"
      ]
    },
    "workflow.v3.event_types.CommandEvent.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A058850>.__post_init__",
        "super"
      ]
    },
    "workflow.v3.event_types.ProjectEvent.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A05BFA0>.__post_init__",
        "super"
      ]
    },
    "workflow.v3.event_types.FileEvent.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A05B9D0>.__post_init__",
        "super"
      ]
    },
    "workflow.v3.event_types.GitEvent.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A059B70>.__post_init__",
        "super"
      ]
    },
    "workflow.v3.event_types.SystemEvent.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A0587C0>.__post_init__",
        "super"
      ]
    },
    "workflow.v3.event_types.create_plan_event": {
      "name": "create_plan_event",
      "args": [
        "event_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 이벤트 생성 헬퍼",
      "calls": [
        "PlanEvent"
      ]
    },
    "workflow.v3.event_types.create_task_event": {
      "name": "create_task_event",
      "args": [
        "event_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 이벤트 생성 헬퍼",
      "calls": [
        "TaskEvent"
      ]
    },
    "workflow.v3.event_types.create_context_event": {
      "name": "create_context_event",
      "args": [
        "event_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트 이벤트 생성 헬퍼",
      "calls": [
        "ContextEvent"
      ]
    },
    "workflow.v3.event_types.create_command_event": {
      "name": "create_command_event",
      "args": [
        "command"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "명령어 이벤트 생성 헬퍼",
      "calls": [
        "CommandEvent"
      ]
    },
    "workflow.v3.event_types.create_project_event": {
      "name": "create_project_event",
      "args": [
        "event_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 이벤트 생성 헬퍼",
      "calls": [
        "ProjectEvent"
      ]
    },
    "workflow.v3.event_types.create_file_event": {
      "name": "create_file_event",
      "args": [
        "event_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일 이벤트 생성 헬퍼",
      "calls": [
        "FileEvent"
      ]
    },
    "workflow.v3.event_types.create_git_event": {
      "name": "create_git_event",
      "args": [
        "event_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Git 이벤트 생성 헬퍼",
      "calls": [
        "GitEvent"
      ]
    },
    "workflow.v3.event_types.create_system_event": {
      "name": "create_system_event",
      "args": [
        "level",
        "message"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "시스템 이벤트 생성 헬퍼",
      "calls": [
        "event_type_map.get",
        "SystemEvent"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "event_bus"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Args:\n    event_bus: EventBus 인스턴스",
      "calls": [
        "defaultdict",
        "defaultdict"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager.register_listener": {
      "name": "register_listener",
      "args": [
        "self",
        "name",
        "listener"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 등록\n\nArgs:\n    name: 리스너 이름\n    listener: BaseEventListener 인스턴스",
      "calls": [
        "logger.warning",
        "self.unregister_listener",
        "listener.get_subscribed_events",
        "self._create_handler_wrapper",
        "self.event_bus.subscribe",
        "<ast.Subscript object at 0x0000010C6A08B670>.append",
        "logger.info",
        "len",
        "listener.get_subscribed_events"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager.unregister_listener": {
      "name": "unregister_listener",
      "args": [
        "self",
        "name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 등록 해제\n\nArgs:\n    name: 리스너 이름",
      "calls": [
        "logger.warning",
        "self.event_bus.unsubscribe",
        "logger.info"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager._create_handler_wrapper": {
      "name": "_create_handler_wrapper",
      "args": [
        "self",
        "name",
        "listener"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "메트릭 수집을 포함한 핸들러 래퍼 생성\n\nArgs:\n    name: 리스너 이름\n    listener: 리스너 인스턴스\n\nReturns:\n    래핑된 핸들러 함수",
      "calls": []
    },
    "workflow.v3.listener_manager.ListenerManager.wrapper": {
      "name": "wrapper",
      "args": [
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "time.time",
        "time.time",
        "self._convert_to_workflow_event",
        "listener.process",
        "time.time",
        "logger.debug",
        "time.time",
        "logger.error"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager._convert_to_workflow_event": {
      "name": "_convert_to_workflow_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Event를 WorkflowEvent로 변환\n\nArgs:\n    event: EventBus의 Event 객체\n\nReturns:\n    WorkflowEvent 객체",
      "calls": [
        "isinstance",
        "EventType",
        "WorkflowEvent",
        "getattr",
        "getattr",
        "hasattr",
        "event.payload.get",
        "hasattr",
        "event.payload.get",
        "hasattr",
        "event.payload.get",
        "hasattr",
        "event.payload.items"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager.get_metrics": {
      "name": "get_metrics",
      "args": [
        "self",
        "name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 메트릭 조회\n\nArgs:\n    name: 특정 리스너 이름 (None이면 전체)\n\nReturns:\n    메트릭 정보",
      "calls": [
        "<ast.Subscript object at 0x0000010C6A04F640>.copy",
        "<ast.Subscript object at 0x0000010C6A04CFD0>.get_metrics",
        "metrics.update",
        "self.get_metrics",
        "sum",
        "all_metrics.values",
        "sum",
        "all_metrics.values",
        "sum",
        "all_metrics.values",
        "len"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager.enable_listener": {
      "name": "enable_listener",
      "args": [
        "self",
        "name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 활성화",
      "calls": [
        "logger.info"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager.disable_listener": {
      "name": "disable_listener",
      "args": [
        "self",
        "name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 비활성화",
      "calls": [
        "logger.info"
      ]
    },
    "workflow.v3.listener_manager.ListenerManager.get_listener_status": {
      "name": "get_listener_status",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 리스너의 활성화 상태 반환",
      "calls": [
        "self.listeners.items"
      ]
    },
    "workflow.v3.manager.WorkflowManager.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "project_name",
        "enable_listeners"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트별 워크플로우 관리자 초기화",
      "calls": [
        "WorkflowState",
        "EventStore",
        "CommandParser",
        "WorkflowStorage",
        "ContextIntegration",
        "WorkflowEventAdapter",
        "EventBus",
        "ListenerManager",
        "EnhancedListenerIntegration",
        "self.listener_integration.initialize",
        "logger.info",
        "logger.error",
        "logger.info",
        "self.listener_integration.get_status",
        "logger.info",
        "<ast.Constant object at 0x0000010C6A1482E0>.join",
        "TaskContextManager",
        "TaskContextEventHandlers",
        "task_handlers.register_all",
        "logger.info",
        "logger.warning",
        "logger.debug",
        "traceback.format_exc",
        "InternalWorkflowAPI",
        "UserCommandAPI",
        "self._load_data",
        "self.context.sync_plan_summary"
      ]
    },
    "workflow.v3.manager.WorkflowManager.get_instance": {
      "name": "get_instance",
      "args": [
        "cls",
        "project_name"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "프로젝트별 싱글톤 인스턴스 반환",
      "calls": [
        "logger.info",
        "cls",
        "instance.storage.main_file.exists",
        "instance.storage.main_file.stat",
        "hasattr",
        "logger.info",
        "instance.reload"
      ]
    },
    "workflow.v3.manager.WorkflowManager.clear_instance": {
      "name": "clear_instance",
      "args": [
        "cls",
        "project_name"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "인스턴스 캐시 무효화\n\nArgs:\n    project_name: 특정 프로젝트만 제거. None이면 모든 캐시 제거",
      "calls": [
        "logger.info",
        "cls._instances.clear",
        "logger.info"
      ]
    },
    "workflow.v3.manager.WorkflowManager.invalidate_and_reload": {
      "name": "invalidate_and_reload",
      "args": [
        "cls",
        "project_name"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "인스턴스 캐시 무효화 후 새로 로드\n\nArgs:\n    project_name: 프로젝트 이름\n\nReturns:\n    새로 로드된 WorkflowManager 인스턴스",
      "calls": [
        "cls.clear_instance",
        "cls.get_instance"
      ]
    },
    "workflow.v3.manager.WorkflowManager._load_data": {
      "name": "_load_data",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "저장된 데이터 로드",
      "calls": [
        "self.storage.load",
        "WorkflowState.from_dict",
        "logger.info",
        "hasattr",
        "len",
        "hasattr",
        "hasattr",
        "self.event_store.from_list",
        "self.event_store.from_list",
        "logger.info",
        "len",
        "logger.warning",
        "EventStore",
        "logger.error",
        "logger.error",
        "traceback.format_exc",
        "WorkflowState",
        "EventStore",
        "WorkflowState",
        "EventStore"
      ]
    },
    "workflow.v3.manager.WorkflowManager._save_data": {
      "name": "_save_data",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "데이터를 파일에 저장",
      "calls": [
        "datetime.now",
        "self.storage.save",
        "self.state.to_dict",
        "logger.info",
        "logger.warning",
        "logger.error"
      ]
    },
    "workflow.v3.manager.WorkflowManager.start_plan": {
      "name": "start_plan",
      "args": [
        "self",
        "name",
        "description"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "새 플랜 시작",
      "calls": [
        "self.archive_plan",
        "WorkflowPlan",
        "plan.start",
        "self._add_event",
        "EventBuilder.plan_created",
        "self._add_event",
        "EventBuilder.plan_started",
        "self.context.sync_plan_summary",
        "self.context.record_event",
        "self.context.record_event",
        "self._save_data",
        "logger.error"
      ]
    },
    "workflow.v3.manager.WorkflowManager.add_task": {
      "name": "add_task",
      "args": [
        "self",
        "title",
        "description"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 플랜에 태스크 추가",
      "calls": [
        "logger.error",
        "Task",
        "self.state.current_plan.tasks.append",
        "datetime.now",
        "EventBuilder.task_added",
        "self._add_event",
        "self.context.sync_plan_summary",
        "self._save_data",
        "logger.error"
      ]
    },
    "workflow.v3.manager.WorkflowManager.add_task_note": {
      "name": "add_task_note",
      "args": [
        "self",
        "note",
        "task_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 태스크 또는 지정된 태스크에 노트 추가",
      "calls": [
        "logger.warning",
        "logger.warning",
        "self.get_current_task",
        "logger.warning",
        "task.notes.append",
        "datetime.now",
        "WorkflowEvent",
        "self.state.add_event",
        "self._add_event",
        "self._save_data",
        "logger.info"
      ]
    },
    "workflow.v3.manager.WorkflowManager.complete_task": {
      "name": "complete_task",
      "args": [
        "self",
        "task_id",
        "note"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료 처리",
      "calls": [
        "logger.error",
        "task.complete",
        "datetime.now",
        "EventBuilder.task_completed",
        "self._add_event",
        "self.context.record_event",
        "self.is_plan_completed",
        "self.state.current_plan.complete",
        "EventBuilder.plan_completed",
        "self._add_event",
        "self.context.record_event",
        "self.context.sync_plan_summary",
        "self._save_data"
      ]
    },
    "workflow.v3.manager.WorkflowManager.complete_current_task": {
      "name": "complete_current_task",
      "args": [
        "self",
        "note"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 태스크 완료하고 다음 태스크 반환",
      "calls": [
        "self.get_current_task",
        "self.complete_task",
        "self.get_current_task"
      ]
    },
    "workflow.v3.manager.WorkflowManager.fail_task": {
      "name": "fail_task",
      "args": [
        "self",
        "task_id",
        "error"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 실패 처리",
      "calls": [
        "logger.error",
        "task.fail",
        "datetime.now",
        "EventBuilder.task_failed",
        "self._add_event",
        "self.context.sync_plan_summary",
        "self._save_data"
      ]
    },
    "workflow.v3.manager.WorkflowManager.block_task": {
      "name": "block_task",
      "args": [
        "self",
        "task_id",
        "blocker"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 차단 처리",
      "calls": [
        "logger.error",
        "task.block",
        "datetime.now",
        "EventBuilder.task_blocked",
        "self._add_event",
        "self.context.sync_plan_summary",
        "self._save_data"
      ]
    },
    "workflow.v3.manager.WorkflowManager.unblock_task": {
      "name": "unblock_task",
      "args": [
        "self",
        "task_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 차단 해제 처리",
      "calls": [
        "logger.error",
        "task.unblock",
        "datetime.now",
        "EventBuilder.task_unblocked",
        "self._add_event",
        "self.context.sync_plan_summary",
        "self._save_data"
      ]
    },
    "workflow.v3.manager.WorkflowManager.cancel_task": {
      "name": "cancel_task",
      "args": [
        "self",
        "task_id",
        "reason"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 취소 처리",
      "calls": [
        "logger.error",
        "task.cancel",
        "datetime.now",
        "EventBuilder.task_cancelled",
        "self._add_event",
        "self.context.sync_plan_summary",
        "self._save_data"
      ]
    },
    "workflow.v3.manager.WorkflowManager.archive_plan": {
      "name": "archive_plan",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 플랜 아카이브",
      "calls": [
        "self.state.current_plan.archive",
        "EventBuilder.plan_archived",
        "self._add_event",
        "self.context.record_event",
        "self.context.sync_plan_summary",
        "self._save_data"
      ]
    },
    "workflow.v3.manager.WorkflowManager.get_current_task": {
      "name": "get_current_task",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 작업 중인 태스크 반환",
      "calls": [
        "self.state.current_plan.get_current_task"
      ]
    },
    "workflow.v3.manager.WorkflowManager.get_task_by_number": {
      "name": "get_task_by_number",
      "args": [
        "self",
        "number"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "번호로 태스크 조회 (1부터 시작)",
      "calls": [
        "len"
      ]
    },
    "workflow.v3.manager.WorkflowManager.is_plan_completed": {
      "name": "is_plan_completed",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜의 모든 태스크가 완료되었는지 확인",
      "calls": []
    },
    "workflow.v3.manager.WorkflowManager.get_status": {
      "name": "get_status",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 상태 정보",
      "calls": [
        "len",
        "len",
        "self.get_current_task",
        "hasattr",
        "str",
        "int",
        "hasattr",
        "str",
        "plan.created_at.isoformat",
        "plan.updated_at.isoformat"
      ]
    },
    "workflow.v3.manager.WorkflowManager.get_tasks": {
      "name": "get_tasks",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 플랜의 태스크 목록",
      "calls": [
        "enumerate",
        "tasks.append",
        "task.created_at.isoformat",
        "task.completed_at.isoformat"
      ]
    },
    "workflow.v3.manager.WorkflowManager.get_plan_history": {
      "name": "get_plan_history",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 히스토리 (이벤트 로그 기반)",
      "calls": [
        "self.state.get_plan_history"
      ]
    },
    "workflow.v3.manager.WorkflowManager.get_recent_events": {
      "name": "get_recent_events",
      "args": [
        "self",
        "limit"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "최근 이벤트 목록",
      "calls": [
        "self.event_store.get_recent_events",
        "e.to_dict"
      ]
    },
    "workflow.v3.manager.WorkflowManager.execute_command": {
      "name": "execute_command",
      "args": [
        "self",
        "command_str"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "명령어 문자열 실행 (개선된 버전)",
      "calls": [
        "hasattr",
        "self.user_api.execute_command",
        "self.parser.parse",
        "self.command_handlers.get",
        "handler",
        "WorkflowError",
        "ErrorMessages.get",
        "HelperResult",
        "e.to_dict",
        "HelperResult",
        "str",
        "logger.exception",
        "ErrorHandler.handle_error",
        "HelperResult"
      ]
    },
    "workflow.v3.manager.WorkflowManager._handle_start": {
      "name": "_handle_start",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "start 명령 처리",
      "calls": [
        "self.start_plan",
        "HelperResult",
        "SuccessMessages.get",
        "HelperResult",
        "HelperResult",
        "HelperResult"
      ]
    },
    "workflow.v3.manager.WorkflowManager._handle_focus": {
      "name": "_handle_focus",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "focus 명령 처리",
      "calls": [
        "HelperResult",
        "self.get_current_task",
        "HelperResult",
        "HelperResult",
        "self.get_task_by_number",
        "enumerate",
        "self._save_data",
        "HelperResult",
        "HelperResult"
      ]
    },
    "workflow.v3.manager.WorkflowManager._handle_plan": {
      "name": "_handle_plan",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "plan 명령 처리",
      "calls": [
        "self.get_plan_history",
        "HelperResult",
        "len",
        "parsed.args.get",
        "self.archive_plan",
        "self.start_plan",
        "HelperResult",
        "HelperResult",
        "self.get_status",
        "isinstance",
        "hasattr",
        "hasattr",
        "HelperResult",
        "HelperResult"
      ]
    },
    "workflow.v3.manager.WorkflowManager._handle_task": {
      "name": "_handle_task",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "task 명령 처리",
      "calls": [
        "WorkflowError",
        "ErrorMessages.get",
        "self._handle_focus",
        "self.get_tasks",
        "HelperResult",
        "len",
        "len",
        "t.get",
        "len",
        "parsed.args.get",
        "HelperResult",
        "self.add_task_note",
        "HelperResult",
        "HelperResult",
        "parsed.title.strip",
        "HelperResult",
        "self.add_task",
        "len",
        "HelperResult",
        "HelperResult",
        "self.add_task",
        "len",
        "HelperResult",
        "HelperResult",
        "HelperResult",
        "self.get_tasks",
        "HelperResult",
        "len"
      ]
    },
    "workflow.v3.manager.WorkflowManager._handle_next": {
      "name": "_handle_next",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "next 명령 처리",
      "calls": [
        "HelperResult",
        "self.get_current_task",
        "HelperResult",
        "HelperResult",
        "parsed.args.get",
        "self.complete_current_task",
        "len",
        "sum",
        "int",
        "HelperResult"
      ]
    },
    "workflow.v3.manager.WorkflowManager._handle_build": {
      "name": "_handle_build",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "build 명령 처리 - 개선된 버전",
      "calls": [
        "Path.cwd",
        "str",
        "Path.cwd",
        "os.walk",
        "len",
        "len",
        "HelperResult",
        "self.get_status",
        "self.get_recent_events",
        "HelperResult",
        "self.get_current_task",
        "HelperResult",
        "HelperResult",
        "self.get_status",
        "<ast.Call object at 0x0000010C6A1CAB30>.exists",
        "Path",
        "HelperResult"
      ]
    },
    "workflow.v3.manager.WorkflowManager._handle_status": {
      "name": "_handle_status",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "status 명령 처리",
      "calls": [
        "self.get_plan_history",
        "self.get_recent_events",
        "HelperResult",
        "len",
        "len",
        "self.get_status",
        "HelperResult",
        "status.get",
        "self.get_tasks",
        "self.get_recent_events",
        "HelperResult",
        "len",
        "len",
        "len",
        "len"
      ]
    },
    "workflow.v3.manager.WorkflowManager.clear_cache": {
      "name": "clear_cache",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "캐시 클리어 (필요시 구현)",
      "calls": []
    },
    "workflow.v3.manager.WorkflowManager.save": {
      "name": "save",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 상태를 파일에 저장 (public 메서드)",
      "calls": [
        "self._save_data"
      ]
    },
    "workflow.v3.manager.WorkflowManager.reload": {
      "name": "reload",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "데이터 다시 로드",
      "calls": [
        "self._load_data"
      ]
    },
    "workflow.v3.manager.WorkflowManager.export_data": {
      "name": "export_data",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "전체 데이터 내보내기",
      "calls": [
        "self.state.to_dict"
      ]
    },
    "workflow.v3.manager.WorkflowManager.import_data": {
      "name": "import_data",
      "args": [
        "self",
        "data"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "데이터 가져오기",
      "calls": [
        "WorkflowState.from_dict",
        "self.event_store.from_list",
        "self._save_data",
        "logger.error"
      ]
    },
    "workflow.v3.manager.WorkflowManager.cleanup": {
      "name": "cleanup",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리소스 정리 및 이벤트 어댑터 해제",
      "calls": [
        "hasattr",
        "self.event_adapter.cleanup",
        "logger.info",
        "hasattr",
        "self.listener_manager.get_metrics",
        "metrics.get",
        "logger.info"
      ]
    },
    "workflow.v3.manager.WorkflowManager._add_event": {
      "name": "_add_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트를 EventStore에 추가하고 EventBus로 발행",
      "calls": [
        "self.event_store.add",
        "hasattr",
        "isinstance",
        "WorkflowEvent",
        "event.get",
        "event.get",
        "event.get",
        "event.get",
        "event.get",
        "event.get",
        "self.event_adapter.publish_workflow_event",
        "self.event_adapter.publish_workflow_event",
        "logger.error"
      ]
    },
    "workflow.v3.models.WorkflowEvent.to_dict": {
      "name": "to_dict",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트를 딕셔너리로 변환",
      "calls": [
        "self.timestamp.isoformat"
      ]
    },
    "workflow.v3.models.WorkflowEvent.from_dict": {
      "name": "from_dict",
      "args": [
        "cls",
        "data"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "딕셔너리에서 이벤트 생성",
      "calls": [
        "data.get",
        "<ast.Call object at 0x0000010C6A10E5C0>.isoformat",
        "datetime.now",
        "datetime.fromisoformat",
        "timestamp.replace",
        "datetime.now",
        "cls",
        "data.get",
        "str",
        "uuid.uuid4",
        "EventType",
        "data.get",
        "data.get",
        "data.get",
        "data.get",
        "data.get",
        "data.get"
      ]
    },
    "workflow.v3.models.WorkflowEvent.create_plan_event": {
      "name": "create_plan_event",
      "args": [
        "cls",
        "event_type",
        "plan"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "플랜 관련 이벤트 생성 헬퍼",
      "calls": [
        "cls"
      ]
    },
    "workflow.v3.models.WorkflowEvent.create_task_event": {
      "name": "create_task_event",
      "args": [
        "cls",
        "event_type",
        "task",
        "plan_id"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "태스크 관련 이벤트 생성 헬퍼",
      "calls": [
        "cls"
      ]
    },
    "workflow.v3.models.WorkflowEvent.create_note_event": {
      "name": "create_note_event",
      "args": [
        "cls",
        "event_type",
        "task_id",
        "plan_id",
        "note"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "노트 관련 이벤트 생성 헬퍼",
      "calls": [
        "<ast.Call object at 0x0000010C6A0B1ED0>.isoformat",
        "datetime.now",
        "cls"
      ]
    },
    "workflow.v3.models.WorkflowEvent.create_system_event": {
      "name": "create_system_event",
      "args": [
        "cls",
        "event_type",
        "message",
        "plan_id"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "시스템 관련 이벤트 생성 헬퍼",
      "calls": [
        "<ast.Call object at 0x0000010C6A0B2620>.isoformat",
        "datetime.now",
        "cls"
      ]
    },
    "workflow.v3.models.Task.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "생성 후 검증",
      "calls": [
        "InputValidator.validate_title",
        "InputValidator.validate_description",
        "self.title.strip",
        "ValueError",
        "self.title.strip",
        "len",
        "ValueError"
      ]
    },
    "workflow.v3.models.Task.start": {
      "name": "start",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 시작",
      "calls": [
        "datetime.now",
        "datetime.now"
      ]
    },
    "workflow.v3.models.Task.complete": {
      "name": "complete",
      "args": [
        "self",
        "note"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료",
      "calls": [
        "datetime.now",
        "datetime.now",
        "int",
        "<ast.BinOp object at 0x0000010C6A0F7D90>.total_seconds",
        "self.notes.append"
      ]
    },
    "workflow.v3.models.Task.fail": {
      "name": "fail",
      "args": [
        "self",
        "error"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 실패",
      "calls": [
        "datetime.now",
        "self.notes.append"
      ]
    },
    "workflow.v3.models.Task.block": {
      "name": "block",
      "args": [
        "self",
        "blocker"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 차단",
      "calls": [
        "<ast.Call object at 0x0000010C6A0F4400>.isoformat",
        "datetime.now",
        "datetime.now",
        "self.notes.append"
      ]
    },
    "workflow.v3.models.Task.unblock": {
      "name": "unblock",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 차단 해제",
      "calls": [
        "self.outputs.pop",
        "TaskStatus",
        "datetime.now",
        "self.notes.append"
      ]
    },
    "workflow.v3.models.Task.cancel": {
      "name": "cancel",
      "args": [
        "self",
        "reason"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 취소",
      "calls": [
        "datetime.now",
        "self.notes.append",
        "self.notes.append"
      ]
    },
    "workflow.v3.models.Task.to_dict": {
      "name": "to_dict",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "객체를 딕셔너리로 변환",
      "calls": [
        "self.created_at.isoformat",
        "self.updated_at.isoformat",
        "self.started_at.isoformat",
        "self.completed_at.isoformat"
      ]
    },
    "workflow.v3.models.Task.from_dict": {
      "name": "from_dict",
      "args": [
        "cls",
        "data"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "딕셔너리에서 객체 생성",
      "calls": [
        "cls._parse_datetime",
        "data.get",
        "cls._parse_datetime",
        "data.get",
        "data.get",
        "cls._parse_datetime",
        "data.get",
        "data.get",
        "cls._parse_datetime",
        "data.get",
        "cls",
        "data.get",
        "str",
        "uuid.uuid4",
        "data.get",
        "data.get",
        "TaskStatus",
        "data.get",
        "data.get",
        "data.get",
        "data.get"
      ]
    },
    "workflow.v3.models.Task._parse_datetime": {
      "name": "_parse_datetime",
      "args": [
        "dt_str"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "날짜/시간 문자열 파싱",
      "calls": [
        "datetime.now",
        "datetime.fromisoformat",
        "dt.replace",
        "datetime.now"
      ]
    },
    "workflow.v3.models.WorkflowPlan.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "생성 후 검증",
      "calls": [
        "InputValidator.validate_title",
        "InputValidator.validate_description",
        "self.name.strip",
        "ValueError",
        "self.name.strip",
        "len",
        "ValueError"
      ]
    },
    "workflow.v3.models.WorkflowPlan.start": {
      "name": "start",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 시작",
      "calls": [
        "datetime.now"
      ]
    },
    "workflow.v3.models.WorkflowPlan.complete": {
      "name": "complete",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 완료",
      "calls": [
        "datetime.now",
        "datetime.now",
        "self._update_stats"
      ]
    },
    "workflow.v3.models.WorkflowPlan.archive": {
      "name": "archive",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 아카이브",
      "calls": [
        "self.complete",
        "datetime.now",
        "datetime.now"
      ]
    },
    "workflow.v3.models.WorkflowPlan._update_stats": {
      "name": "_update_stats",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "통계 정보 업데이트",
      "calls": [
        "len",
        "len",
        "sum"
      ]
    },
    "workflow.v3.models.WorkflowPlan.get_current_task": {
      "name": "get_current_task",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 작업 중인 태스크 반환",
      "calls": [
        "len",
        "enumerate"
      ]
    },
    "workflow.v3.models.WorkflowPlan.to_dict": {
      "name": "to_dict",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "객체를 딕셔너리로 변환",
      "calls": [
        "task.to_dict",
        "self.created_at.isoformat",
        "self.updated_at.isoformat",
        "self.completed_at.isoformat",
        "self.archived_at.isoformat"
      ]
    },
    "workflow.v3.models.WorkflowPlan.from_dict": {
      "name": "from_dict",
      "args": [
        "cls",
        "data"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "딕셔너리에서 객체 생성",
      "calls": [
        "Task._parse_datetime",
        "data.get",
        "Task._parse_datetime",
        "data.get",
        "data.get",
        "Task._parse_datetime",
        "data.get",
        "data.get",
        "Task._parse_datetime",
        "data.get",
        "Task.from_dict",
        "data.get",
        "cls",
        "data.get",
        "str",
        "uuid.uuid4",
        "data.get",
        "data.get",
        "PlanStatus",
        "data.get",
        "data.get",
        "data.get",
        "data.get"
      ]
    },
    "workflow.v3.models.WorkflowState.add_event": {
      "name": "add_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 추가",
      "calls": [
        "self.events.append",
        "datetime.now"
      ]
    },
    "workflow.v3.models.WorkflowState.get_all_plans": {
      "name": "get_all_plans",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 플랜 반환 (현재는 current_plan만)",
      "calls": []
    },
    "workflow.v3.models.WorkflowState.plans": {
      "name": "plans",
      "args": [
        "self"
      ],
      "decorators": [
        "property"
      ],
      "is_async": false,
      "docstring": "플랜 목록 반환 (호환성을 위한 속성)",
      "calls": [
        "self.get_all_plans"
      ]
    },
    "workflow.v3.models.WorkflowState.to_dict": {
      "name": "to_dict",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "상태를 딕셔너리로 변환 (v46: plans + active_plan_id 구조)",
      "calls": [
        "self.current_plan.to_dict",
        "event.to_dict",
        "self.last_saved.isoformat"
      ]
    },
    "workflow.v3.models.WorkflowState.from_dict": {
      "name": "from_dict",
      "args": [
        "cls",
        "data"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "딕셔너리에서 상태 복원 (개선된 버전)",
      "calls": [
        "data.get",
        "data.get",
        "plan_data.get",
        "WorkflowPlan.from_dict",
        "data.get",
        "WorkflowPlan.from_dict",
        "WorkflowEvent.from_dict",
        "data.get",
        "Task._parse_datetime",
        "data.get",
        "cls",
        "data.get",
        "data.get"
      ]
    },
    "workflow.v3.models.WorkflowState.get_plan_history": {
      "name": "get_plan_history",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 로그에서 플랜 히스토리 추출",
      "calls": [
        "event.details.get",
        "list",
        "plan_events.values"
      ]
    },
    "workflow.v3.parser.ParsedCommand.__post_init__": {
      "name": "__post_init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.parser.CommandParser.parse": {
      "name": "parse",
      "args": [
        "self",
        "command_str"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "명령어 문자열 파싱\n\nArgs:\n    command_str: 슬래시로 시작하는 명령어 문자열\n    \nReturns:\n    ParsedCommand: 파싱된 명령어 객체\n    \nRaises:\n    ValueError: 잘못된 명령어 형식",
      "calls": [
        "ValueError",
        "command_str.strip",
        "command_str.startswith",
        "ValueError",
        "<ast.Subscript object at 0x0000010C6A1058A0>.strip",
        "ValueError",
        "cmd_parts.split",
        "<ast.Subscript object at 0x0000010C6A105F60>.lower",
        "ParsedCommand",
        "len",
        "<ast.Constant object at 0x0000010C6A1066B0>.join",
        "ValueError",
        "ParsedCommand",
        "len",
        "<ast.Subscript object at 0x0000010C6A0B1510>.lower",
        "len",
        "<ast.Constant object at 0x0000010C6A0B0370>.join",
        "<ast.Constant object at 0x0000010C6A0B1AB0>.join",
        "self._parse_start",
        "self._parse_focus",
        "self._parse_plan",
        "self._parse_task",
        "self._parse_next",
        "self._parse_build",
        "self._parse_status"
      ]
    },
    "workflow.v3.parser.CommandParser._parse_title_description": {
      "name": "_parse_title_description",
      "args": [
        "self",
        "text"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "제목과 설명 파싱 (파이프 구분)",
      "calls": [
        "text.split",
        "<ast.Subscript object at 0x0000010C6A0676D0>.strip",
        "len",
        "<ast.Subscript object at 0x0000010C6A067460>.strip",
        "text.strip"
      ]
    },
    "workflow.v3.parser.CommandParser._parse_start": {
      "name": "_parse_start",
      "args": [
        "self",
        "args",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "start/plan 명령어 파싱",
      "calls": [
        "self._parse_title_description",
        "ValueError",
        "len",
        "ValueError"
      ]
    },
    "workflow.v3.parser.CommandParser._parse_focus": {
      "name": "_parse_focus",
      "args": [
        "self",
        "args",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "focus 명령어 파싱",
      "calls": [
        "args.strip",
        "parsed.title.isdigit",
        "int"
      ]
    },
    "workflow.v3.parser.CommandParser._parse_plan": {
      "name": "_parse_plan",
      "args": [
        "self",
        "args",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "plan 명령어 파싱",
      "calls": [
        "self._parse_title_description",
        "ValueError",
        "len",
        "ValueError",
        "<ast.Call object at 0x0000010C6A064B50>.strip",
        "parsed.description.replace"
      ]
    },
    "workflow.v3.parser.CommandParser._parse_task": {
      "name": "_parse_task",
      "args": [
        "self",
        "args",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "task 명령어 파싱",
      "calls": [
        "ValueError",
        "self._parse_title_description",
        "ValueError",
        "len",
        "ValueError",
        "args.lower",
        "args_lower.startswith",
        "<ast.Subscript object at 0x0000010C6A00BFD0>.strip",
        "note_text.startswith",
        "note_text.endswith",
        "note_text.startswith",
        "note_text.endswith",
        "ValueError",
        "self._parse_title_description",
        "ValueError",
        "len",
        "ValueError"
      ]
    },
    "workflow.v3.parser.CommandParser._parse_next": {
      "name": "_parse_next",
      "args": [
        "self",
        "args",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "next 명령어 파싱",
      "calls": [
        "args.strip"
      ]
    },
    "workflow.v3.parser.CommandParser._parse_build": {
      "name": "_parse_build",
      "args": [
        "self",
        "args",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "build 명령어 파싱",
      "calls": [
        "<ast.Call object at 0x0000010C6A04DBA0>.strip",
        "args.lower"
      ]
    },
    "workflow.v3.parser.CommandParser._parse_status": {
      "name": "_parse_status",
      "args": [
        "self",
        "args",
        "parsed"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "status 명령어 파싱",
      "calls": [
        "<ast.Call object at 0x0000010C6A04FAC0>.strip",
        "args.lower"
      ]
    },
    "workflow.v3.parser.CommandParser.validate_title": {
      "name": "validate_title",
      "args": [
        "self",
        "title",
        "field_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "제목 검증 및 정규화",
      "calls": [
        "ValueError",
        "title.strip",
        "ValueError",
        "len",
        "ValueError"
      ]
    },
    "workflow.v3.parser.CommandParser.extract_command": {
      "name": "extract_command",
      "args": [
        "text"
      ],
      "decorators": [
        "staticmethod"
      ],
      "is_async": false,
      "docstring": "텍스트에서 명령어 추출 (슬래시로 시작하는 부분)",
      "calls": [
        "re.search",
        "<ast.Call object at 0x0000010C6A04ECB0>.strip",
        "match.group"
      ]
    },
    "workflow.v3.parser.CommandParser.get_help": {
      "name": "get_help",
      "args": [
        "self",
        "command"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "명령어 도움말",
      "calls": [
        "command.lower",
        "help_map.get"
      ]
    },
    "workflow.v3.register_ai_listeners.register_ai_instructors": {
      "name": "register_ai_instructors",
      "args": [
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "AI 지시 리스너들을 등록",
      "calls": [
        "WorkflowManager.get_instance",
        "hasattr",
        "hasattr",
        "list",
        "wm.listener_manager.listeners.values",
        "wm.listener_manager.listeners.items",
        "wm.listener_manager.unregister_listener",
        "TaskCompletionInstructor",
        "ErrorInstructor",
        "WorkflowInstructor",
        "hasattr",
        "wm.listener_manager.register_listener",
        "logger.info",
        "logger.warning",
        "print",
        "print",
        "print",
        "print",
        "print",
        "logger.error",
        "traceback.print_exc"
      ]
    },
    "workflow.v3.register_ai_listeners.test_ai_instruction_system": {
      "name": "test_ai_instruction_system",
      "args": [
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "AI 지시 시스템 테스트",
      "calls": [
        "print",
        "print",
        "register_ai_instructors",
        "print",
        "print",
        "WorkflowManager.get_instance",
        "print"
      ]
    },
    "workflow.v3.register_ai_listeners.check_ai_instructions": {
      "name": "check_ai_instructions",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "os.path.exists",
        "open",
        "json.load",
        "len",
        "data.get",
        "len",
        "data.get"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "project_name",
        "base_dir"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "Path.cwd",
        "self.base_dir.mkdir",
        "self.backup_dir.mkdir",
        "self.cache_dir.mkdir",
        "Lock",
        "self._ensure_file_exists"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.save": {
      "name": "save",
      "args": [
        "self",
        "data",
        "create_backup"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "데이터 저장 (원자적 쓰기)",
      "calls": [
        "self._validate_workflow_data",
        "logger.error",
        "self.main_file.exists",
        "self._create_backup",
        "<ast.Subscript object at 0x0000010C6A10D4B0>.update",
        "<ast.Call object at 0x0000010C6A10CCA0>.isoformat",
        "datetime.now",
        "str",
        "self.main_file.with_suffix",
        "write_json",
        "temp_file.replace",
        "logger.info",
        "logger.error",
        "locals",
        "temp_file.exists",
        "temp_file.unlink"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.load": {
      "name": "load",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "데이터 로드",
      "calls": [
        "self.main_file.exists",
        "read_json",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.exists": {
      "name": "exists",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 파일 존재 여부",
      "calls": [
        "self.main_file.exists"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.delete": {
      "name": "delete",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 데이터 삭제",
      "calls": [
        "self.main_file.exists",
        "self._create_backup",
        "self.main_file.unlink",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.storage.WorkflowStorage._create_backup": {
      "name": "_create_backup",
      "args": [
        "self",
        "suffix"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "백업 생성",
      "calls": [
        "<ast.Call object at 0x0000010C6A066560>.strftime",
        "datetime.now",
        "shutil.copy2",
        "datetime.now",
        "self._cleanup_old_backups",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.storage.WorkflowStorage._cleanup_old_backups": {
      "name": "_cleanup_old_backups",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "오래된 백업 파일 정리",
      "calls": [
        "sorted",
        "self.backup_dir.glob",
        "len",
        "old_backup.unlink",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.storage.WorkflowStorage._ensure_file_exists": {
      "name": "_ensure_file_exists",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 파일이 없으면 생성",
      "calls": [
        "self.main_file.exists",
        "<ast.Call object at 0x0000010C6A106410>.isoformat",
        "datetime.now",
        "str",
        "self.save"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.list_backups": {
      "name": "list_backups",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "백업 파일 목록",
      "calls": [
        "sorted",
        "self.backup_dir.glob"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.restore_from_backup": {
      "name": "restore_from_backup",
      "args": [
        "self",
        "backup_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "백업에서 복구",
      "calls": [
        "open",
        "json.load",
        "self.main_file.exists",
        "self._create_backup",
        "self.save",
        "logger.error"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.get_file_info": {
      "name": "get_file_info",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일 정보",
      "calls": [
        "self.main_file.exists",
        "self.main_file.stat",
        "str",
        "<ast.Call object at 0x0000010C69E1C160>.isoformat",
        "datetime.fromtimestamp",
        "str"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.get_statistics": {
      "name": "get_statistics",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "통계 정보",
      "calls": [
        "str",
        "len",
        "list",
        "self.backup_dir.glob",
        "len",
        "list",
        "self.cache_dir.glob",
        "self.main_file.exists",
        "self.main_file.stat",
        "<ast.Call object at 0x0000010C6A04C8E0>.isoformat",
        "datetime.fromtimestamp"
      ]
    },
    "workflow.v3.storage.WorkflowStorage._validate_workflow_data": {
      "name": "_validate_workflow_data",
      "args": [
        "self",
        "data"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 데이터 유효성 검증",
      "calls": [
        "len",
        "logger.warning",
        "logger.warning",
        "<ast.Constant object at 0x0000010C6A04FDC0>.join",
        "traceback.format_stack",
        "any",
        "logger.warning",
        "list",
        "data.keys",
        "len",
        "json.dumps",
        "logger.warning",
        "logger.error"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.get_project_data": {
      "name": "get_project_data",
      "args": [
        "self",
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 데이터 반환 (호환성)",
      "calls": [
        "self.load"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.save_project_data": {
      "name": "save_project_data",
      "args": [
        "self",
        "project_name",
        "data",
        "create_backup"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 데이터 저장 (호환성)",
      "calls": [
        "self.save"
      ]
    },
    "workflow.v3.storage.WorkflowStorage.get_active_project": {
      "name": "get_active_project",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "활성 프로젝트 반환 (호환성)",
      "calls": []
    },
    "workflow.v3.storage.WorkflowStorage.set_active_project": {
      "name": "set_active_project",
      "args": [
        "self",
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "활성 프로젝트 설정 (호환성)",
      "calls": []
    },
    "workflow.v3.storage.WorkflowStorage.list_projects": {
      "name": "list_projects",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 목록 (호환성)",
      "calls": []
    },
    "workflow.v3.storage.WorkflowStorage.delete_project": {
      "name": "delete_project",
      "args": [
        "self",
        "project_name"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 삭제 (호환성)",
      "calls": [
        "self.delete"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage._get_unified_storage": {
      "name": "_get_unified_storage",
      "args": [
        "cls"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "싱글톤 통합 스토리지 인스턴스",
      "calls": [
        "UnifiedWorkflowStorage"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "project_name",
        "base_dir"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "기존 API 호환성을 위한 초기화\n\nArgs:\n    project_name: 프로젝트 이름\n    base_dir: (무시됨) 통합 스토리지는 단일 경로 사용",
      "calls": [
        "self._get_unified_storage"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.save": {
      "name": "save",
      "args": [
        "self",
        "data",
        "create_backup"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "데이터 저장 (프로젝트별)\n\nArgs:\n    data: 저장할 데이터 (current_plan, events 등)\n    create_backup: 백업 생성 여부\n    \nReturns:\n    성공 여부",
      "calls": [
        "self.storage.save_project_data"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.load": {
      "name": "load",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "데이터 로드",
      "calls": [
        "self.storage.get_project_data"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.exists": {
      "name": "exists",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 데이터 존재 여부",
      "calls": [
        "self.storage.list_projects"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.delete": {
      "name": "delete",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 데이터 삭제",
      "calls": [
        "self.storage.delete_project"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.create_backup": {
      "name": "create_backup",
      "args": [
        "self",
        "suffix"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "백업 생성 (통합 백업으로 위임)",
      "calls": [
        "self.storage._create_backup"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.list_backups": {
      "name": "list_backups",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "백업 목록 (통합 백업)",
      "calls": [
        "sorted",
        "self.storage.backup_dir.glob"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.restore_from_backup": {
      "name": "restore_from_backup",
      "args": [
        "self",
        "backup_path"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "백업에서 복구\n\nNote: 통합 스토리지에서는 전체 복구만 지원",
      "calls": []
    },
    "workflow.v3.storage_adapter.WorkflowStorage.migrate_all_v3_files": {
      "name": "migrate_all_v3_files",
      "args": [
        "cls"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "모든 V3 파일을 통합 스토리지로 마이그레이션",
      "calls": [
        "cls._get_unified_storage",
        "storage.migrate_from_v3_files"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.get_all_projects": {
      "name": "get_all_projects",
      "args": [
        "cls"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "모든 프로젝트 목록",
      "calls": [
        "cls._get_unified_storage",
        "storage.list_projects"
      ]
    },
    "workflow.v3.storage_adapter.WorkflowStorage.get_statistics": {
      "name": "get_statistics",
      "args": [
        "cls"
      ],
      "decorators": [
        "classmethod"
      ],
      "is_async": false,
      "docstring": "전체 통계",
      "calls": [
        "cls._get_unified_storage",
        "storage.get_statistics"
      ]
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "task_context_manager"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers.register_all": {
      "name": "register_all",
      "args": [
        "self",
        "event_bus"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 핸들러 등록",
      "calls": [
        "event_bus.subscribe",
        "event_bus.subscribe",
        "event_bus.subscribe",
        "event_bus.subscribe",
        "event_bus.subscribe",
        "event_bus.subscribe",
        "event_bus.subscribe"
      ]
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers.on_plan_created": {
      "name": "on_plan_created",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 생성 시",
      "calls": [
        "event.data.get",
        "event.data.get",
        "event.data.get",
        "event.data.get",
        "self.tcm.on_plan_created"
      ]
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers.on_plan_started": {
      "name": "on_plan_started",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 시작 시",
      "calls": [
        "event.data.get",
        "self.tcm.on_plan_started"
      ]
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers.on_task_added": {
      "name": "on_task_added",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 추가 시",
      "calls": [
        "event.data.get",
        "event.data.get",
        "event.data.get",
        "event.data.get",
        "event.data.get",
        "self.tcm.on_task_added"
      ]
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers.on_task_started": {
      "name": "on_task_started",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 시작 시",
      "calls": [
        "event.data.get",
        "self.tcm.on_task_started"
      ]
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers.on_task_completed": {
      "name": "on_task_completed",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료 시",
      "calls": [
        "event.data.get",
        "event.data.get",
        "self.tcm.on_task_updated",
        "work_results.get",
        "work_results.get",
        "work_results.get",
        "self.tcm.on_task_completed"
      ]
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers.on_task_updated": {
      "name": "on_task_updated",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 업데이트 시",
      "calls": [
        "event.data.get",
        "self.tcm.on_task_updated"
      ]
    },
    "workflow.v3.task_context_handlers.TaskContextEventHandlers.on_plan_completed": {
      "name": "on_plan_completed",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 완료 시",
      "calls": [
        "event.data.get",
        "self.tcm.on_plan_completed"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "memory_dir"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "Path",
        "self.memory_dir.mkdir",
        "self.archive_dir.mkdir",
        "self._load_context"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager._load_context": {
      "name": "_load_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트 파일 로드",
      "calls": [
        "self.context_file.exists",
        "open",
        "json.load",
        "logger.error",
        "self._get_default_context",
        "self._get_default_context"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager._get_default_context": {
      "name": "_get_default_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "기본 컨텍스트 구조",
      "calls": [
        "<ast.Call object at 0x0000010C6A0A9C00>.isoformat",
        "datetime.now"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager._save_context": {
      "name": "_save_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트 저장",
      "calls": [
        "<ast.Call object at 0x0000010C6A0A9810>.isoformat",
        "datetime.now",
        "open",
        "json.dump",
        "self._update_realtime",
        "logger.error"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager._update_realtime": {
      "name": "_update_realtime",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "실시간 파일 업데이트 (현재 상태만)",
      "calls": [
        "self.context.get",
        "self.context.get",
        "<ast.Call object at 0x0000010C6A0A88E0>.isoformat",
        "datetime.now",
        "open",
        "json.dump",
        "logger.warning"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager._add_event": {
      "name": "_add_event",
      "args": [
        "self",
        "event_type",
        "data"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 기록",
      "calls": [
        "<ast.Call object at 0x0000010C6A05BE50>.isoformat",
        "datetime.now",
        "<ast.Subscript object at 0x0000010C6A05BD00>.append",
        "len"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.on_plan_created": {
      "name": "on_plan_created",
      "args": [
        "self",
        "plan_id",
        "plan_name",
        "description"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 생성 시",
      "calls": [
        "<ast.Call object at 0x0000010C6A0B1FC0>.isoformat",
        "datetime.now",
        "self._add_event",
        "self._save_context",
        "logger.info"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.on_plan_started": {
      "name": "on_plan_started",
      "args": [
        "self",
        "plan_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 시작 시",
      "calls": [
        "<ast.Call object at 0x0000010C6A0B2E90>.isoformat",
        "datetime.now",
        "self._add_event",
        "self._save_context",
        "logger.info"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.on_plan_completed": {
      "name": "on_plan_completed",
      "args": [
        "self",
        "plan_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 완료 시",
      "calls": [
        "<ast.Call object at 0x0000010C6A0B3EB0>.isoformat",
        "datetime.now",
        "self._archive_plan",
        "self._add_event",
        "self._save_context",
        "logger.info"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager._archive_plan": {
      "name": "_archive_plan",
      "args": [
        "self",
        "plan_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 아카이브",
      "calls": [
        "<ast.Call object at 0x0000010C6A0B0220>.strftime",
        "datetime.now",
        "plan_data.get",
        "plan_tasks.append",
        "<ast.Call object at 0x0000010C6A106E00>.isoformat",
        "datetime.now",
        "open",
        "json.dump",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.on_task_added": {
      "name": "on_task_added",
      "args": [
        "self",
        "plan_id",
        "task_id",
        "task_title",
        "description"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 추가 시",
      "calls": [
        "<ast.Call object at 0x0000010C6A1044C0>.isoformat",
        "datetime.now",
        "<ast.Subscript object at 0x0000010C6A064A90>.append",
        "self._add_event",
        "self._save_context",
        "logger.info"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.on_task_started": {
      "name": "on_task_started",
      "args": [
        "self",
        "task_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 시작 시",
      "calls": [
        "<ast.Call object at 0x0000010C6A0668C0>.isoformat",
        "datetime.now",
        "self._add_event",
        "self._save_context",
        "logger.info"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.on_task_completed": {
      "name": "on_task_completed",
      "args": [
        "self",
        "task_id",
        "note"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료 시",
      "calls": [
        "<ast.Call object at 0x0000010C6A065540>.isoformat",
        "datetime.now",
        "datetime.fromisoformat",
        "datetime.now",
        "str",
        "<ast.Subscript object at 0x0000010C6A066E90>.append",
        "<ast.Call object at 0x0000010C6A065660>.isoformat",
        "datetime.now",
        "self._add_event",
        "self._save_context",
        "logger.info"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.on_task_updated": {
      "name": "on_task_updated",
      "args": [
        "self",
        "task_id",
        "updates"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 업데이트 시",
      "calls": [
        "updates.items",
        "<ast.Subscript object at 0x0000010C6A00B7C0>.append",
        "<ast.Call object at 0x0000010C6A009AB0>.isoformat",
        "datetime.now",
        "<ast.Subscript object at 0x0000010C6A00A4D0>.append",
        "<ast.Call object at 0x0000010C6A00B100>.isoformat",
        "datetime.now",
        "isinstance",
        "<ast.Subscript object at 0x0000010C6A00AB60>.extend",
        "<ast.Subscript object at 0x0000010C6A00A020>.append",
        "<ast.Call object at 0x0000010C6A00BAF0>.isoformat",
        "datetime.now",
        "self._add_event",
        "list",
        "updates.keys",
        "self._save_context"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.get_current_context": {
      "name": "get_current_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 컨텍스트 반환",
      "calls": [
        "self.context.get",
        "self.context.get",
        "<ast.Subscript object at 0x0000010C6A04F850>.get",
        "<ast.Subscript object at 0x0000010C6A04D840>.get"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.get_plan_context": {
      "name": "get_plan_context",
      "args": [
        "self",
        "plan_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 플랜의 컨텍스트",
      "calls": [
        "plan.get",
        "tasks.append"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.get_task_context": {
      "name": "get_task_context",
      "args": [
        "self",
        "task_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "특정 태스크의 컨텍스트",
      "calls": [
        "<ast.Subscript object at 0x0000010C6A04DFF0>.get"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.get_recent_events": {
      "name": "get_recent_events",
      "args": [
        "self",
        "limit"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "최근 이벤트 반환",
      "calls": []
    },
    "workflow.v3.task_context_manager.TaskContextManager.clear_old_events": {
      "name": "clear_old_events",
      "args": [
        "self",
        "keep_days"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "오래된 이벤트 정리",
      "calls": [
        "<ast.Call object at 0x0000010C6A04CF40>.timestamp",
        "datetime.now",
        "<ast.Call object at 0x0000010C6A04C730>.timestamp",
        "datetime.fromisoformat",
        "new_events.append",
        "new_events.append",
        "self._save_context",
        "logger.info",
        "len"
      ]
    },
    "workflow.v3.task_context_manager.TaskContextManager.export_current_state": {
      "name": "export_current_state",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "현재 상태 내보내기",
      "calls": [
        "self.get_current_context",
        "self.get_recent_events",
        "<ast.Call object at 0x0000010C6A1ED7E0>.isoformat",
        "datetime.now"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "workflow_manager"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "EventBus",
        "self.event_bus.start",
        "logger.info",
        "self._register_handlers"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.add_listener": {
      "name": "add_listener",
      "args": [
        "self",
        "event_type",
        "handler"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 리스너 추가",
      "calls": [
        "self.event_bus.subscribe",
        "logger.debug"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.remove_listener": {
      "name": "remove_listener",
      "args": [
        "self",
        "event_type",
        "handler"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 리스너 제거",
      "calls": [
        "self.event_bus.unsubscribe",
        "logger.debug"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.add_workflow_listener": {
      "name": "add_workflow_listener",
      "args": [
        "self",
        "listener"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "BaseEventListener 인터페이스를 구현한 리스너 추가",
      "calls": [
        "hasattr",
        "hasattr",
        "listener.get_subscribed_events",
        "hasattr",
        "str"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.create_handler": {
      "name": "create_handler",
      "args": [
        "listener_ref"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.handler": {
      "name": "handler",
      "args": [
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "self._convert_event_to_workflow_event",
        "listener_ref.handle_event"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter._convert_event_to_workflow_event": {
      "name": "_convert_event_to_workflow_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "EventBus의 Event를 WorkflowEvent로 변환",
      "calls": [
        "logger.warning",
        "hasattr",
        "WorkflowEvent",
        "hasattr",
        "str",
        "uuid.uuid4",
        "hasattr",
        "datetime.now",
        "data.get",
        "data.get",
        "data.get",
        "data.get",
        "data.get",
        "logger.error"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter._register_handlers": {
      "name": "_register_handlers",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "기본 핸들러 등록",
      "calls": [
        "self.event_bus.subscribe"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter._on_project_switched": {
      "name": "_on_project_switched",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 전환 이벤트 처리",
      "calls": [
        "logger.info"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter._convert_workflow_event_to_event": {
      "name": "_convert_workflow_event_to_event",
      "args": [
        "self",
        "workflow_event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "WorkflowEvent를 EventBus의 Event로 변환",
      "calls": [
        "hasattr",
        "logger.error",
        "type",
        "hasattr",
        "str",
        "logger.debug",
        "logger.error",
        "Event"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.publish_workflow_event": {
      "name": "publish_workflow_event",
      "args": [
        "self",
        "workflow_event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "WorkflowEvent를 EventBus로 발행",
      "calls": [
        "isinstance",
        "logger.error",
        "type",
        "self._convert_workflow_event_to_event",
        "self.event_bus.publish",
        "logger.info",
        "logger.error",
        "logger.error"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.publish_plan_created": {
      "name": "publish_plan_created",
      "args": [
        "self",
        "plan"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 생성 이벤트 발행",
      "calls": [
        "EventBuilder.plan_created",
        "self.publish_workflow_event"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.publish_plan_started": {
      "name": "publish_plan_started",
      "args": [
        "self",
        "plan"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 시작 이벤트 발행",
      "calls": [
        "EventBuilder.plan_started",
        "self.publish_workflow_event"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.publish_plan_completed": {
      "name": "publish_plan_completed",
      "args": [
        "self",
        "plan"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 완료 이벤트 발행",
      "calls": [
        "EventBuilder.plan_completed",
        "self.publish_workflow_event"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.publish_task_added": {
      "name": "publish_task_added",
      "args": [
        "self",
        "task",
        "plan"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 추가 이벤트 발행",
      "calls": [
        "EventBuilder.task_added",
        "self.publish_workflow_event"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.publish_task_started": {
      "name": "publish_task_started",
      "args": [
        "self",
        "task",
        "plan"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 시작 이벤트 발행",
      "calls": [
        "EventBuilder.task_started",
        "self.publish_workflow_event"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.publish_task_completed": {
      "name": "publish_task_completed",
      "args": [
        "self",
        "task",
        "plan"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료 이벤트 발행",
      "calls": [
        "EventBuilder.task_completed",
        "self.publish_workflow_event"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.publish_task_failed": {
      "name": "publish_task_failed",
      "args": [
        "self",
        "task",
        "plan",
        "error"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 실패 이벤트 발행",
      "calls": [
        "EventBuilder.task_failed",
        "self.publish_workflow_event"
      ]
    },
    "workflow.v3.workflow_event_adapter.WorkflowEventAdapter.cleanup": {
      "name": "cleanup",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "정리 작업",
      "calls": [
        "self.event_bus.stop",
        "logger.info"
      ]
    },
    "workflow.v3.api.decorators.require_active_plan": {
      "name": "require_active_plan",
      "args": [
        "func"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "활성 플랜이 필요한 작업에 대한 데코레이터",
      "calls": []
    },
    "workflow.v3.api.decorators.wrapper": {
      "name": "wrapper",
      "args": [],
      "decorators": [
        "<ast.Call object at 0x0000010C6A00A380>"
      ],
      "is_async": false,
      "docstring": null,
      "calls": [
        "warnings.warn",
        "func",
        "functools.wraps"
      ]
    },
    "workflow.v3.api.decorators.log_command": {
      "name": "log_command",
      "args": [
        "command_type"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "명령어 실행 로깅 데코레이터\n\nArgs:\n    command_type: \"user\" 또는 \"internal\"",
      "calls": []
    },
    "workflow.v3.api.decorators.decorator": {
      "name": "decorator",
      "args": [
        "func"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.api.decorators.validate_arguments": {
      "name": "validate_arguments",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "인자 검증 데코레이터\n\n사용 예:\n@validate_arguments(title=lambda x: len(x) > 0, index=lambda x: x >= 0)",
      "calls": []
    },
    "workflow.v3.api.decorators.auto_save": {
      "name": "auto_save",
      "args": [
        "func"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "실행 후 자동 저장 데코레이터",
      "calls": []
    },
    "workflow.v3.api.decorators.transactional": {
      "name": "transactional",
      "args": [
        "func"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "트랜잭션 데코레이터 - 실패 시 롤백",
      "calls": []
    },
    "workflow.v3.api.decorators.rate_limit": {
      "name": "rate_limit",
      "args": [
        "max_calls",
        "window_seconds"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Rate limiting 데코레이터",
      "calls": []
    },
    "workflow.v3.api.decorators.internal_only": {
      "name": "internal_only",
      "args": [
        "func"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "내부 API 전용 데코레이터",
      "calls": []
    },
    "workflow.v3.api.decorators.deprecated": {
      "name": "deprecated",
      "args": [
        "replacement"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Deprecated 경고 데코레이터",
      "calls": []
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "workflow_manager"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.set_current_plan": {
      "name": "set_current_plan",
      "args": [
        "self",
        "plan"
      ],
      "decorators": [
        "internal_only",
        "<ast.Call object at 0x0000010C6A08A2C0>",
        "transactional"
      ],
      "is_async": false,
      "docstring": "현재 플랜 직접 설정",
      "calls": [
        "WorkflowEvent",
        "self._add_event",
        "log_command"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.update_task_status": {
      "name": "update_task_status",
      "args": [
        "self",
        "task_id",
        "status",
        "metadata"
      ],
      "decorators": [
        "internal_only",
        "<ast.Call object at 0x0000010C6A088910>",
        "transactional"
      ],
      "is_async": false,
      "docstring": "태스크 상태 직접 업데이트",
      "calls": [
        "self._get_task_by_id",
        "WorkflowError",
        "datetime.now",
        "task.outputs.update",
        "datetime.now",
        "datetime.now",
        "int",
        "<ast.BinOp object at 0x0000010C6A088F40>.total_seconds",
        "EventBuilder.task_updated",
        "self._add_event",
        "log_command"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.get_task_by_id": {
      "name": "get_task_by_id",
      "args": [
        "self",
        "task_id"
      ],
      "decorators": [
        "internal_only",
        "<ast.Call object at 0x0000010C6A0885B0>"
      ],
      "is_async": false,
      "docstring": "ID로 태스크 조회",
      "calls": [
        "self._get_task_by_id",
        "log_command"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.batch_update_tasks": {
      "name": "batch_update_tasks",
      "args": [
        "self",
        "updates"
      ],
      "decorators": [
        "internal_only",
        "<ast.Call object at 0x0000010C6A105B40>",
        "auto_save"
      ],
      "is_async": false,
      "docstring": "여러 태스크 일괄 업데이트\n\nArgs:\n    updates: [{'task_id': str, 'status': TaskStatus, 'metadata': dict}, ...]",
      "calls": [
        "self.update_task_status",
        "update.get",
        "update.get",
        "updated_tasks.append",
        "log_command"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.force_complete_plan": {
      "name": "force_complete_plan",
      "args": [
        "self",
        "plan_id"
      ],
      "decorators": [
        "internal_only",
        "<ast.Call object at 0x0000010C6A106C50>",
        "transactional",
        "auto_save"
      ],
      "is_async": false,
      "docstring": "플랜 강제 완료",
      "calls": [
        "task.notes.append",
        "datetime.now",
        "EventBuilder.plan_completed",
        "self._add_event",
        "log_command"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.create_plan_from_template": {
      "name": "create_plan_from_template",
      "args": [
        "self",
        "template"
      ],
      "decorators": [
        "internal_only",
        "<ast.Call object at 0x0000010C6A034880>"
      ],
      "is_async": false,
      "docstring": "템플릿에서 플랜 생성\n\nArgs:\n    template: {\n        'name': str,\n        'description': str,\n        'tasks': [{'title': str, 'description': str}, ...]\n    }",
      "calls": [
        "WorkflowPlan",
        "template.get",
        "template.get",
        "Task",
        "task_data.get",
        "plan.tasks.append",
        "log_command"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.get_event_history": {
      "name": "get_event_history",
      "args": [
        "self",
        "plan_id",
        "event_type",
        "limit"
      ],
      "decorators": [
        "internal_only"
      ],
      "is_async": false,
      "docstring": "이벤트 히스토리 조회",
      "calls": [
        "sorted"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.calculate_plan_statistics": {
      "name": "calculate_plan_statistics",
      "args": [
        "self",
        "plan"
      ],
      "decorators": [
        "internal_only"
      ],
      "is_async": false,
      "docstring": "플랜 통계 계산",
      "calls": [
        "len",
        "len",
        "len",
        "len",
        "sum"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.create_checkpoint": {
      "name": "create_checkpoint",
      "args": [
        "self"
      ],
      "decorators": [
        "internal_only",
        "<ast.Call object at 0x0000010C6A00B550>"
      ],
      "is_async": false,
      "docstring": "현재 상태의 체크포인트 생성",
      "calls": [
        "str",
        "uuid4",
        "<ast.Call object at 0x0000010C6A00B3A0>.isoformat",
        "datetime.now",
        "hasattr",
        "self.state.to_dict",
        "self.state.current_plan.to_dict",
        "os.makedirs",
        "os.path.dirname",
        "open",
        "json.dump",
        "logger.info",
        "log_command"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI.restore_checkpoint": {
      "name": "restore_checkpoint",
      "args": [
        "self",
        "checkpoint_id"
      ],
      "decorators": [
        "internal_only",
        "<ast.Call object at 0x0000010C6A04C130>"
      ],
      "is_async": false,
      "docstring": "체크포인트에서 상태 복원",
      "calls": [
        "os.path.exists",
        "logger.error",
        "open",
        "json.load",
        "logger.info",
        "log_command"
      ]
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI._get_task_by_id": {
      "name": "_get_task_by_id",
      "args": [
        "self",
        "task_id"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 ID로 조회",
      "calls": []
    },
    "workflow.v3.api.internal_api.InternalWorkflowAPI._add_event": {
      "name": "_add_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 추가",
      "calls": [
        "self.event_store.add",
        "hasattr",
        "self.manager.event_adapter.publish_workflow_event",
        "logger.error"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "workflow_manager"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "CommandParser",
        "self._register_extended_commands"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._register_extended_commands": {
      "name": "_register_extended_commands",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "확장 명령어 핸들러 등록",
      "calls": [
        "hasattr",
        "self.manager.command_handlers.update"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI.execute_command": {
      "name": "execute_command",
      "args": [
        "self",
        "command_str"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A0ECF40>"
      ],
      "is_async": false,
      "docstring": "사용자 명령어 실행 (개선된 버전)",
      "calls": [
        "self.parser.parse",
        "self.manager.command_handlers.get",
        "handler",
        "WorkflowError",
        "self._get_user_friendly_error",
        "HelperResult",
        "e.to_dict",
        "logger.error",
        "type",
        "str",
        "traceback.format_exc",
        "HelperResult",
        "type",
        "str",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._get_user_friendly_error": {
      "name": "_get_user_friendly_error",
      "args": [
        "self",
        "error"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "사용자 친화적 에러 메시지 생성",
      "calls": [
        "error_messages.get"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_auto": {
      "name": "_handle_auto",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A064670>"
      ],
      "is_async": false,
      "docstring": "자동 실행 모드 제어",
      "calls": [
        "hasattr",
        "AutoTaskExecutor",
        "parsed.title.lower",
        "HelperResult",
        "parsed.title.lower",
        "executor.start",
        "HelperResult",
        "parsed.title.lower",
        "executor.stop",
        "HelperResult",
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_pause": {
      "name": "_handle_pause",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A065480>"
      ],
      "is_async": false,
      "docstring": "자동 실행 일시 정지",
      "calls": [
        "hasattr",
        "self.manager._auto_executor.pause",
        "HelperResult",
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_resume": {
      "name": "_handle_resume",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A065630>"
      ],
      "is_async": false,
      "docstring": "자동 실행 재개",
      "calls": [
        "hasattr",
        "self.manager._auto_executor.resume",
        "HelperResult",
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_skip": {
      "name": "_handle_skip",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A065F60>",
        "require_active_plan"
      ],
      "is_async": false,
      "docstring": "현재 태스크 건너뛰기",
      "calls": [
        "self.manager.get_current_task",
        "HelperResult",
        "self.manager.cancel_task",
        "self.manager.get_current_task",
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_delete": {
      "name": "_handle_delete",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A035D20>",
        "require_active_plan",
        "<ast.Call object at 0x0000010C6A035DE0>"
      ],
      "is_async": false,
      "docstring": "태스크 삭제",
      "calls": [
        "enumerate",
        "str",
        "HelperResult",
        "self.manager.state.current_plan.tasks.pop",
        "max",
        "self.manager._save_data",
        "HelperResult",
        "log_command",
        "validate_arguments",
        "len"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_move": {
      "name": "_handle_move",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A08A020>",
        "require_active_plan"
      ],
      "is_async": false,
      "docstring": "태스크 순서 변경",
      "calls": [
        "parsed.title.split",
        "len",
        "HelperResult",
        "int",
        "enumerate",
        "str",
        "HelperResult",
        "len",
        "HelperResult",
        "self.manager.state.current_plan.tasks.pop",
        "self.manager.state.current_plan.tasks.insert",
        "self.manager._save_data",
        "HelperResult",
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_depend": {
      "name": "_handle_depend",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A04D060>",
        "require_active_plan"
      ],
      "is_async": false,
      "docstring": "태스크 의존성 설정",
      "calls": [
        "parsed.title.split",
        "len",
        "HelperResult",
        "enumerate",
        "str",
        "str",
        "HelperResult",
        "HelperResult",
        "<ast.Subscript object at 0x0000010C6A08B4F0>.append",
        "self.manager._save_data",
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_export": {
      "name": "_handle_export",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A04C0A0>"
      ],
      "is_async": false,
      "docstring": "워크플로우 내보내기",
      "calls": [
        "HelperResult",
        "<ast.Call object at 0x0000010C6A04DB10>.isoformat",
        "datetime.now",
        "self.manager.state.current_plan.to_dict",
        "len",
        "<ast.Call object at 0x0000010C6A04D480>.strftime",
        "datetime.now",
        "filename.endswith",
        "os.makedirs",
        "open",
        "json.dump",
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_import": {
      "name": "_handle_import",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A04FEB0>"
      ],
      "is_async": false,
      "docstring": "워크플로우 가져오기",
      "calls": [
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_template": {
      "name": "_handle_template",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A04DCC0>"
      ],
      "is_async": false,
      "docstring": "워크플로우 템플릿 관리",
      "calls": [
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_report": {
      "name": "_handle_report",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A04C5E0>",
        "require_active_plan"
      ],
      "is_async": false,
      "docstring": "진행 상황 리포트",
      "calls": [
        "self._generate_progress_report",
        "self._generate_timeline_report",
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._generate_progress_report": {
      "name": "_generate_progress_report",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "진행 상황 리포트 생성",
      "calls": [
        "len",
        "len",
        "len",
        "enumerate",
        "<ast.Dict object at 0x0000010C6A00BB80>.get",
        "HelperResult"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._generate_timeline_report": {
      "name": "_generate_timeline_report",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "타임라인 리포트 생성",
      "calls": [
        "HelperResult"
      ]
    },
    "workflow.v3.api.user_api.UserCommandAPI._handle_stats": {
      "name": "_handle_stats",
      "args": [
        "self",
        "parsed"
      ],
      "decorators": [
        "<ast.Call object at 0x0000010C6A1626B0>"
      ],
      "is_async": false,
      "docstring": "통계 정보",
      "calls": [
        "InternalWorkflowAPI",
        "internal_api.calculate_plan_statistics",
        "HelperResult",
        "HelperResult",
        "log_command"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "workflow_manager"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "threading.Event",
        "threading.Event",
        "self._subscribe_events"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._subscribe_events": {
      "name": "_subscribe_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 이벤트 구독",
      "calls": [
        "event_bus.subscribe",
        "event_bus.subscribe"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor.start": {
      "name": "start",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "자동 실행 시작",
      "calls": [
        "logger.warning",
        "self._stop_event.clear",
        "datetime.now",
        "threading.Thread",
        "self._thread.start",
        "logger.info"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor.stop": {
      "name": "stop",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "자동 실행 중지",
      "calls": [
        "self._stop_event.set",
        "self._thread.join",
        "datetime.now",
        "logger.info"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor.pause": {
      "name": "pause",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "일시 정지",
      "calls": [
        "self._pause_event.set",
        "logger.info"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor.resume": {
      "name": "resume",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "재개",
      "calls": [
        "self._pause_event.clear",
        "logger.info"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._run_loop": {
      "name": "_run_loop",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "메인 실행 루프",
      "calls": [
        "logger.info",
        "self._stop_event.is_set",
        "time.sleep",
        "self._get_next_executable_task",
        "logger.info",
        "self._on_all_complete",
        "self._execute_task",
        "time.sleep",
        "logger.error",
        "self.pause",
        "logger.info"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._get_next_executable_task": {
      "name": "_get_next_executable_task",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "다음 실행 가능한 태스크 찾기",
      "calls": [
        "self.manager.get_current_task",
        "self._get_next_executable_task",
        "self._get_next_executable_task",
        "self._has_unmet_dependencies",
        "logger.info",
        "self._run_hooks",
        "hasattr",
        "self.manager.block_task",
        "self._get_next_executable_task"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._has_unmet_dependencies": {
      "name": "_has_unmet_dependencies",
      "args": [
        "self",
        "task"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크의 의존성이 충족되지 않았는지 확인",
      "calls": [
        "isinstance",
        "self.manager.internal_api.get_task_by_id"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._execute_task": {
      "name": "_execute_task",
      "args": [
        "self",
        "task"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 실행",
      "calls": [
        "logger.info",
        "self._run_hooks",
        "self.manager.internal_api.update_task_status",
        "<ast.Call object at 0x0000010C6A0EF1F0>.isoformat",
        "datetime.now",
        "self._simulate_task_execution",
        "self.manager.complete_task",
        "self._run_hooks",
        "logger.error",
        "hasattr",
        "self.manager.fail_task",
        "str",
        "self._run_hooks",
        "self.pause"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._simulate_task_execution": {
      "name": "_simulate_task_execution",
      "args": [
        "self",
        "task"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 실행 시뮬레이션 (실제 구현 시 교체 필요)",
      "calls": [
        "task.description.startswith",
        "<ast.Subscript object at 0x0000010C6A04C490>.strip",
        "logger.info",
        "task.outputs.get",
        "time.sleep"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._on_task_completed": {
      "name": "_on_task_completed",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료 이벤트 핸들러",
      "calls": [
        "logger.debug"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._on_task_failed": {
      "name": "_on_task_failed",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 실패 이벤트 핸들러",
      "calls": [
        "self.pause"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._on_all_complete": {
      "name": "_on_all_complete",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 태스크 완료 시 호출",
      "calls": [
        "logger.info",
        "self._run_hooks",
        "self.stop"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor._run_hooks": {
      "name": "_run_hooks",
      "args": [
        "self",
        "hook_type",
        "task"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "훅 실행",
      "calls": [
        "hook",
        "logger.error"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor.register_hook": {
      "name": "register_hook",
      "args": [
        "self",
        "hook_type",
        "callback"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "훅 등록\n\nArgs:\n    hook_type: 'before_task', 'after_task', 'on_error', 'on_blocked', 'on_complete'\n    callback: 콜백 함수",
      "calls": [
        "ValueError",
        "<ast.Subscript object at 0x0000010C6A04CA60>.append",
        "logger.debug"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor.unregister_hook": {
      "name": "unregister_hook",
      "args": [
        "self",
        "hook_type",
        "callback"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "훅 제거",
      "calls": [
        "<ast.Subscript object at 0x0000010C6A04FCD0>.remove"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor.get_status": {
      "name": "get_status",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "실행기 상태 조회",
      "calls": [
        "self.stats.copy",
        "datetime.now",
        "<ast.BinOp object at 0x0000010C6A00B340>.total_seconds"
      ]
    },
    "workflow.v3.commands.auto_executor.AutoTaskExecutor.__del__": {
      "name": "__del__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "소멸자",
      "calls": [
        "self.stop",
        "event_bus.unsubscribe",
        "event_bus.unsubscribe"
      ]
    },
    "workflow.v3.listeners.ai_instruction_base.AIInstruction.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "event_type",
        "context"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A0DAE30>.strftime",
        "datetime.now",
        "<ast.Call object at 0x0000010C6A0D8070>.isoformat",
        "datetime.now"
      ]
    },
    "workflow.v3.listeners.ai_instruction_base.AIInstruction.add_action": {
      "name": "add_action",
      "args": [
        "self",
        "action_type",
        "params",
        "order",
        "depends_on"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "AI가 수행할 작업 추가",
      "calls": [
        "len",
        "len",
        "self.actions.append"
      ]
    },
    "workflow.v3.listeners.ai_instruction_base.AIInstruction.set_priority": {
      "name": "set_priority",
      "args": [
        "self",
        "priority"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "우선순위 설정",
      "calls": []
    },
    "workflow.v3.listeners.ai_instruction_base.AIInstruction.to_dict": {
      "name": "to_dict",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "딕셔너리로 변환",
      "calls": []
    },
    "workflow.v3.listeners.ai_instruction_base.AIInstruction.save": {
      "name": "save",
      "args": [
        "self",
        "filepath"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "지시서 저장",
      "calls": [
        "os.makedirs",
        "os.path.dirname",
        "os.path.exists",
        "open",
        "json.load",
        "instructions.append",
        "self.to_dict",
        "len",
        "open",
        "json.dump",
        "open",
        "json.dump",
        "self.to_dict"
      ]
    },
    "workflow.v3.listeners.automation_listeners.TaskAutoProgressListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "workflow_manager",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A036890>.__init__",
        "super"
      ]
    },
    "workflow.v3.listeners.automation_listeners.TaskAutoProgressListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.listeners.automation_listeners.TaskAutoProgressListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료 시 자동으로 다음 태스크 시작",
      "calls": [
        "hasattr",
        "self.workflow_manager.auto_start_next_task",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.automation_listeners.PlanAutoArchiveListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "workflow_manager",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A037940>.__init__",
        "super"
      ]
    },
    "workflow.v3.listeners.automation_listeners.PlanAutoArchiveListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.listeners.automation_listeners.PlanAutoArchiveListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 완료 시 자동 보관",
      "calls": [
        "hasattr",
        "self.workflow_manager.archive_completed_plan",
        "logger.info",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.automation_listeners.ContextSyncListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "context_integration",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A0D8AF0>.__init__",
        "super"
      ]
    },
    "workflow.v3.listeners.automation_listeners.ContextSyncListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.listeners.automation_listeners.ContextSyncListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "event.details.get",
        "self.context.sync_plan_summary",
        "self.context.sync_plan_summary",
        "self.context.record_event",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.automation_listeners.AutoSaveListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "storage",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A0DAD40>.__init__",
        "super"
      ]
    },
    "workflow.v3.listeners.automation_listeners.AutoSaveListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "list"
      ]
    },
    "workflow.v3.listeners.automation_listeners.AutoSaveListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "logger.debug",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.automation_listeners.GitCommitListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A04D5A0>.__init__",
        "super"
      ]
    },
    "workflow.v3.listeners.automation_listeners.GitCommitListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.listeners.automation_listeners.GitCommitListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "details.get",
        "self._auto_commit",
        "details.get",
        "self._auto_commit",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.automation_listeners.GitCommitListener._auto_commit": {
      "name": "_auto_commit",
      "args": [
        "self",
        "message"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Git 자동 커밋 수행",
      "calls": [
        "logger.info"
      ]
    },
    "workflow.v3.listeners.automation_listeners.AuditLogListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A04DB10>.__init__",
        "super",
        "Path"
      ]
    },
    "workflow.v3.listeners.automation_listeners.AuditLogListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "list"
      ]
    },
    "workflow.v3.listeners.automation_listeners.AuditLogListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "hasattr",
        "str",
        "self.audit_entries.append",
        "len",
        "self._save_audit_log"
      ]
    },
    "workflow.v3.listeners.automation_listeners.AuditLogListener._save_audit_log": {
      "name": "_save_audit_log",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "감사 로그 저장",
      "calls": [
        "self.audit_log_path.exists",
        "open",
        "json.load",
        "existing.extend",
        "self.audit_log_path.parent.mkdir",
        "open",
        "json.dump",
        "self.audit_entries.clear",
        "logger.debug",
        "len",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.base.BaseEventListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Args:\n    enabled: 리스너 활성화 여부",
      "calls": [
        "self.get_subscribed_events"
      ]
    },
    "workflow.v3.listeners.base.BaseEventListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [
        "abstractmethod"
      ],
      "is_async": false,
      "docstring": "구독할 이벤트 타입 반환\n\nReturns:\n    구독할 EventType의 집합",
      "calls": []
    },
    "workflow.v3.listeners.base.BaseEventListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [
        "abstractmethod"
      ],
      "is_async": false,
      "docstring": "이벤트 처리 로직\n\nArgs:\n    event: 처리할 워크플로우 이벤트\n\nReturns:\n    처리 결과 딕셔너리 (선택적)",
      "calls": []
    },
    "workflow.v3.listeners.base.BaseEventListener.should_handle": {
      "name": "should_handle",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리 여부 결정\n\nArgs:\n    event: 확인할 이벤트\n\nReturns:\n    처리해야 하면 True",
      "calls": []
    },
    "workflow.v3.listeners.base.BaseEventListener.on_error": {
      "name": "on_error",
      "args": [
        "self",
        "event",
        "error"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 처리\n\nArgs:\n    event: 에러가 발생한 이벤트\n    error: 발생한 예외",
      "calls": [
        "logger.error"
      ]
    },
    "workflow.v3.listeners.base.BaseEventListener.process": {
      "name": "process",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리 래퍼 (메트릭 포함)\n\nArgs:\n    event: 처리할 이벤트\n\nReturns:\n    처리 결과",
      "calls": [
        "self.should_handle",
        "self.handle_event",
        "self.on_error"
      ]
    },
    "workflow.v3.listeners.base.BaseEventListener.get_metrics": {
      "name": "get_metrics",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "리스너 메트릭 반환\n\nReturns:\n    처리 통계 정보",
      "calls": [
        "len",
        "max"
      ]
    },
    "workflow.v3.listeners.context_listener.ContextUpdateListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A035BA0>.__init__",
        "super",
        "Path"
      ]
    },
    "workflow.v3.listeners.context_listener.ContextUpdateListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "구독할 이벤트 타입",
      "calls": []
    },
    "workflow.v3.listeners.context_listener.ContextUpdateListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리",
      "calls": [
        "self.context_file.exists",
        "open",
        "json.load",
        "event.details.get",
        "hasattr",
        "event.timestamp.isoformat",
        "str",
        "event.details.get",
        "hasattr",
        "event.timestamp.isoformat",
        "str",
        "<ast.Subscript object at 0x0000010C6A036E00>.append",
        "event.details.get",
        "hasattr",
        "event.timestamp.isoformat",
        "str",
        "<ast.Call object at 0x0000010C6A04E200>.isoformat",
        "datetime.now",
        "self.context_file.parent.mkdir",
        "open",
        "json.dump",
        "logger.debug",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A035090>.__init__",
        "super",
        "Path",
        "self.docs_dir.mkdir"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "구독할 이벤트 타입",
      "calls": []
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리",
      "calls": [
        "self._generate_task_docs",
        "self._generate_plan_summary",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener._generate_task_docs": {
      "name": "_generate_task_docs",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 문서 생성",
      "calls": [
        "Path",
        "task_context_path.exists",
        "open",
        "json.load",
        "<ast.Call object at 0x0000010C6A0358A0>.get",
        "all_contexts.get",
        "logger.debug",
        "details.get",
        "task_context.get",
        "<ast.Call object at 0x0000010C6A00A290>.strftime",
        "datetime.now",
        "details.get",
        "details.get",
        "task_context.get",
        "details.get",
        "self._format_file_list",
        "task_context.get",
        "self._format_file_list",
        "task_context.get",
        "self._format_code_changes",
        "self._format_test_results",
        "task_context.get",
        "self._format_additional_info",
        "<ast.Call object at 0x0000010C6A00B490>.lower",
        "details.get",
        "<ast.Constant object at 0x0000010C6A00BFA0>.join",
        "c.isalnum",
        "<ast.Call object at 0x0000010C6A00BA30>.strftime",
        "datetime.now",
        "doc_path.write_text",
        "self.generated_docs.append",
        "str",
        "logger.info",
        "print"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener._generate_plan_summary": {
      "name": "_generate_plan_summary",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 완료 시 요약 문서 생성",
      "calls": [
        "details.get",
        "details.get",
        "details.get",
        "details.get",
        "self._format_generated_docs",
        "details.get",
        "<ast.Call object at 0x0000010C6A04F5B0>.strftime",
        "datetime.now",
        "summary_path.write_text",
        "print"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener._format_file_list": {
      "name": "_format_file_list",
      "args": [
        "self",
        "files"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일 목록 포맷팅",
      "calls": [
        "<ast.Constant object at 0x0000010C6A04DAE0>.join"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener._format_code_changes": {
      "name": "_format_code_changes",
      "args": [
        "self",
        "context"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "코드 변경사항 포맷팅",
      "calls": [
        "context.get",
        "context.get",
        "<ast.Constant object at 0x0000010C6A04DD20>.join"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener._format_test_results": {
      "name": "_format_test_results",
      "args": [
        "self",
        "results"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "테스트 결과 포맷팅",
      "calls": [
        "output.append",
        "output.append",
        "output.append",
        "<ast.Constant object at 0x0000010C6A0E4D00>.join"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener._format_additional_info": {
      "name": "_format_additional_info",
      "args": [
        "self",
        "context",
        "details"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "추가 정보 포맷팅",
      "calls": [
        "context.get",
        "info.append",
        "info.append",
        "context.get",
        "info.append",
        "<ast.Subscript object at 0x0000010C6A0E4280>.items",
        "info.append",
        "details.get",
        "info.append",
        "info.append",
        "<ast.Constant object at 0x0000010C6A0E7A30>.join"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener._format_generated_docs": {
      "name": "_format_generated_docs",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "생성된 문서 목록",
      "calls": [
        "<ast.Constant object at 0x0000010C6A0E7D90>.join",
        "Path"
      ]
    },
    "workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener.get_generated_docs_count": {
      "name": "get_generated_docs_count",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "생성된 문서 수 반환",
      "calls": [
        "len"
      ]
    },
    "workflow.v3.listeners.error_collector_listener.ErrorCollectorListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A00BA60>.__init__",
        "super",
        "Path"
      ]
    },
    "workflow.v3.listeners.error_collector_listener.ErrorCollectorListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "구독할 이벤트 타입",
      "calls": []
    },
    "workflow.v3.listeners.error_collector_listener.ErrorCollectorListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리",
      "calls": [
        "self._collect_error"
      ]
    },
    "workflow.v3.listeners.error_collector_listener.ErrorCollectorListener._collect_error": {
      "name": "_collect_error",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "오류 수집",
      "calls": [
        "event.details.get",
        "<ast.Subscript object at 0x0000010C6A00A050>.append",
        "self.error_log_path.parent.mkdir",
        "self.error_log_path.write_text",
        "json.dumps",
        "print"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A066560>.__init__",
        "super"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 이벤트를 AI 해결 지시로 변환",
      "calls": [
        "event.details.get",
        "event.details.get",
        "AIInstruction",
        "event.details.get",
        "event.details.get",
        "event.timestamp.isoformat",
        "self._add_file_not_found_actions",
        "self._add_permission_error_actions",
        "self._add_import_error_actions",
        "self._add_syntax_error_actions",
        "self._add_network_error_actions",
        "self._add_generic_error_actions",
        "instruction.add_action",
        "instruction.set_priority",
        "instruction.save",
        "print",
        "print",
        "len",
        "print"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor._add_file_not_found_actions": {
      "name": "_add_file_not_found_actions",
      "args": [
        "self",
        "instruction",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "파일 없음 에러 해결 지시",
      "calls": [
        "self._extract_file_path",
        "event.details.get",
        "instruction.add_action",
        "instruction.add_action",
        "instruction.add_action"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor._add_permission_error_actions": {
      "name": "_add_permission_error_actions",
      "args": [
        "self",
        "instruction",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "권한 에러 해결 지시",
      "calls": [
        "instruction.add_action",
        "instruction.add_action"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor._add_import_error_actions": {
      "name": "_add_import_error_actions",
      "args": [
        "self",
        "instruction",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Import 에러 해결 지시",
      "calls": [
        "self._extract_module_name",
        "event.details.get",
        "instruction.add_action",
        "instruction.add_action",
        "instruction.add_action"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor._add_syntax_error_actions": {
      "name": "_add_syntax_error_actions",
      "args": [
        "self",
        "instruction",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "문법 에러 해결 지시",
      "calls": [
        "instruction.add_action",
        "event.details.get",
        "event.details.get",
        "instruction.add_action"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor._add_network_error_actions": {
      "name": "_add_network_error_actions",
      "args": [
        "self",
        "instruction",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "네트워크 에러 해결 지시",
      "calls": [
        "instruction.add_action",
        "instruction.add_action"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor._add_generic_error_actions": {
      "name": "_add_generic_error_actions",
      "args": [
        "self",
        "instruction",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "일반 에러 해결 지시",
      "calls": [
        "instruction.add_action",
        "event.details.get",
        "instruction.add_action",
        "instruction.add_action"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor._extract_file_path": {
      "name": "_extract_file_path",
      "args": [
        "self",
        "error_message"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 메시지에서 파일 경로 추출",
      "calls": [
        "re.search",
        "match.group"
      ]
    },
    "workflow.v3.listeners.error_instructor.ErrorInstructor._extract_module_name": {
      "name": "_extract_module_name",
      "args": [
        "self",
        "error_message"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "에러 메시지에서 모듈명 추출",
      "calls": [
        "re.search",
        "<ast.Call object at 0x0000010C6A04F250>.split",
        "match.group"
      ]
    },
    "workflow.v3.listeners.error_listener.ErrorHandlerListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "workflow_manager",
        "retry_limit",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A009E40>.__init__",
        "super"
      ]
    },
    "workflow.v3.listeners.error_listener.ErrorHandlerListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "구독할 이벤트 타입",
      "calls": []
    },
    "workflow.v3.listeners.error_listener.ErrorHandlerListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리",
      "calls": [
        "self.retry_counts.get",
        "logger.info",
        "hasattr",
        "self.workflow_manager.retry_task",
        "logger.error",
        "hasattr",
        "self.workflow_manager.pause_plan",
        "logger.warning",
        "details.get",
        "hasattr",
        "self.workflow_manager.handle_blocked_task",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.error_report_listener.ErrorReportListener.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A035540>.__init__",
        "super",
        "self.ensure_log_files"
      ]
    },
    "workflow.v3.listeners.error_report_listener.ErrorReportListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.listeners.error_report_listener.ErrorReportListener.ensure_log_files": {
      "name": "ensure_log_files",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "로그 파일 초기화",
      "calls": [
        "os.makedirs",
        "os.path.exists",
        "open",
        "json.dump",
        "os.path.exists",
        "open",
        "json.dump"
      ]
    },
    "workflow.v3.listeners.error_report_listener.ErrorReportListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "오류 이벤트 처리",
      "calls": [
        "<ast.Call object at 0x0000010C6A036770>.strftime",
        "datetime.now",
        "<ast.Call object at 0x0000010C6A037BE0>.isoformat",
        "datetime.now",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "self._suggest_actions",
        "self._determine_severity",
        "open",
        "json.load",
        "<ast.Subscript object at 0x0000010C6A035270>.append",
        "<ast.Call object at 0x0000010C6A0375B0>.isoformat",
        "datetime.now",
        "open",
        "json.dump",
        "open",
        "json.load",
        "history.append",
        "open",
        "json.dump",
        "print",
        "print"
      ]
    },
    "workflow.v3.listeners.error_report_listener.ErrorReportListener._suggest_actions": {
      "name": "_suggest_actions",
      "args": [
        "self",
        "details"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "오류에 따른 권장 조치 제안",
      "calls": [
        "details.get",
        "suggestions.append",
        "suggestions.append",
        "suggestions.append",
        "suggestions.append",
        "suggestions.append",
        "suggestions.append",
        "suggestions.append",
        "suggestions.append",
        "suggestions.append",
        "suggestions.append",
        "suggestions.append"
      ]
    },
    "workflow.v3.listeners.error_report_listener.ErrorReportListener._determine_severity": {
      "name": "_determine_severity",
      "args": [
        "self",
        "details"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "오류 심각도 판단",
      "calls": [
        "details.get",
        "any",
        "any",
        "any"
      ]
    },
    "workflow.v3.listeners.task_completion_instructor.TaskCompletionInstructor.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A034550>.__init__",
        "super"
      ]
    },
    "workflow.v3.listeners.task_completion_instructor.TaskCompletionInstructor.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.listeners.task_completion_instructor.TaskCompletionInstructor.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료 이벤트를 AI 지시로 변환",
      "calls": [
        "AIInstruction",
        "event.details.get",
        "event.details.get",
        "event.timestamp.isoformat",
        "self._should_commit",
        "instruction.add_action",
        "event.details.get",
        "event.details.get",
        "instruction.add_action",
        "event.details.get",
        "self._create_report_message",
        "instruction.add_action",
        "self._should_update_docs",
        "instruction.add_action",
        "event.details.get",
        "event.details.get",
        "instruction.add_action",
        "next_task.get",
        "<ast.Call object at 0x0000010C6A00AB00>.lower",
        "event.details.get",
        "instruction.add_action",
        "event.details.get",
        "<ast.Call object at 0x0000010C6A00B430>.lower",
        "event.details.get",
        "instruction.set_priority",
        "instruction.save",
        "print",
        "len",
        "print",
        "event.details.get",
        "print",
        "print"
      ]
    },
    "workflow.v3.listeners.task_completion_instructor.TaskCompletionInstructor._should_commit": {
      "name": "_should_commit",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "Git 커밋이 필요한지 판단",
      "calls": [
        "<ast.Call object at 0x0000010C6A00A200>.lower",
        "event.details.get",
        "any"
      ]
    },
    "workflow.v3.listeners.task_completion_instructor.TaskCompletionInstructor._should_update_docs": {
      "name": "_should_update_docs",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "문서 업데이트가 필요한지 판단",
      "calls": [
        "<ast.Call object at 0x0000010C6A04FCD0>.lower",
        "event.details.get",
        "any"
      ]
    },
    "workflow.v3.listeners.task_completion_instructor.TaskCompletionInstructor._create_report_message": {
      "name": "_create_report_message",
      "args": [
        "self",
        "event",
        "next_task"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "사용자 보고 메시지 생성",
      "calls": [
        "event.details.get",
        "event.timestamp.strftime",
        "event.details.get",
        "event.details.get",
        "next_task.get"
      ]
    },
    "workflow.v3.listeners.task_completion_listener.TaskCompletionListener.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A04D090>.__init__",
        "super",
        "self.ensure_log_file"
      ]
    },
    "workflow.v3.listeners.task_completion_listener.TaskCompletionListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": []
    },
    "workflow.v3.listeners.task_completion_listener.TaskCompletionListener.ensure_log_file": {
      "name": "ensure_log_file",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "로그 파일 초기화",
      "calls": [
        "os.makedirs",
        "os.path.exists",
        "open",
        "json.dump"
      ]
    },
    "workflow.v3.listeners.task_completion_listener.TaskCompletionListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료 이벤트 처리",
      "calls": [
        "open",
        "json.load",
        "event.details.get",
        "<ast.Call object at 0x0000010C6A04F1C0>.isoformat",
        "datetime.now",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "completions.append",
        "len",
        "open",
        "json.dump",
        "print",
        "event.details.get",
        "print"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener.__init__": {
      "name": "__init__",
      "args": [
        "self",
        "enabled"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A160CD0>.__init__",
        "super",
        "Path"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "구독할 이벤트 타입",
      "calls": []
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이벤트 처리",
      "calls": [
        "self._provide_task_context",
        "self._prepare_task_context",
        "logger.error"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener._prepare_task_context": {
      "name": "_prepare_task_context",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 추가 시 컨텍스트 준비",
      "calls": [
        "details.get",
        "self._find_similar_tasks",
        "<ast.Call object at 0x0000010C6A163040>.isoformat",
        "datetime.now",
        "logger.debug"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener._provide_task_context": {
      "name": "_provide_task_context",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 시작 시 컨텍스트 제공",
      "calls": [
        "details.get",
        "self.task_contexts.get",
        "self._load_related_docs",
        "context.get",
        "self._load_previous_tasks",
        "self._load_project_context",
        "self._display_context",
        "self._update_task_context",
        "str",
        "context.get"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener._find_similar_tasks": {
      "name": "_find_similar_tasks",
      "args": [
        "self",
        "task_title"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "유사한 이전 태스크 찾기",
      "calls": [
        "Path",
        "task_context_path.exists",
        "open",
        "json.load",
        "<ast.Call object at 0x0000010C6A0D8190>.items",
        "all_contexts.get",
        "context.get",
        "self._calculate_similarity",
        "similar_tasks.append",
        "context.get",
        "context.get",
        "logger.debug",
        "similar_tasks.sort"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener._calculate_similarity": {
      "name": "_calculate_similarity",
      "args": [
        "self",
        "text1",
        "text2"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "간단한 텍스트 유사도 계산",
      "calls": [
        "set",
        "<ast.Call object at 0x0000010C6A0348B0>.split",
        "text1.lower",
        "set",
        "<ast.Call object at 0x0000010C6A0342E0>.split",
        "text2.lower",
        "len",
        "len"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener._load_related_docs": {
      "name": "_load_related_docs",
      "args": [
        "self",
        "task_title",
        "similar_tasks"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "관련 문서 로드",
      "calls": [
        "self.docs_dir.exists",
        "self.docs_dir.glob",
        "doc.exists",
        "related_docs.append",
        "<ast.Call object at 0x0000010C6A037580>.split",
        "task_title.lower",
        "self.docs_dir.glob",
        "doc.stem.lower",
        "any",
        "related_docs.append"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener._load_previous_tasks": {
      "name": "_load_previous_tasks",
      "args": [
        "self",
        "task_title"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "이전 태스크 정보 로드",
      "calls": [
        "Path",
        "workflow_path.exists",
        "open",
        "json.load",
        "workflow_data.get",
        "plan.get",
        "task.get",
        "any",
        "<ast.Call object at 0x0000010C6A034FD0>.lower",
        "task.get",
        "<ast.Call object at 0x0000010C6A00ADA0>.split",
        "task_title.lower",
        "previous_tasks.append",
        "task.get",
        "task.get",
        "task.get",
        "logger.debug"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener._load_project_context": {
      "name": "_load_project_context",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "프로젝트 전체 컨텍스트 로드",
      "calls": [
        "Path",
        "context_path.exists",
        "open",
        "json.load",
        "logger.debug",
        "context.get",
        "context.get",
        "<ast.Call object at 0x0000010C6A009C60>.get",
        "context.get"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener._display_context": {
      "name": "_display_context",
      "args": [
        "self",
        "task_title",
        "related_docs",
        "previous_tasks",
        "project_context"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "컨텍스트 정보 표시",
      "calls": [
        "print",
        "len",
        "print",
        "print",
        "len",
        "print",
        "task.get",
        "print",
        "print",
        "project_context.get",
        "project_context.get"
      ]
    },
    "workflow.v3.listeners.task_context_listener.TaskContextListener._update_task_context": {
      "name": "_update_task_context",
      "args": [
        "self",
        "task_id",
        "context_data"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "task_context.json 업데이트",
      "calls": [
        "Path",
        "task_context_path.exists",
        "open",
        "json.load",
        "<ast.Subscript object at 0x0000010C6A04ED40>.update",
        "open",
        "json.dump"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor.__init__": {
      "name": "__init__",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "<ast.Call object at 0x0000010C6A1EE500>.__init__",
        "super",
        "self._ensure_state_file"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor.get_subscribed_events": {
      "name": "get_subscribed_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 주요 워크플로우 이벤트 구독",
      "calls": []
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor._ensure_state_file": {
      "name": "_ensure_state_file",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 상태 파일 초기화",
      "calls": [
        "os.makedirs",
        "os.path.exists",
        "open",
        "json.dump"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor.handle_event": {
      "name": "handle_event",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 이벤트별 AI 지시 생성",
      "calls": [
        "self._handle_plan_created",
        "self._handle_plan_started",
        "self._handle_task_started",
        "self._handle_task_completed",
        "self._handle_task_failed",
        "self._handle_plan_completed",
        "print"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor._handle_plan_created": {
      "name": "_handle_plan_created",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 생성 시 AI 지시",
      "calls": [
        "AIInstruction",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "instruction.add_action",
        "event.details.get",
        "instruction.add_action",
        "instruction.add_action",
        "instruction.save",
        "self._update_state"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor._handle_plan_started": {
      "name": "_handle_plan_started",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 시작 시 AI 지시",
      "calls": [
        "AIInstruction",
        "event.details.get",
        "event.details.get",
        "<ast.Call object at 0x0000010C6A162800>.lower",
        "<ast.Call object at 0x0000010C6A160E80>.replace",
        "event.details.get",
        "instruction.add_action",
        "event.details.get",
        "instruction.add_action",
        "instruction.save"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor._handle_task_started": {
      "name": "_handle_task_started",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 시작 시 AI 지시",
      "calls": [
        "AIInstruction",
        "event.details.get",
        "instruction.add_action",
        "event.details.get",
        "<ast.Call object at 0x0000010C6A0D99C0>.lower",
        "event.details.get",
        "instruction.add_action",
        "instruction.add_action",
        "instruction.save",
        "self._update_state"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor._handle_task_completed": {
      "name": "_handle_task_completed",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 완료는 TaskCompletionInstructor가 처리하므로 여기서는 상태만 업데이트",
      "calls": [
        "self._update_state",
        "event.details.get",
        "event.timestamp.isoformat"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor._handle_task_failed": {
      "name": "_handle_task_failed",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "태스크 실패는 ErrorInstructor가 처리하므로 여기서는 복구 전략만 추가",
      "calls": [
        "AIInstruction",
        "event.details.get",
        "instruction.add_action",
        "instruction.set_priority",
        "instruction.save"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor._handle_plan_completed": {
      "name": "_handle_plan_completed",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 완료 시 종합 보고 및 마무리 작업 지시",
      "calls": [
        "AIInstruction",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "instruction.add_action",
        "instruction.add_action",
        "event.details.get",
        "event.details.get",
        "instruction.add_action",
        "event.details.get",
        "event.details.get",
        "max",
        "event.details.get",
        "instruction.add_action",
        "event.details.get",
        "event.details.get",
        "event.details.get",
        "self._generate_achievements_summary",
        "instruction.add_action",
        "instruction.save",
        "self._update_state"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor._update_state": {
      "name": "_update_state",
      "args": [
        "self",
        "key",
        "value"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "워크플로우 상태 업데이트",
      "calls": [
        "open",
        "json.load",
        "os.path.getmtime",
        "open",
        "json.dump",
        "print"
      ]
    },
    "workflow.v3.listeners.workflow_instructor.WorkflowInstructor._generate_achievements_summary": {
      "name": "_generate_achievements_summary",
      "args": [
        "self",
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "플랜 성과 요약 생성",
      "calls": [
        "event.details.get",
        "achievements.append",
        "event.details.get",
        "event.details.get",
        "achievements.append",
        "event.details.get",
        "event.details.get",
        "achievements.append",
        "event.details.get",
        "<ast.Constant object at 0x0000010C6A00AAD0>.join"
      ]
    },
    "workflow.v3.tests.test_event_publishing.TestEventPublishing.setUp": {
      "name": "setUp",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "테스트 환경 설정",
      "calls": [
        "tempfile.mkdtemp",
        "Path",
        "self.memory_dir.mkdir",
        "self._register_event_capture",
        "WorkflowManager.clear_instance"
      ]
    },
    "workflow.v3.tests.test_event_publishing.TestEventPublishing.tearDown": {
      "name": "tearDown",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "테스트 환경 정리",
      "calls": [
        "shutil.rmtree",
        "WorkflowManager.clear_instance",
        "event_bus._subscribers.clear"
      ]
    },
    "workflow.v3.tests.test_event_publishing.TestEventPublishing._register_event_capture": {
      "name": "_register_event_capture",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "모든 이벤트를 캡처하는 핸들러 등록",
      "calls": []
    },
    "workflow.v3.tests.test_event_publishing.TestEventPublishing.capture_event": {
      "name": "capture_event",
      "args": [
        "event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": null,
      "calls": [
        "self.captured_events.append",
        "print"
      ]
    },
    "workflow.v3.tests.test_event_publishing.TestEventPublishing.test_event_bus_basic": {
      "name": "test_event_bus_basic",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "EventBus 기본 기능 테스트",
      "calls": [
        "print",
        "Event",
        "event_bus.publish",
        "self.assertEqual",
        "len",
        "self.assertEqual",
        "self.assertEqual",
        "print"
      ]
    },
    "workflow.v3.tests.test_event_publishing.TestEventPublishing.test_workflow_manager_events": {
      "name": "test_workflow_manager_events",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "WorkflowManager의 이벤트 발행 테스트",
      "calls": [
        "print",
        "WorkflowManager",
        "wm.start_plan",
        "self.assertEqual",
        "len",
        "next",
        "self.assertEqual",
        "created_event.data.get",
        "wm.add_task",
        "self.assertEqual",
        "len",
        "self.assertEqual",
        "<ast.Subscript object at 0x0000010C6A0DB220>.data.get",
        "print",
        "len"
      ]
    },
    "workflow.v3.tests.test_event_publishing.TestEventPublishing.test_task_context_integration": {
      "name": "test_task_context_integration",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "TaskContextManager 통합 테스트",
      "calls": [
        "print",
        "TaskContextManager",
        "str",
        "TaskContextEventHandlers",
        "handlers.register_all",
        "WorkflowManager",
        "wm.start_plan",
        "self.assertTrue",
        "context_file.exists",
        "open",
        "json.load",
        "self.assertIn",
        "context_data.get",
        "self.assertEqual",
        "print"
      ]
    },
    "workflow.v3.tests.test_event_publishing.TestEventPublishing.test_event_chain": {
      "name": "test_event_chain",
      "args": [
        "self"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "전체 이벤트 체인 테스트",
      "calls": [
        "print",
        "TaskContextManager",
        "str",
        "TaskContextEventHandlers",
        "handlers.register_all",
        "WorkflowManager",
        "wm.start_plan",
        "wm.add_task",
        "wm.add_task",
        "EventBuilder.task_started",
        "wm._add_event",
        "wm.complete_task",
        "print",
        "len",
        "event_types.get",
        "print",
        "event_types.items",
        "print",
        "self.assertIn",
        "self.assertIn",
        "self.assertIn",
        "self.assertIn",
        "open",
        "json.load",
        "<ast.Subscript object at 0x0000010C6A04C8E0>.get",
        "self.assertIsNotNone",
        "self.assertEqual",
        "print"
      ]
    },
    "workflow.v3.tests.test_event_publishing.run_tests": {
      "name": "run_tests",
      "args": [],
      "decorators": [],
      "is_async": false,
      "docstring": "테스트 실행",
      "calls": [
        "<ast.Call object at 0x0000010C6A04CA30>.loadTestsFromTestCase",
        "unittest.TestLoader",
        "unittest.TextTestRunner",
        "runner.run",
        "result.wasSuccessful"
      ]
    },
    "events.unified_event_types.get_event_type": {
      "name": "get_event_type",
      "args": [
        "old_style_event"
      ],
      "decorators": [],
      "is_async": false,
      "docstring": "구 스타일 이벤트 문자열을 EventType enum으로 변환\n\nArgs:\n    old_style_event: 이전 스타일의 이벤트 문자열 (예: \"workflow.task.created\")\n    \nReturns:\n    대응하는 EventType enum 값\n    \nRaises:\n    ValueError: 매핑되지 않은 이벤트 타입인 경우",
      "calls": [
        "EventType",
        "ValueError"
      ]
    }
  },
  "event_emitters": [
    {
      "function": "switch_project",
      "event_call": "event_bus.publish",
      "module": "core.context_manager_refactored"
    },
    {
      "function": "switch_project",
      "event_call": "event_bus.publish",
      "module": "core.context_manager_refactored"
    },
    {
      "function": "save_all",
      "event_call": "event_bus.publish",
      "module": "core.context_manager_refactored"
    },
    {
      "function": "execute_workflow_command",
      "event_call": "get_dispatcher",
      "module": "workflow.v3.dispatcher"
    },
    {
      "function": "execute_workflow_command",
      "event_call": "dispatcher.execute",
      "module": "workflow.v3.dispatcher"
    },
    {
      "function": "_add_event",
      "event_call": "self.event_adapter.publish_workflow_event",
      "module": "workflow.v3.manager"
    },
    {
      "function": "_add_event",
      "event_call": "self.event_adapter.publish_workflow_event",
      "module": "workflow.v3.manager"
    },
    {
      "function": "publish_workflow_event",
      "event_call": "self.event_bus.publish",
      "module": "workflow.v3.workflow_event_adapter"
    },
    {
      "function": "publish_plan_created",
      "event_call": "self.publish_workflow_event",
      "module": "workflow.v3.workflow_event_adapter"
    },
    {
      "function": "publish_plan_started",
      "event_call": "self.publish_workflow_event",
      "module": "workflow.v3.workflow_event_adapter"
    },
    {
      "function": "publish_plan_completed",
      "event_call": "self.publish_workflow_event",
      "module": "workflow.v3.workflow_event_adapter"
    },
    {
      "function": "publish_task_added",
      "event_call": "self.publish_workflow_event",
      "module": "workflow.v3.workflow_event_adapter"
    },
    {
      "function": "publish_task_started",
      "event_call": "self.publish_workflow_event",
      "module": "workflow.v3.workflow_event_adapter"
    },
    {
      "function": "publish_task_completed",
      "event_call": "self.publish_workflow_event",
      "module": "workflow.v3.workflow_event_adapter"
    },
    {
      "function": "publish_task_failed",
      "event_call": "self.publish_workflow_event",
      "module": "workflow.v3.workflow_event_adapter"
    },
    {
      "function": "wrapper",
      "event_call": "self._emit_command_event",
      "module": "workflow.v3.api.decorators"
    },
    {
      "function": "wrapper",
      "event_call": "self._emit_command_event",
      "module": "workflow.v3.api.decorators"
    },
    {
      "function": "_add_event",
      "event_call": "self.manager.event_adapter.publish_workflow_event",
      "module": "workflow.v3.api.internal_api"
    },
    {
      "function": "test_event_bus_basic",
      "event_call": "event_bus.publish",
      "module": "workflow.v3.tests.test_event_publishing"
    }
  ],
  "imports": {
    "core.cache_manager": [
      "json",
      "time",
      "hashlib",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timezone",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List",
      "typing.Set",
      "logging",
      "threading.Lock",
      "collections.defaultdict",
      "python.path_utils.get_memory_path"
    ],
    "core.context_manager": [
      "json",
      "pathlib.Path",
      "datetime.datetime",
      "os",
      "logging",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List",
      "path_utils.get_context_path",
      "path_utils.get_workflow_path",
      "path_utils.get_project_root",
      "path_utils.get_cache_dir",
      "sys",
      "path_utils.get_context_path",
      "path_utils.get_workflow_path",
      "path_utils.get_project_root",
      "path_utils.get_cache_dir",
      "utils.io_helpers.atomic_write",
      "utils.io_helpers.write_json",
      "utils.io_helpers.read_json",
      "core.cache_manager.get_cache_manager",
      "python.workflow_integration.switch_project_workflow"
    ],
    "core.context_manager_refactored": [
      "os",
      "json",
      "logging",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List",
      "datetime.datetime",
      "pathlib.Path",
      "python.workflow.v3.event_bus.event_bus",
      "python.workflow.v3.event_types.EventType",
      "python.workflow.v3.event_types.create_project_event",
      "python.workflow.v3.event_types.create_context_event"
    ],
    "core.error_reporter": [
      "json",
      "traceback",
      "datetime.datetime",
      "pathlib.Path",
      "typing.Any",
      "typing.Dict",
      "typing.Optional",
      "typing.Union",
      "dataclasses.dataclass",
      "dataclasses.asdict"
    ],
    "core.project_storage": [
      "json",
      "logging",
      "pathlib.Path",
      "datetime.datetime",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List",
      "python.path_utils.get_project_root",
      "python.path_utils.get_memory_dir",
      "python.path_utils.get_context_path",
      "python.path_utils.get_workflow_path",
      "python.path_utils.get_cache_dir",
      "python.path_utils.get_backup_dir",
      "python.path_utils.ensure_dir",
      "python.utils.io_helpers.read_json",
      "python.utils.io_helpers.write_json",
      "python.utils.io_helpers.atomic_write",
      "python.utils.io_helpers.safe_read",
      "python.utils.io_helpers.backup_file"
    ],
    "workflow.__init__": [
      "v3.*"
    ],
    "workflow.v3.ai_instruction_executor": [
      "typing.Dict",
      "typing.Any",
      "typing.List",
      "typing.Optional",
      "pathlib.Path",
      "json",
      "logging",
      "datetime.datetime"
    ],
    "workflow.v3.code_integration": [
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "json",
      "os",
      "datetime.datetime",
      "manager.WorkflowManager",
      "parser.CommandParser",
      "models.EventType"
    ],
    "workflow.v3.context_integration": [
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List",
      "datetime.datetime",
      "logging",
      "models.WorkflowPlan",
      "models.Task",
      "models.WorkflowEvent",
      "models.EventType",
      "python.ai_helpers.helper_result.HelperResult",
      "python.core.context_manager.ContextManager"
    ],
    "workflow.v3.dispatcher": [
      "typing.Dict",
      "typing.Any",
      "os",
      "manager.WorkflowManager",
      "parser.CommandParser",
      "storage.WorkflowStorage",
      "errors.WorkflowError"
    ],
    "workflow.v3.enhanced_listener_integration": [
      "logging",
      "typing.Optional",
      "typing.Dict",
      "typing.Any",
      "typing.List",
      "pathlib.Path",
      "python.workflow.v3.event_bus.EventBus",
      "python.workflow.v3.listener_manager.ListenerManager",
      "python.workflow.v3.workflow_event_adapter.WorkflowEventAdapter",
      "python.workflow.v3.listeners.task_context_listener.TaskContextListener",
      "python.workflow.v3.listeners.error_collector_listener.ErrorCollectorListener",
      "python.workflow.v3.listeners.docs_generator_listener.DocsGeneratorListener",
      "python.workflow.v3.listeners.automation_listeners.TaskAutoProgressListener",
      "python.workflow.v3.listeners.automation_listeners.PlanAutoArchiveListener",
      "python.workflow.v3.listeners.ErrorHandlerListener",
      "python.workflow.v3.listener_manager.ErrorHandlerListener",
      "python.workflow.v3.events.GitAutoCommitListener"
    ],
    "workflow.v3.errors": [
      "enum.Enum",
      "typing.Optional",
      "typing.Any",
      "typing.Dict",
      "datetime.datetime"
    ],
    "workflow.v3.events": [
      "typing.Dict",
      "typing.Any",
      "typing.List",
      "typing.Optional",
      "typing.Callable",
      "datetime.datetime",
      "datetime.timezone",
      "datetime.timedelta",
      "models.WorkflowEvent",
      "models.WorkflowPlan",
      "models.Task",
      "models.TaskStatus",
      "event_types.EventType",
      "python.ai_helpers.helper_result.HelperResult",
      "logging"
    ],
    "workflow.v3.event_bus": [
      "threading",
      "logging",
      "typing.Dict",
      "typing.List",
      "typing.Callable",
      "typing.Any",
      "typing.Optional",
      "collections.defaultdict",
      "queue.Queue",
      "queue.Empty",
      "concurrent.futures.ThreadPoolExecutor",
      "concurrent.futures.Future",
      "datetime.datetime",
      "traceback",
      "time",
      "dataclasses.dataclass",
      "dataclasses.field",
      "uuid"
    ],
    "workflow.v3.event_types": [
      "dataclasses.dataclass",
      "dataclasses.field",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List",
      "datetime.datetime",
      "uuid",
      "python.events.unified_event_types.EventType",
      "enum.Enum",
      "event_bus.Event"
    ],
    "workflow.v3.listener_manager": [
      "typing.Dict",
      "typing.List",
      "typing.Callable",
      "typing.Any",
      "logging",
      "time",
      "collections.defaultdict",
      "python.workflow.v3.event_bus.EventBus",
      "python.workflow.v3.event_bus.Event",
      "python.workflow.v3.listeners.base.BaseEventListener",
      "python.workflow.v3.models.WorkflowEvent",
      "python.events.unified_event_types.EventType"
    ],
    "workflow.v3.manager": [
      "typing.Dict",
      "typing.Optional",
      "typing.List",
      "typing.Any",
      "datetime.datetime",
      "datetime.timezone",
      "json",
      "os",
      "pathlib.Path",
      "models.WorkflowPlan",
      "models.Task",
      "models.WorkflowState",
      "models.WorkflowEvent",
      "models.TaskStatus",
      "models.PlanStatus",
      "models.EventType",
      "events.EventStore",
      "events.EventBuilder",
      "parser.CommandParser",
      "storage.WorkflowStorage",
      "context_integration.ContextIntegration",
      "workflow_event_adapter.WorkflowEventAdapter",
      "errors.WorkflowError",
      "errors.ErrorCode",
      "errors.ErrorMessages",
      "errors.ErrorHandler",
      "errors.InputValidator",
      "errors.SuccessMessages",
      "api.internal_api.InternalWorkflowAPI",
      "api.user_api.UserCommandAPI",
      "commands.auto_executor.AutoTaskExecutor",
      "python.ai_helpers.helper_result.HelperResult",
      "event_bus.EventBus",
      "listener_manager.ListenerManager",
      "enhanced_listener_integration.EnhancedListenerIntegration",
      "logging",
      "task_context_handlers.TaskContextEventHandlers",
      "task_context_manager.TaskContextManager",
      "event_bus.event_bus",
      "traceback",
      "traceback",
      "pathlib.Path",
      "json",
      "os",
      "models.WorkflowEvent",
      "models.EventType"
    ],
    "workflow.v3.models": [
      "dataclasses.dataclass",
      "dataclasses.field",
      "datetime.datetime",
      "datetime.timezone",
      "datetime.timedelta",
      "enum.Enum",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "uuid",
      "json",
      "event_types.EventType",
      "errors.InputValidator",
      "errors.WorkflowError"
    ],
    "workflow.v3.parser": [
      "typing.Dict",
      "typing.Tuple",
      "typing.Optional",
      "typing.List",
      "typing.Any",
      "dataclasses.dataclass",
      "re"
    ],
    "workflow.v3.register_ai_listeners": [
      "python.workflow.v3.manager.WorkflowManager",
      "python.workflow.v3.listeners.task_completion_instructor.TaskCompletionInstructor",
      "python.workflow.v3.listeners.error_instructor.ErrorInstructor",
      "python.workflow.v3.listeners.workflow_instructor.WorkflowInstructor",
      "logging",
      "traceback",
      "python.workflow.v3.ai_instruction_executor.check_ai_instructions",
      "os",
      "json",
      "time"
    ],
    "workflow.v3.storage": [
      "json",
      "os",
      "shutil",
      "pathlib.Path",
      "datetime.datetime",
      "datetime.timezone",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List",
      "logging",
      "threading.Lock",
      "python.utils.io_helpers.write_json",
      "python.utils.io_helpers.read_json",
      "python.utils.io_helpers.read_json",
      "traceback",
      "json"
    ],
    "workflow.v3.storage_adapter": [
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "unified_storage.UnifiedWorkflowStorage"
    ],
    "workflow.v3.task_context_handlers": [
      "task_context_manager.TaskContextManager",
      "event_types.EventType"
    ],
    "workflow.v3.task_context_manager": [
      "json",
      "os",
      "shutil",
      "datetime.datetime",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "typing.List",
      "pathlib.Path",
      "logging"
    ],
    "workflow.v3.workflow_event_adapter": [
      "logging",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "datetime.datetime",
      "event_bus.EventBus",
      "event_bus.Event",
      "models.WorkflowEvent",
      "models.EventType",
      "events.EventBuilder",
      "uuid",
      "event_types.EventType",
      "event_bus.Event"
    ],
    "workflow.v3.__init__": [
      "manager.WorkflowManager",
      "dispatcher.WorkflowDispatcher",
      "storage.WorkflowStorage",
      "models.WorkflowState",
      "models.WorkflowPlan",
      "models.Task",
      "models.WorkflowEvent",
      "models.TaskStatus",
      "models.WorkflowError",
      "event_types.EventType",
      "events.EventProcessor",
      "events.EventBuilder",
      "events.EventStore",
      "workflow_event_adapter.WorkflowEventAdapter"
    ],
    "workflow.v3.api.decorators": [
      "functools",
      "logging",
      "typing.Callable",
      "typing.Any",
      "typing.Dict",
      "datetime.datetime",
      "traceback",
      "errors.WorkflowError",
      "errors.ErrorCode",
      "models.WorkflowEvent",
      "models.EventType",
      "inspect",
      "copy",
      "inspect",
      "warnings"
    ],
    "workflow.v3.api.internal_api": [
      "os",
      "logging",
      "typing.Optional",
      "typing.Dict",
      "typing.Any",
      "typing.List",
      "datetime.datetime",
      "uuid.uuid4",
      "models.WorkflowPlan",
      "models.Task",
      "models.TaskStatus",
      "models.PlanStatus",
      "models.WorkflowEvent",
      "models.EventType",
      "errors.WorkflowError",
      "errors.ErrorCode",
      "storage.WorkflowStorage",
      "events.EventBuilder",
      "decorators.internal_only",
      "decorators.log_command",
      "decorators.transactional",
      "decorators.auto_save",
      "json",
      "copy",
      "json"
    ],
    "workflow.v3.api.user_api": [
      "os",
      "logging",
      "typing.Optional",
      "typing.Dict",
      "typing.Any",
      "typing.List",
      "datetime.datetime",
      "models.Task",
      "models.TaskStatus",
      "errors.WorkflowError",
      "errors.ErrorCode",
      "parser.CommandParser",
      "parser.ParsedCommand",
      "python.ai_helpers.helper_result.HelperResult",
      "decorators.require_active_plan",
      "decorators.log_command",
      "decorators.validate_arguments",
      "decorators.auto_save",
      "decorators.rate_limit",
      "traceback",
      "commands.auto_executor.AutoTaskExecutor",
      "json",
      "datetime.datetime",
      "internal_api.InternalWorkflowAPI"
    ],
    "workflow.v3.api.__init__": [
      "decorators.require_active_plan",
      "decorators.log_command",
      "decorators.validate_arguments",
      "decorators.auto_save",
      "decorators.transactional",
      "decorators.rate_limit",
      "decorators.internal_only",
      "decorators.deprecated",
      "internal_api.InternalWorkflowAPI",
      "user_api.UserCommandAPI"
    ],
    "workflow.v3.commands.auto_executor": [
      "threading",
      "logging",
      "time",
      "typing.Optional",
      "typing.Callable",
      "typing.Dict",
      "typing.Any",
      "datetime.datetime",
      "queue.Queue",
      "queue.Empty",
      "models.Task",
      "models.TaskStatus",
      "models.EventType",
      "event_bus.event_bus"
    ],
    "workflow.v3.commands.__init__": [
      "auto_executor.AutoTaskExecutor"
    ],
    "workflow.v3.listeners.ai_instruction_base": [
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "datetime.datetime",
      "enum.Enum",
      "json",
      "os"
    ],
    "workflow.v3.listeners.automation_listeners": [
      "typing.Dict",
      "typing.Any",
      "typing.List",
      "logging",
      "pathlib.Path",
      "json",
      "models.EventType",
      "models.WorkflowEvent",
      "base.BaseEventListener"
    ],
    "workflow.v3.listeners.base": [
      "abc.ABC",
      "abc.abstractmethod",
      "typing.Set",
      "typing.Optional",
      "typing.Dict",
      "typing.Any",
      "logging",
      "python.workflow.v3.models.WorkflowEvent",
      "python.events.unified_event_types.EventType"
    ],
    "workflow.v3.listeners.context_listener": [
      "logging",
      "typing.List",
      "pathlib.Path",
      "json",
      "datetime.datetime",
      "models.EventType",
      "models.WorkflowEvent",
      "base.BaseEventListener"
    ],
    "workflow.v3.listeners.docs_generator_listener": [
      "datetime.datetime",
      "pathlib.Path",
      "typing.Dict",
      "typing.Any",
      "typing.List",
      "json",
      "logging",
      "models.EventType",
      "models.WorkflowEvent",
      "base.BaseEventListener"
    ],
    "workflow.v3.listeners.error_collector_listener": [
      "json",
      "datetime.datetime",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "logging",
      "models.EventType",
      "models.WorkflowEvent",
      "base.BaseEventListener"
    ],
    "workflow.v3.listeners.error_instructor": [
      "python.workflow.v3.listeners.base.BaseEventListener",
      "python.workflow.v3.listeners.ai_instruction_base.AIInstruction",
      "python.workflow.v3.listeners.ai_instruction_base.ActionType",
      "python.workflow.v3.listeners.ai_instruction_base.Priority",
      "python.workflow.v3.events.EventType",
      "python.workflow.v3.events.WorkflowEvent",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "os",
      "traceback",
      "re",
      "re"
    ],
    "workflow.v3.listeners.error_listener": [
      "logging",
      "typing.List",
      "models.EventType",
      "models.WorkflowEvent",
      "base.BaseEventListener"
    ],
    "workflow.v3.listeners.error_report_listener": [
      "python.workflow.v3.listeners.base.BaseEventListener",
      "python.workflow.v3.events.EventType",
      "python.workflow.v3.events.WorkflowEvent",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "json",
      "os",
      "datetime.datetime",
      "traceback"
    ],
    "workflow.v3.listeners.task_completion_instructor": [
      "python.workflow.v3.listeners.base.BaseEventListener",
      "python.workflow.v3.listeners.ai_instruction_base.AIInstruction",
      "python.workflow.v3.listeners.ai_instruction_base.ActionType",
      "python.workflow.v3.listeners.ai_instruction_base.Priority",
      "python.workflow.v3.events.EventType",
      "python.workflow.v3.events.WorkflowEvent",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "os"
    ],
    "workflow.v3.listeners.task_completion_listener": [
      "python.workflow.v3.listeners.base.BaseEventListener",
      "python.workflow.v3.events.EventType",
      "python.workflow.v3.events.WorkflowEvent",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "json",
      "os",
      "datetime.datetime"
    ],
    "workflow.v3.listeners.task_context_listener": [
      "json",
      "datetime.datetime",
      "pathlib.Path",
      "typing.Dict",
      "typing.List",
      "typing.Any",
      "typing.Optional",
      "logging",
      "models.EventType",
      "models.WorkflowEvent",
      "base.BaseEventListener"
    ],
    "workflow.v3.listeners.workflow_instructor": [
      "python.workflow.v3.listeners.base.BaseEventListener",
      "python.workflow.v3.listeners.ai_instruction_base.AIInstruction",
      "python.workflow.v3.listeners.ai_instruction_base.ActionType",
      "python.workflow.v3.listeners.ai_instruction_base.Priority",
      "python.workflow.v3.events.EventType",
      "python.workflow.v3.events.WorkflowEvent",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "typing.Optional",
      "json",
      "os"
    ],
    "workflow.v3.listeners.__init__": [
      "base.BaseEventListener",
      "error_collector_listener.ErrorCollectorListener",
      "docs_generator_listener.DocsGeneratorListener",
      "task_context_listener.TaskContextListener",
      "error_listener.ErrorHandlerListener",
      "context_listener.ContextUpdateListener"
    ],
    "workflow.v3.tests.test_event_publishing": [
      "unittest",
      "json",
      "tempfile",
      "shutil",
      "pathlib.Path",
      "datetime.datetime",
      "typing.List",
      "typing.Dict",
      "typing.Any",
      "sys",
      "python.workflow.v3.manager.WorkflowManager",
      "python.workflow.v3.event_bus.event_bus",
      "python.workflow.v3.event_bus.Event",
      "python.workflow.v3.event_types.EventType",
      "python.workflow.v3.task_context_manager.TaskContextManager",
      "python.workflow.v3.task_context_handlers.TaskContextEventHandlers",
      "python.workflow.v3.events.EventBuilder"
    ],
    "events.unified_event_types": [
      "enum.Enum",
      "typing.Dict",
      "typing.Any"
    ],
    "events.__init__": [
      "unified_event_types.EventType",
      "unified_event_types.EventTypes",
      "unified_event_types.get_event_type"
    ]
  }
}