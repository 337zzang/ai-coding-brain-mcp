"\"\"\"\n프로젝트 초기화 전담 모듈\n새 프로젝트 스켈레톤 생성을 단일 책임으로 관리\n\"\"\"\nfrom pathlib import Path\nfrom datetime import datetime\nimport subprocess\nimport json\nimport logging\nfrom typing import Dict, Any\n\nlogger = logging.getLogger(__name__)\n\n# 표준 디렉토리 구조\nSKELETON_DIRS = [\"src\", \"docs\", \"test\", \"memory\"]\n\ndef create_skeleton(root: Path, *, init_git: bool = True) -> Dict[str, Any]:\n    \"\"\"\n    새 프로젝트 스켈레톤 생성\n\n    Args:\n        root: 프로젝트 루트 경로\n        init_git: Git 초기화 여부\n\n    Returns:\n        생성 결과 정보 딕셔너리\n    \"\"\"\n    try:\n        # 1. 디렉토리 구조 생성\n        root.mkdir(parents=True, exist_ok=True)\n        for d in SKELETON_DIRS:\n            (root / d).mkdir(exist_ok=True)\n\n        # 2. 기본 파일들 생성\n        # README.md\n        readme_content = f\"\"\"# {root.name}\n\n## 🚀 프로젝트 개요\n{root.name} 프로젝트입니다.\n\n## 📁 디렉토리 구조\n```\n{root.name}/\n├── README.md          # 프로젝트 문서\n├── src/              # 소스 코드\n├── test/             # 테스트 코드\n├── docs/             # 문서\n└── memory/           # 프로젝트 메모리/컨텍스트\n```\n\n## 🛠️ 시작하기\n프로젝트가 초기화되었습니다. 이제 개발을 시작하세요!\n\n생성일: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\"\"\"\n        (root / \"README.md\").write_text(readme_content, encoding=\"utf-8\")\n\n        # docs/overview.md\n        docs_content = f\"\"\"# {root.name} 프로젝트 문서\n\n## 프로젝트 설명\n이 문서는 {root.name} 프로젝트의 기술 문서입니다.\n\n## 주요 기능\n- [ ] 기능 1\n- [ ] 기능 2\n- [ ] 기능 3\n\n## 아키텍처\n프로젝트 아키텍처 설명을 여기에 작성하세요.\n\"\"\"\n        (root / \"docs\" / \"overview.md\").write_text(docs_content, encoding=\"utf-8\")\n\n        # test/__init__.py\n        (root / \"test\" / \"__init__.py\").touch()\n\n        # test/test_smoke.py - 기본 테스트\n        test_content = '''\"\"\"Smoke test for project initialization\"\"\"\n\ndef test_smoke():\n    \"\"\"프로젝트가 정상적으로 초기화되었는지 확인\"\"\"\n    assert True, \"Basic smoke test passed\"\n\ndef test_project_structure():\n    \"\"\"프로젝트 구조 확인\"\"\"\n    import os\n    assert os.path.exists(\"README.md\")\n    assert os.path.exists(\"src\")\n    assert os.path.exists(\"test\")\n    assert os.path.exists(\"docs\")\n'''\n        (root / \"test\" / \"test_smoke.py\").write_text(test_content, encoding=\"utf-8\")\n\n        # src/__init__.py\n        (root / \"src\" / \"__init__.py\").touch()\n\n        # 3. Git 초기화 (선택적)\n        git_initialized = False\n        if init_git and is_git_available():\n            try:\n                # Git 초기화\n                subprocess.run([\"git\", \"init\"], cwd=root, check=True, capture_output=True)\n\n                # .gitignore 생성\n                write_gitignore(root)\n\n                # 첫 커밋\n                subprocess.run([\"git\", \"add\", \".\"], cwd=root, check=True, capture_output=True)\n                subprocess.run(\n                    [\"git\", \"commit\", \"-m\", \"feat: initial project skeleton\"], \n                    cwd=root, \n                    check=True, \n                    capture_output=True\n                )\n                git_initialized = True\n                logger.info(f\"Git 저장소 초기화 완료: {root}\")\n\n            except subprocess.CalledProcessError as e:\n                logger.warning(f\"Git 초기화 실패: {e}\")\n                git_initialized = False\n\n        # 4. 초기 컨텍스트 생성\n        initial_context = {\n            \"project_name\": root.name,\n            \"project_path\": str(root),\n            \"created_at\": datetime.now().isoformat(),\n            \"last_updated\": datetime.now().isoformat(),\n            \"type\": \"new_project\",\n            \"status\": \"initialized\"\n        }\n\n        # memory 디렉토리에 저장\n        context_path = root / \"memory\" / \"context.json\"\n        context_path.write_text(\n            json.dumps(initial_context, indent=2, ensure_ascii=False),\n            encoding=\"utf-8\"\n        )\n\n        # 5. 결과 반환\n        return {\n            \"success\": True,\n            \"project_name\": root.name,\n            \"path\": str(root),\n            \"git_initialized\": git_initialized,\n            \"created_dirs\": SKELETON_DIRS,\n            \"created_files\": [\n                \"README.md\", \n                \"docs/overview.md\", \n                \"test/__init__.py\", \n                \"test/test_smoke.py\", \n                \"src/__init__.py\",\n                \"memory/context.json\"\n            ]\n        }\n\n    except Exception as e:\n        logger.error(f\"프로젝트 스켈레톤 생성 실패: {e}\")\n        return {\n            \"success\": False,\n            \"error\": str(e)\n        }\n\ndef is_git_available() -> bool:\n    \"\"\"Git 사용 가능 여부 확인\"\"\"\n    try:\n        from path_utils import is_git_available as _is_git_available\n        return _is_git_available()\n    except ImportError:\n        # 대체 구현\n        try:\n            subprocess.run([\"git\", \"--version\"], capture_output=True, check=True)\n            return True\n        except (FileNotFoundError, subprocess.CalledProcessError):\n            return False\n\ndef write_gitignore(root: Path):\n    \"\"\"표준 .gitignore 파일 생성\"\"\"\n    try:\n        from path_utils import write_gitignore as _write_gitignore\n        _write_gitignore(root)\n    except ImportError:\n        # 대체 구현\n        gitignore_content = \"\"\"# Python\n__pycache__/\n*.py[cod]\n*$py.class\n*.so\n.Python\nenv/\nvenv/\n.venv/\n\n# IDE\n.vscode/\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\nThumbs.db\n\n# Project specific\nmemory/cache/\n*.log\n.env\n\"\"\"\n        (root / \".gitignore\").write_text(gitignore_content, encoding=\"utf-8\")\n"