"""
🔥 SimplEdit System v2.3 FINAL CORRECTED - 모든 오류 수정 완료
완벽한 함수 순서 + 누락 함수 보완 + 의존성 해결

🎯 v2.3 FINAL CORRECTED 특징:
import os
import sys
import shutil
import tempfile
from datetime import datetime
from typing import Dict, List, Any, Optional
import ast
import ast_parser_helpers





def _detect_language_from_path(file_path: str) -> str:
    """파일 확장자로 언어 감지"""
    ext = os.path.splitext(file_path)[1].lower()
    language_map = {'.py': 'python', '.js': 'javascript', '.jsx': 'javascript', '.ts': 'typescript', '.tsx': 'typescript'}
    return language_map.get(ext, 'text')

def _validate_syntax_by_language(content: str, language: str, file_path_for_context: str=None) -> tuple:
    """✅ v2.3 FINAL: 완전 개선된 구문 검증 - expandtabs 적용"""
    try:
        if language == 'python':
            normalized_content = content.expandtabs(4)
            ast.parse(normalized_content)
            return (True, None)
        else:
            return (True, None)
    except SyntaxError as e:
        return (False, f'구문 오류: {e}')
    except Exception as e:
        return (False, f'검증 오류: {e}')

def _atomic_write(file_path: str, content: str):
    """원자적 파일 쓰기"""
    dir_path = os.path.dirname(file_path)
    if dir_path:
        os.makedirs(dir_path, exist_ok=True)
    with tempfile.NamedTemporaryFile(mode='w', encoding='utf-8', dir=dir_path, delete=False) as tmp:
        tmp.write(content)
        tmp_path = tmp.name
    try:
        shutil.move(tmp_path, file_path)
    except Exception as e:
        os.remove(tmp_path)
        raise e

def _record_line_delta(file_path: str, edit_line: int, delta: int):
    """
    안정적인 Delta Tracking 시스템 v2.3 FINAL+
    연속 편집시 라인 번호 정확성 보장
    """
    if delta == 0:
        return
    try:
        project_context = globals().get('project_context')
        if project_context and isinstance(project_context, dict):
            if 'line_deltas' not in project_context:
                project_context['line_deltas'] = {}
            file_key = os.path.basename(file_path)
            if file_key not in project_context['line_deltas']:
                project_context['line_deltas'][file_key] = []
            import time
            delta_info = {'edit_line': edit_line, 'delta': delta, 'timestamp': time.time(), 'cumulative_delta': delta}
            for existing_delta in project_context['line_deltas'][file_key]:
                if existing_delta['edit_line'] <= edit_line:
                    delta_info['cumulative_delta'] += existing_delta['delta']
            project_context['line_deltas'][file_key].append(delta_info)
            if len(project_context['line_deltas'][file_key]) > 10:
                project_context['line_deltas'][file_key] = project_context['line_deltas'][file_key][-10:]
            print(f'📈 Delta Tracking: 파일 {file_key}, 라인 {edit_line}, 델타 {delta:+d}')
    except Exception as e:
        print(f'⚠️ Delta Tracking 기록 실패 (편집은 정상): {e}')


def validate_method_end(lines: list, start_line: int, end_line: int, block_type: str) -> int:
    """
    메서드나 함수의 실제 끝 라인을 검증하고 조정합니다.
    
    특히 여러 return 문이 있는 경우나 복잡한 들여쓰기가 있는 경우를 처리합니다.
    
    Args:
        lines: 전체 파일의 라인 리스트
        start_line: 블록 시작 라인 (1-based)
        end_line: 현재 계산된 끝 라인 (1-based)
        block_type: 블록 타입 ('function', 'method', 'class')
    
    Returns:
        int: 조정된 끝 라인 번호 (1-based)
    """
    if block_type not in ['function', 'method']:
        return end_line
    
    # 시작 라인의 들여쓰기 수준 확인
    if start_line <= 0 or start_line > len(lines):
        return end_line
        
    start_indent = len(lines[start_line - 1]) - len(lines[start_line - 1].lstrip())
    
    # 실제 끝 찾기: 같은 들여쓰기 수준의 다음 요소 또는 파일 끝
    actual_end = end_line
    
    for i in range(end_line, len(lines)):
        line = lines[i]
        stripped = line.strip()
        
        # 빈 줄이나 주석은 건너뛰기
        if not stripped or stripped.startswith('#'):
            continue
            
        current_indent = len(line) - len(line.lstrip())
        
        # 더 낮은 들여쓰기 수준을 만나면 여기가 실제 끝
        if current_indent <= start_indent and stripped:
            # def나 class로 시작하면 새로운 정의
            if any(stripped.startswith(keyword) for keyword in ['def ', 'class ', 'async def ']):
                break
            # 같은 레벨의 다른 코드
            if current_indent == start_indent:
                break
        
        # 여전히 함수/메서드 내부라면 계속
        actual_end = i + 1
    
    # 마지막 비어있지 않은 라인까지 포함
    for i in range(actual_end - 1, end_line - 1, -1):
        if lines[i].strip():
            return i + 1
            
    return actual_end

def _invalidate_and_refresh_cache(file_path: str):
    """캐시 무효화 및 갱신 시스템 v2.3 FINAL+"""
    try:
        file_key = os.path.basename(file_path)
        project_context = globals().get('project_context')
        if project_context and isinstance(project_context, dict):
            if 'analyzed_files' in project_context and file_key in project_context['analyzed_files']:
                del project_context['analyzed_files'][file_key]
                print(f'🗑️ 캐시 무효화: {file_key}')
    except Exception as e:
        print(f'⚠️ 캐시 무효화 실패: {e}')

def _safe_import_parse_with_snippets():
    """parse_with_snippets 안전 임포트 - Pylance 오류 수정"""
    try:
        import sys
        import importlib.util
        current_dir = os.path.dirname(os.path.abspath(__file__)) if '__file__' in globals() else os.getcwd()
                if hasattr(ast_helpers, 'parse_with_snippets'):
                    return ast_helpers.parse_with_snippets
        return None
    except Exception:
        return None




def replace_block(file_path: str, block_name: str, new_content: str) -> dict:
    """
    AST 기반 코드 블록 교체 - 자동 들여쓰기 처리
    
    Parse → Transform → Unparse 방식으로 코드를 수정하여
    들여쓰기를 자동으로 처리합니다.
    
    Args:
        file_path: 대상 파일 경로
        block_name: 교체할 블록 이름 (함수명 또는 클래스명.메서드명)
        new_content: 새로운 코드 내용
        
    Returns:
        dict: {
            'success': bool,
            'message': str,
            'method': str,
            'error': str (실패 시),
            'line_delta': int (성공 시)
        # 3. EnhancedFunctionReplacer로 변환
        replacer = EnhancedFunctionReplacer(block_name, new_content)
        new_tree = replacer.visit(tree)
        
        # 4. 변환 성공 확인
        if not replacer.found_and_replaced:
            return {
                'success': False,
                'error': f"블록 '{block_name}'을 찾을 수 없습니다.",
                'method': 'ast'
            }
        
        # 5. 코드 재생성 (Python 3.9+ ast.unparse 사용)
        ast.fix_missing_locations(new_tree)
        final_code = ast.unparse(new_tree)
        
        # 6. 원자적 파일 저장
        _atomic_write(file_path, final_code)
        
        # 7. 라인 수 변화 계산
        new_lines = len(final_code.splitlines())
        line_delta = new_lines - original_lines
        
        return {
            'success': True,
            'message': f"✅ {block_name} 교체 완료 (AST 기반 자동 들여쓰기)",
            'method': 'ast_unparse',
            'line_delta': line_delta
        }
        
    except SyntaxError as e:
        return {
            'success': False,
            'error': f"구문 오류: {str(e)}",
            'method': 'ast'
        }
    except Exception as e:
        return {
            'success': False,
            'error': f"AST 교체 실패: {str(e)}",
            'method': 'ast',
            'traceback': traceback.format_exc()
        }


def insert_block(file_path: str, target_block: str, position: str, new_content: str) -> dict:
    """
    AST 기반 코드 블록 삽입 - 자동 들여쓰기 처리
    
    Parse → Transform → Unparse 방식으로 코드를 삽입하여
    들여쓰기를 자동으로 처리합니다.
    
    Args:
        file_path: 대상 파일 경로
        target_block: 대상 블록 이름 (함수명 또는 클래스명.메서드명)
        position: 삽입 위치 ('before', 'after', 'start', 'end')
        new_content: 삽입할 코드 내용
        
    Returns:
        dict: 성공/실패 정보와 메시지
    """
    import ast
    import traceback
    from ast_parser_helpers import BlockInsertTransformer
    
    valid_positions = ['before', 'after', 'start', 'end']
    if position not in valid_positions:
        return {
        ast.fix_missing_locations(new_tree)
        final_code = ast.unparse(new_tree)
        
        # 6. 원자적 파일 저장
        _atomic_write(file_path, final_code)
        
        # 7. 라인 수 변화 계산
        new_lines = len(final_code.splitlines())
        line_delta = new_lines - original_lines
        
        return {
            'success': True,
            'message': f"✅ {target_block}에 코드 삽입 완료 (위치: {position}, AST 기반)",
            'method': 'ast_unparse',
            'line_delta': line_delta
        }
        
    except SyntaxError as e:
        return {
            'success': False,
            'error': f"구문 오류: {str(e)}",
            'method': 'ast'
        }
    except Exception as e:
        return {
            'success': False,
            'error': f"AST 삽입 실패: {str(e)}",
            'method': 'ast',
            'traceback': traceback.format_exc()
        }




def create_file(file_path: str, content: str='') -> str:
    """새 파일 생성"""
    try:
        _atomic_write(file_path, content)
        return f'SUCCESS: 파일 생성 완료 - {file_path}'
    except Exception as e:
        return f'ERROR: 파일 생성 실패 - {e}'

def read_file(file_path: str) -> str:
    """파일 읽기"""
    try:
        if not os.path.exists(file_path):
            return f'ERROR: 파일이 존재하지 않습니다 - {file_path}'
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            return f.read()
    except Exception as e:
        return f'ERROR: 파일 읽기 실패 - {e}'

def backup_file(file_path: str, reason: str='backup') -> str:
    """
    파일의 타임스탬프 백업을 생성합니다.
    
    백업은 날짜별 폴더에 저장되며, 백업 이유를 파일명에 포함합니다.
    
    Args:
        file_path (str): 백업할 파일의 전체 경로
        reason (str, optional): 백업 이유. 파일명에 포함됨. 기본값은 "backup"
    
    Returns:
        str: 백업 결과
             성공: 백업 파일의 전체 경로
             실패: "ERROR: 백업할 파일이 존재하지 않습니다: {file_path}"
                  또는 "ERROR: 백업 실패 - {오류 내용}"
    
    Side Effects:
        - backups/YYYY-MM-DD/ 디렉토리가 생성됨
        - 백업 파일이 생성됨
    
    Examples:
        >>> # 기본 백업
        >>> backup_path = backup_file('app.py')
        >>> print(backup_path)
        backups/2025-06-13/app.py.backup.123456.bak
        
        >>> # 이유를 명시한 백업
        >>> backup_path = backup_file('config.json', 'before_update')
        >>> print(backup_path)
        backups/2025-06-13/config.json.before_update.123456.bak
        
        >>> # 에러 처리
        >>> result = backup_file('missing.txt')
        >>> if result.startswith('ERROR:'):
        ...     print("백업 실패")
    
    Notes:
        - 백업 파일명 형식: {원본파일명}.{reason}.{HHMMSS}.bak
        - 원본 파일의 메타데이터(권한, 시간)도 보존됩니다
        - 백업 디렉토리는 원본 파일과 같은 위치에 생성됩니다
    """
    try:
        if not os.path.exists(file_path):
            return f'ERROR: 백업할 파일이 존재하지 않습니다: {file_path}'
        backup_dir = os.path.join(os.path.dirname(file_path) or '.', 'backups', datetime.now().strftime('%Y-%m-%d'))
        os.makedirs(backup_dir, exist_ok=True)
        timestamp = datetime.now().strftime('%H%M%S')
        backup_filename = f'{os.path.basename(file_path)}.{reason}.{timestamp}.bak'
        backup_path = os.path.join(backup_dir, backup_filename)
        shutil.copy2(file_path, backup_path)
        return backup_path
    except Exception as e:
        return f'ERROR: 백업 실패 - {e}'

def restore_backup(backup_path: str, target_path: str=None) -> str:
    """
    백업 파일을 원본 위치나 지정된 위치로 복원합니다.
    
    백업 파일명에서 원본 경로를 자동으로 추출할 수 있으며,
    복원 전 현재 파일을 자동으로 백업합니다.
    
            backup_before_restore = backup_file(target_path, 'restore_전_자동백업')
            print(f'기존 파일 백업됨: {backup_before_restore}', file=sys.stderr)
        shutil.copy2(backup_path, target_path)
        return f'SUCCESS: {backup_path} -> {target_path} 복원 완료'
    except Exception as e:
        return f'ERROR: 복원 실패 - {e}'
