

# WorkflowManager/Commands 싱글턴 초기화
_workflow_mgr = None
_workflow_cmd = None

def get_workflow_commands():
    """WorkflowCommands 싱글턴 인스턴스 반환"""
    global _workflow_mgr, _workflow_cmd
    if _workflow_cmd is None:
        try:
            from workflow import WorkflowManager, WorkflowCommands
            _workflow_mgr = WorkflowManager()
            _workflow_cmd = WorkflowCommands(_workflow_mgr)
        except ImportError as e:
            print(f"⚠️ WorkflowCommands 초기화 실패: {e}")
            return None
    return _workflow_cmd



# WorkflowManager/Commands 싱글턴 초기화
_workflow_mgr = None
_workflow_cmd = None

def get_workflow_commands():
    """WorkflowCommands 싱글턴 인스턴스 반환"""
    global _workflow_mgr, _workflow_cmd
    if _workflow_cmd is None:
        try:
            from workflow import WorkflowManager, WorkflowCommands
            _workflow_mgr = WorkflowManager()
            _workflow_cmd = WorkflowCommands(_workflow_mgr)
        except ImportError as e:
            print(f"⚠️ WorkflowCommands 초기화 실패: {e}")
            return None
    return _workflow_cmd

"""
프로젝트 전환 및 관리 기능
새로운 ContextManager와 통합됩니다.
"""
import os
import builtins
from pathlib import Path
from datetime import datetime, timedelta
import json
# 절대 임포트 사용 (JSON REPL에서 사용됨)
from core.path_utils import get_project_root, get_cache_dir, get_file_directory_cache_path
from workflow_display import show_workflow_status_improved
from workflow_display import show_workflow_status_improved

def flow_project(name):
    """프로젝트 전환 - cmd_flow_with_context로 리다이렉트"""
    return cmd_flow_with_context(name)

def check_and_update_file_directory(project_name: str):
    """file_directory 캐시를 확인하고 필요시 업데이트합니다."""
    cache_path = get_file_directory_cache_path(project_name)
    needs_update = True
    if cache_path.exists():
        try:
            with open(cache_path, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            generated_at = datetime.fromisoformat(cache_data.get('generated_at', ''))
            if datetime.now() - generated_at < timedelta(hours=24):
                needs_update = False
                print('  ✓ file_directory 캐시가 유효합니다.')
        except:
            pass
    if needs_update:
        print('  🔄 file_directory 재생성 중...')
        generate_file_directory(project_name)

def generate_file_directory(project_name: str):
    """프로젝트의 파일 디렉토리를 생성합니다."""
    project_root = get_project_root(project_name)
    ignore_patterns = {'.git', 'node_modules', '__pycache__', 'dist', 'build', '.venv', 'venv'}
    file_list = []
    for root, dirs, files in os.walk(project_root):
        dirs[:] = [d for d in dirs if d not in ignore_patterns]
        for file in files:
            rel_path = Path(root).relative_to(project_root) / file
            file_list.append(str(rel_path).replace('\\', '/'))
    cache_data = {'file_list': file_list, 'content': '\n'.join(file_list), 'generated_at': datetime.now().isoformat(), 'file_count': len(file_list), 'project_name': project_name}
    cache_path = get_file_directory_cache_path(project_name)
    with open(cache_path, 'w', encoding='utf-8') as f:
        json.dump(cache_data, f, indent=2, ensure_ascii=False)
    print(f'  ✓ file_directory 생성 완료 ({len(file_list)}개 파일)')

def show_workflow_status():
    """현재 워크플로우 상태를 표시합니다."""
    try:
        if 'helpers' in builtins.__dict__:
            context_data = builtins.__dict__['helpers'].get_context()
            workflow_data = context_data.get('workflow_data', {})
        else:
            workflow_data = {}
        if not workflow_data:
            return
        if 'current_plan_id' in workflow_data and 'plans' in workflow_data:
            plan_id = workflow_data['current_plan_id']
            if plan_id and plan_id in workflow_data['plans']:
                plan = workflow_data['plans'][plan_id]
                print(f"\n📋 현재 계획: {plan['name']}")
                if plan.get('tasks'):
                    current_task = next((t for t in plan['tasks'] if t['status'] != 'completed'), None)
                    if current_task:
                        print(f"   🎯 현재 작업: {current_task['title']}")
                        print(f"      상태: {current_task['status']}")
    except Exception as e:
        print(f'⚠️ 워크플로우 상태 표시 중 오류: {e}')

def cmd_flow_with_context(project_name):
    """프로젝트 전환 및 전체 컨텍스트 로드 (안정화 버전)"""
    import os
    import sys
    import json
    import builtins
    from pathlib import Path
    import subprocess
    from datetime import datetime
    
    # 🔒 helpers 객체를 안전하게 가져옵니다
    helpers = builtins.__dict__.get('helpers')
    if not helpers:
        print('⚠️ 경고: helpers 객체를 찾을 수 없습니다.')
        # 독립 실행 환경을 위한 최소한의 기능 제공
        try:
            # 가능하면 AIHelpers를 직접 생성
            sys.path.insert(0, os.path.join(os.getcwd(), 'python'))
            from ai_helpers import AIHelpers
            helpers = AIHelpers()
            print("✅ 임시 helpers 객체를 생성했습니다.")
        except ImportError as ie:
            print(f"❌ helpers 생성 실패: {ie}")
            # helpers 없이도 기본 기능은 동작하도록 함
            helpers = None
    print(f"\n{'=' * 50}")
    print(f'🚀 프로젝트 전환: {project_name}')
    print(f"{'=' * 50}\n")
    base_path = Path.home() / 'Desktop'
    project_path = base_path / project_name
    if not project_path.exists():
        print(f'❌ 프로젝트 디렉토리가 없습니다: {project_path}')
        return {'success': False, 'error': 'Project directory not found'}
    try:
        # 🔒 안전한 컨텍스트 백업
        if helpers and hasattr(helpers, 'get_context'):
            current_context = helpers.get_context()
            if current_context:
                current_project = current_context.get('project_name', 'unknown')
                if current_project and current_project != 'unknown' and (current_project != project_name):
                    backup_file = f"memory/context_backup_{current_project}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                    os.makedirs('memory', exist_ok=True)
                    with open(backup_file, 'w', encoding='utf-8') as f:
                        json.dump(current_context, f, indent=2)
                    print(f'💾 이전 프로젝트 컨텍스트 백업: {backup_file}')
    except Exception as e:
        print(f'⚠️ 컨텍스트 백업 중 오류 (무시하고 계속): {e}')
    os.chdir(str(project_path))
    print(f'✅ 작업 디렉토리 변경: {os.getcwd()}')
    project_str = str(project_path)
    if project_str not in sys.path:
        sys.path.insert(0, project_str)
    context_file = project_path / 'memory' / 'context.json'
    if context_file.exists():
        try:
            with open(context_file, 'r', encoding='utf-8') as f:
                context_data = json.load(f)
            print(f'✅ 기존 컨텍스트 로드')
        except Exception as e:
            print(f'⚠️ 컨텍스트 로드 실패, 새로 생성: {e}')
            context_data = {}
    else:
        print('📝 새 컨텍스트 생성')
        context_data = {}
    context_data.update({'project_name': project_name, 'project_path': str(project_path), 'last_accessed': datetime.now().isoformat()})
    try:
        # 🔒 안전한 컨텍스트 저장
        if helpers and hasattr(helpers, 'get_context') and hasattr(helpers, 'save_context'):
            current = helpers.get_context()
            if current is not None:
                current.update(context_data)
                helpers.save_context()
                print(f'✅ 컨텍스트 저장 완료')
            else:
                print('⚠️ 컨텍스트가 None입니다. 새로 초기화합니다.')
                # 컨텍스트 직접 저장
                os.makedirs('memory', exist_ok=True)
                with open('memory/context.json', 'w', encoding='utf-8') as f:
                    json.dump(context_data, f, indent=2)
                print('✅ 컨텍스트 직접 저장 완료')
        else:
            # helpers가 없는 경우 직접 저장
            print('⚠️ helpers를 사용할 수 없어 직접 저장합니다.')
            os.makedirs('memory', exist_ok=True)
            with open('memory/context.json', 'w', encoding='utf-8') as f:
                json.dump(context_data, f, indent=2)
            print('✅ 컨텍스트 직접 저장 완료')
    except Exception as e:
        print(f'⚠️ 컨텍스트 저장 중 오류: {e}')
    files_to_load = [('계획', 'project_plan.md'), ('작업', 'current_tasks.md'), ('브리핑', 'project_briefing.md'), ('분석', 'code_analysis.md')]
    loaded_files = {}
    for name, filename in files_to_load:
        file_path = project_path / filename
        if file_path.exists():
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    loaded_files[name] = f.read()
                print(f'✅ {name} 로드: {filename}')
            except Exception as e:
                print(f'⚠️ {name} 로드 실패: {e}')
    try:
        print('\n📁 프로젝트 구조 업데이트 중...')
        subprocess.run([sys.executable, 'python/project_context_builder.py', '--update-file-directory'], cwd=str(project_path), capture_output=True, text=True)
        print('✅ file_directory.md 업데이트 완료')
    except Exception as e:
        print(f'⚠️ file_directory.md 업데이트 실패: {e}')
    print(f"\n{'=' * 50}")
    print(f'📋 프로젝트 브리핑: {project_name}')
    print(f"{'=' * 50}")
    if '계획' in loaded_files:
        print(f"\n📌 프로젝트 계획:\n{loaded_files['계획'][:500]}...")
    if '작업' in loaded_files:
        print(f"\n📌 현재 작업:\n{loaded_files['작업'][:300]}...")
    # Git 상태 확인 (git_manager 사용)
    try:
        from git_version_manager import GitVersionManager
        git_mgr = GitVersionManager()
        git_status = git_mgr.git_status()
        
        if git_status.get('success'):
            modified_count = len(git_status.get('modified', []))
            print(f'\n🌿 Git 상태: {modified_count}개 파일 변경')
            
            if modified_count > 0:
                print('변경된 파일:')
                for file in git_status['modified'][:5]:
                    print(f'  {file}')
                if modified_count > 5:
                    print(f'  ... 외 {modified_count - 5}개')
        else:
            # Git 사용 불가 시 조용히 넘어감
            print('\nℹ️ Git 상태를 확인할 수 없습니다.')
    except ImportError:
        # git_version_manager를 import할 수 없는 경우
        print('\nℹ️ Git 매니저를 로드할 수 없습니다.')
    except Exception as e:
        # 기타 예외는 간단히 처리
        print(f'\nℹ️ Git 상태 확인 중 오류가 발생했습니다.')
    print(f"\n{'=' * 50}")
    print(f'✅ 프로젝트 전환 완료!')
    print(f"{'=' * 50}\n")
    show_workflow_status_improved()
    return {'success': True, 'project': project_name, 'path': str(project_path), 'context': context_data, 'loaded_files': list(loaded_files.keys())}

    """workflow.json 기반 워크플로우 진행 현황 표시"""
    from pathlib import Path
    import json
    import textwrap
    
    wf_path = Path('memory/workflow.json')
    if not wf_path.exists():
        print('ℹ️  워크플로우가 아직 설정되지 않았습니다.')
        print('   💡 /plan 명령으로 새 계획을 시작할 수 있습니다.')
        return
        
    try:
        data = json.loads(wf_path.read_text(encoding='utf-8'))
        current_id = data.get('current_plan_id')
        
        if not current_id:
            print('ℹ️  활성 플랜이 없습니다.')
            print('   💡 /plan 명령으로 새 계획을 시작할 수 있습니다.')
            return
            
        # plans는 배열이므로 직접 탐색
        plan = next((p for p in data.get('plans', []) if p['id'] == current_id), None)
        if not plan:
            print('⚠️  플랜 정보가 손상되었습니다.')
            return
            
        tasks = plan.get('tasks', [])
        done = sum(1 for t in tasks if t.get('status') == 'completed')
        
        # 출력
        bar = '━' * 50
        print(f"\n{bar}")
        print(f"📋 워크플로우: {plan['name']} ({done}/{len(tasks)} 완료)")
        
        if plan.get('description'):
            print(f"📝 설명: {textwrap.shorten(plan['description'], 70)}")
            
        if tasks:
            print("\n📌 작업 목록:")
            for i, t in enumerate(tasks, 1):
                status_icon = '✅' if t.get('status') == 'completed' else '🔧' if t.get('status') == 'in_progress' else '⏳'
                approval = ' (승인됨)' if t.get('approval_status') == 'approved' else ''
                print(f"   {i}. {status_icon} {t['title']}{approval}")
                
        print(f"{bar}")
        print("💡 /status로 상세 정보, /next로 다음 작업 진행\n")
    except Exception as e:
        print(f'⚠️  워크플로우 상태 표시 중 오류: {e}')



def show_workflow_status_improved():
    """workflow.json 기반 워크플로우 진행 현황 표시"""
    from pathlib import Path
    import json
    import textwrap
    
    wf_path = Path('memory/workflow.json')
    if not wf_path.exists():
        print('ℹ️  워크플로우가 아직 설정되지 않았습니다.')
        print('   💡 /plan 명령으로 새 계획을 시작할 수 있습니다.')
        return
        
    try:
        data = json.loads(wf_path.read_text(encoding='utf-8'))
        current_id = data.get('current_plan_id')
        
        if not current_id:
            print('ℹ️  활성 플랜이 없습니다.')
            print('   💡 /plan 명령으로 새 계획을 시작할 수 있습니다.')
            return
            
        # plans는 배열이므로 직접 탐색
        plan = next((p for p in data.get('plans', []) if p['id'] == current_id), None)
        if not plan:
            print('⚠️  플랜 정보가 손상되었습니다.')
            return
            
        tasks = plan.get('tasks', [])
        done = sum(1 for t in tasks if t.get('status') == 'completed')
        
        # 출력
        bar = '━' * 50
        print(f"\n{bar}")
        print(f"📋 워크플로우: {plan['name']} ({done}/{len(tasks)} 완료)")
        
        if plan.get('description'):
            print(f"📝 설명: {textwrap.shorten(plan['description'], 70)}")
            
        if tasks:
            print("\n📌 작업 목록:")
            for i, t in enumerate(tasks, 1):
                status_icon = '✅' if t.get('status') == 'completed' else '🔧' if t.get('status') == 'in_progress' else '⏳'
                approval = ' (승인됨)' if t.get('approval_status') == 'approved' else ''
                print(f"   {i}. {status_icon} {t['title']}{approval}")
                
        print(f"{bar}")
        print("💡 /status로 상세 정보, /next로 다음 작업 진행\n")
    except Exception as e:
        print(f'⚠️  워크플로우 상태 표시 중 오류: {e}')


def get_file_directory_structure(project_name: str=None):
    """파일 디렉토리 구조를 반환합니다."""
    if not project_name:
        project_name = Path.cwd().name
    cache_path = get_file_directory_cache_path(project_name)
    if cache_path.exists():
        try:
            with open(cache_path, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            return cache_data.get('content', '')
        except:
            pass
    generate_file_directory(project_name)
    if cache_path.exists():
        with open(cache_path, 'r', encoding='utf-8') as f:
            cache_data = json.load(f)
        return cache_data.get('content', '')
    return ''

class EnhancedFlow:
    """기존 코드와의 호환성을 위한 래퍼 클래스"""

    def __init__(self):
        pass

    def list_all_projects(self):
        """프로젝트 목록 반환 (호환성)"""
        try:
            if 'helpers' in builtins.__dict__:
                ctx = builtins.__dict__['helpers'].get_context()
                project_name = ctx.get('project_name', Path.cwd().name)
                return [{'name': project_name, 'path': str(get_project_root(project_name)), 'active': True}]
        except:
            pass
        return []

    def cmd_flow_with_context(self, project_name: str):
        """프로젝트 전환 (호환성)"""
        return flow_project(project_name)

    def get_file_directory_structure(self, project_name: str=None):
        """파일 디렉토리 구조 반환 (호환성)"""
        return get_file_directory_structure(project_name)