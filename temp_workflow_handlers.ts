"import { ToolResult } from '../types/tool-interfaces';\nimport { logger } from '../services/logger';\n\ninterface FlowProjectResult {\n    success: boolean;\n    project_name?: string;\n    path?: string;\n    git_branch?: string;\n    workflow_status?: any;\n    error?: string;\n    details?: any;\n}\n\nexport async function handleFlowProject(params: { project_name: string }): Promise<ToolResult> {\n    const code = `\n# 개선된 flow_project 핸들러 - 명시적 에러 처리\nimport sys\nimport os\nimport json\nimport traceback\nfrom pathlib import Path\n\nproject_name = \"${params.project_name}\"\nresult = {\n    \"success\": False,\n    \"project_name\": project_name,\n    \"error\": None,\n    \"details\": {}\n}\n\ntry:\n    # 1. Python 경로 설정\n    current_dir = Path.cwd()\n    python_dir = current_dir / 'python'\n    if python_dir.exists() and str(python_dir) not in sys.path:\n        sys.path.insert(0, str(python_dir))\n\n    # 2. enhanced_flow import\n    try:\n        from enhanced_flow import cmd_flow_with_context\n    except ImportError as e:\n        result[\"error\"] = f\"enhanced_flow 모듈 import 실패: {str(e)}\"\n        result[\"details\"][\"import_error\"] = traceback.format_exc()\n        print(json.dumps(result, ensure_ascii=False))\n        sys.exit(1)\n\n    # 3. 프로젝트 전환 실행\n    try:\n        flow_result = cmd_flow_with_context(project_name)\n\n        if flow_result and isinstance(flow_result, dict):\n            result[\"success\"] = True\n            result[\"path\"] = flow_result.get(\"project_path\", os.getcwd())\n            result[\"git_branch\"] = flow_result.get(\"git_branch\", \"unknown\")\n            result[\"workflow_status\"] = flow_result.get(\"workflow_status\", {})\n            result[\"details\"] = flow_result\n        else:\n            result[\"error\"] = f\"예상치 못한 반환값: {type(flow_result)}\"\n            result[\"details\"][\"return_value\"] = str(flow_result)\n\n    except Exception as e:\n        result[\"error\"] = f\"프로젝트 전환 중 오류: {str(e)}\"\n        result[\"details\"][\"traceback\"] = traceback.format_exc()\n        result[\"details\"][\"exception_type\"] = type(e).__name__\n\n    # 4. 결과 출력\n    print(json.dumps(result, ensure_ascii=False, indent=2))\n\nexcept Exception as e:\n    # 최상위 예외 처리\n    result[\"error\"] = f\"치명적 오류: {str(e)}\"\n    result[\"details\"][\"fatal_traceback\"] = traceback.format_exc()\n    print(json.dumps(result, ensure_ascii=False, indent=2))\n    sys.exit(1)\n`;\n\n    try {\n        // 임시 대체 구현\n    const session = null; // TODO: 실제 세션 관리 구현 필요\n        const execResult = await session.execute(code, 'python');\n\n        // 실행 결과 파싱\n        if (!execResult.success) {\n            logger.error('Python execution failed:', execResult.error);\n            return {\n                content: [{\n                    type: 'text',\n                    text: `❌ Python 실행 실패\\\n\\\n에러: ${execResult.error || 'Unknown error'}\\\n\\\n${execResult.stderr || ''}`\n                }]\n            };\n        }\n\n        // stdout에서 JSON 결과 추출\n        let result: FlowProjectResult;\n        try {\n            // stdout에서 JSON 부분만 추출 (마지막 완전한 JSON 객체)\n            const stdout = execResult.stdout || '';\n            const jsonMatch = stdout.match(/\\{[^{}]*\"success\"[\\s\\S]*\\}(?!.*\\{[^{}]*\"success\")/);\n\n            if (jsonMatch) {\n                result = JSON.parse(jsonMatch[0]);\n            } else {\n                throw new Error('No valid JSON found in output');\n            }\n        } catch (parseError) {\n            logger.error('Failed to parse result:', parseError);\n            return {\n                content: [{\n                    type: 'text',\n                    text: `❌ 결과 파싱 실패\\\n\\\n출력:\\\n${execResult.stdout}\\\n\\\n에러:\\\n${execResult.stderr}`\n                }]\n            };\n        }\n\n        // 결과 처리\n        if (!result.success) {\n            logger.error('Flow project failed:', result.error);\n            return {\n                content: [{\n                    type: 'text',\n                    text: `❌ 프로젝트 전환 실패: ${params.project_name}\\\n\\\n에러: ${result.error}\\\n\\\n${result.details?.traceback ? '\\\n스택 트레이스:\\\n' + result.details.traceback : ''}`\n                }]\n            };\n        }\n\n        // 성공 응답\n        const successMessage = `✅ 프로젝트 전환 성공: ${result.project_name}\\\n\\\n` +\n            `📍 경로: ${result.path || 'Unknown'}\\\n` +\n            `🌿 Git 브랜치: ${result.git_branch || 'Unknown'}\\\n`;\n\n        const workflowInfo = result.workflow_status?.plan ? \n            `\\\n📋 활성 워크플로우: ${result.workflow_status.plan.name}\\\n` +\n            `   진행률: ${result.workflow_status.plan.progress || '0/0'}` : \n            '\\\n⚠️ 활성 워크플로우 없음';\n\n        return {\n            content: [{\n                type: 'text',\n                text: successMessage + workflowInfo\n            }]\n        };\n\n    } catch (error) {\n        logger.error('handleFlowProject error:', error);\n        return {\n            content: [{\n                type: 'text',\n                text: `❌ 핸들러 오류\\\n\\\n${error instanceof Error ? error.message : String(error)}`\n            }]\n        };\n    }\n}\n\n// 기타 워크플로우 관련 핸들러들...\n"