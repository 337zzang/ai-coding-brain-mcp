#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n"""\nProject Wisdom Manager - AI Coding Brain MCP\n프로젝트 작업 중 축적되는 지혜와 교훈을 관리하는 모듈\n\n작성일: 2025-06-22\n"""\n\nimport os\nimport json\nimport re\nfrom datetime import datetime\nfrom typing import Dict, List, Any, Optional\nfrom pathlib import Path\n\nclass ProjectWisdomManager:\n    """프로젝트 지혜 관리 클래스"""\n    \n    def __init__(self, project_root: str = "."):\n        self.project_root = Path(project_root)\n        self.wisdom_file = self.project_root / "project_wisdom.md"\n        self.vision_file = self.project_root / "project_vision.md"\n        self.wisdom_data = {\n            'error_patterns': {},\n            'common_mistakes': {},\n            'best_practices': [],\n            'last_updated': datetime.now().isoformat()\n        }\n        self.load_wisdom()\n    \n    def load_wisdom(self):\n        """기존 wisdom 데이터 로드"""\n        if self.wisdom_file.exists():\n            # MD 파일 파싱하여 데이터 추출\n            content = self.wisdom_file.read_text(encoding='utf-8')\n            self._parse_wisdom_md(content)\n    \n    def _parse_wisdom_md(self, content: str):\n        """MD 파일에서 wisdom 데이터 추출"""\n        lines = content.split('\n')\n        current_section = None\n        current_category = 'general'\n        \n        for i, line in enumerate(lines):\n            # 섹션 감지\n            if '## 🐛 자주 발생하는 오류 패턴' in line:\n                current_section = 'errors'\n            elif '## ❌ 자주 하는 실수들' in line:\n                current_section = 'mistakes'\n            elif '## ✅ 베스트 프랙티스' in line:\n                current_section = 'practices'\n            \n            # 오류 패턴 추출\n            if current_section == 'errors' and '###' in line:\n                error_name = line.replace('###', '').strip()\n                # 다음 줄들에서 정보 추출\n                for j in range(i+1, min(i+5, len(lines))):\n                    if '발생 횟수' in lines[j]:\n                        try:\n                            count = int(re.search(r'(\d+)회', lines[j]).group(1))\n                            self.wisdom_data['error_patterns'][error_name] = {'count': count}\n                        except:\n                            pass\n                        break\n            \n            # 실수 패턴 추출\n            elif current_section == 'mistakes' and re.match(r'^\d+\.', line):\n                # 실수 이름 추출\n                match = re.search(r'^\d+\.\s*\*\*(.*?)\*\*', line)\n                if match:\n                    mistake_name = match.group(1)\n                    # 다음 줄들에서 정보 추출\n                    for j in range(i+1, min(i+5, len(lines))):\n                        if '발생 횟수' in lines[j]:\n                            try:\n                                count = int(re.search(r'(\d+)회', lines[j]).group(1))\n                                if mistake_name not in self.wisdom_data['common_mistakes']:\n                                    self.wisdom_data['common_mistakes'][mistake_name] = {'count': count}\n                                else:\n                                    self.wisdom_data['common_mistakes'][mistake_name]['count'] = count\n                            except:\n                                pass\n                            break\n            \n            # 베스트 프랙티스 추출\n            elif current_section == 'practices':\n                # 카테고리 감지\n                if '###' in line and line.strip() != '###':\n                    current_category = line.replace('###', '').strip().lower()\n                # 프랙티스 항목 감지\n                elif line.strip().startswith('-') and line.strip() != '-':\n                    practice_text = line.strip()[1:].strip()\n                    if practice_text:\n                        # 중복 체크 후 추가\n                        if not any(isinstance(p, dict) and p.get('text') == practice_text \n                                  for p in self.wisdom_data['best_practices']):\n                            self.wisdom_data['best_practices'].append({\n                                'text': practice_text,\n                                'category': current_category\n                            })\n    def track_error(self, error_type: str, error_msg: str):\n        """오류 발생 추적"""\n        if error_type not in self.wisdom_data['error_patterns']:\n            self.wisdom_data['error_patterns'][error_type] = {\n                'count': 0,\n                'first_seen': datetime.now().isoformat(),\n                'messages': []\n            }\n        \n        pattern = self.wisdom_data['error_patterns'][error_type]\n        pattern['count'] += 1\n        pattern['last_seen'] = datetime.now().isoformat()\n        \n        # 메시지 저장 (최대 5개)\n        if error_msg not in pattern['messages']:\n            pattern['messages'].append(error_msg)\n            pattern['messages'] = pattern['messages'][-5:]\n        \n        self.save_wisdom()\n        \n        # 경고 메시지\n        if pattern['count'] > 2:\n            print(f"⚠️ '{error_type}' 오류가 {pattern['count']}번째 발생했습니다!")\n            print(f"💡 팁: {self._get_error_tip(error_type)}")\n    \n    def track_mistake(self, mistake_type: str, context: str = ""):\n        """실수 추적"""\n        if mistake_type not in self.wisdom_data['common_mistakes']:\n            self.wisdom_data['common_mistakes'][mistake_type] = {\n                'count': 0,\n                'first_seen': datetime.now().isoformat(),\n                'contexts': []\n            }\n        \n        mistake = self.wisdom_data['common_mistakes'][mistake_type]\n        mistake['count'] += 1\n        mistake['last_seen'] = datetime.now().isoformat()\n        \n        if context and context not in mistake['contexts']:\n            mistake['contexts'].append(context)\n            mistake['contexts'] = mistake['contexts'][-3:]\n        \n        self.save_wisdom()\n        \n        # 실시간 경고\n        self._show_mistake_warning(mistake_type, mistake['count'])\n    \n    def _show_mistake_warning(self, mistake_type: str, count: int):\n        """실수에 대한 경고 메시지 표시"""\n        warnings = {\n            'console_usage': f"또 console을 사용하셨네요! ({count}번째) TypeScript에서는 logger를 사용하세요.",\n            'no_backup': f"백업 없이 파일을 수정하려고 하시나요? ({count}번째) 항상 백업 먼저!",\n            'direct_flow': f"flow_project를 직접 호출하셨네요! ({count}번째) execute_code를 사용하세요."\n        }\n        \n        if mistake_type in warnings:\n            print(f"\n⚠️ {warnings[mistake_type]}")\n            print(f"💡 올바른 방법: {self._get_correct_way(mistake_type)}")\n    \n    def _get_correct_way(self, mistake_type: str) -> str:\n        """올바른 방법 제시"""\n        correct_ways = {\n            'console_usage': "import { logger } from '../utils/logger'; logger.info('메시지');",\n            'no_backup': "backup = helpers.backup_file('file.py', '수정_전')",\n            'direct_flow': "execute_code: helpers.cmd_flow_with_context('project-name')"\n        }\n        return correct_ways.get(mistake_type, "문서를 참고하세요")\n    \n    def _get_error_tip(self, error_type: str) -> str:\n        """오류에 대한 팁 제공"""\n        tips = {\n            'TypeError': "타입을 확인하세요. TypeScript를 사용하면 이런 오류를 예방할 수 있습니다.",\n            'FileNotFoundError': "파일 경로를 확인하세요. os.path.join()을 사용하면 안전합니다.",\n            'KeyError': "딕셔너리 키가 존재하는지 확인하세요. dict.get('key', default)를 사용하세요."\n        }\n        return tips.get(error_type, "에러 메시지를 자세히 읽어보세요")\n    \n    def add_best_practice(self, practice: str, category: str = "general"):\n        """베스트 프랙티스 추가"""\n        practice_entry = {\n            'text': practice,\n            'category': category,\n            'added_at': datetime.now().isoformat()\n        }\n        \n        # 중복 체크\n        if not any(p['text'] == practice for p in self.wisdom_data['best_practices']):\n            self.wisdom_data['best_practices'].append(practice_entry)\n            self.save_wisdom()\n            print(f"✅ 새로운 베스트 프랙티스가 추가되었습니다: {practice}")\n    \n    def save_wisdom(self):\n        """wisdom 데이터를 MD 파일로 저장"""\n        content = self._generate_wisdom_md()\n        self.wisdom_file.write_text(content, encoding='utf-8')\n        \n    def _generate_wisdom_md(self) -> str:\n        """wisdom 데이터를 MD 형식으로 변환"""\n        lines = [\n            "# 🧠 Project Wisdom - ai-coding-brain-mcp",\n            "",\n            "> 이 문서는 프로젝트 작업 중 축적된 지혜와 교훈을 담고 있습니다.",\n            "",\n            "## 📌 프로젝트 비전",\n            f"- 프로젝트명: {self.project_root.name}",\n            f"- 경로: {self.project_root.absolute()}",\n            "- 주요 목적: AI 기반 코딩 도우미 MCP 서버",\n            "",\n            "## 🐛 자주 발생하는 오류 패턴",\n            ""\n        ]\n        \n        # 오류 패턴\n        for error_type, data in sorted(self.wisdom_data['error_patterns'].items(), \n                                     key=lambda x: x[1]['count'], reverse=True):\n            lines.extend([\n                f"### {error_type}",\n                f"- **발생 횟수**: {data['count']}회",\n                f"- **최초 발생**: {data.get('first_seen', 'N/A')}",\n                f"- **최근 발생**: {data.get('last_seen', 'N/A')}",\n                f"- **해결 팁**: {self._get_error_tip(error_type)}",\n                ""\n            ])\n        \n        # 실수 패턴\n        lines.extend(["", "## ❌ 자주 하는 실수들", ""])\n        for i, (mistake_type, data) in enumerate(sorted(self.wisdom_data['common_mistakes'].items(),\n                                                       key=lambda x: x[1]['count'], reverse=True), 1):\n            lines.extend([\n                f"{i}. **{mistake_type}**",\n                f"   - 발생 횟수: {data['count']}회",\n                f"   - 최초 발생: {data.get('first_seen', 'N/A')}",\n                f"   - 올바른 방법: `{self._get_correct_way(mistake_type)}`",\n                ""\n            ])\n        \n        # 베스트 프랙티스\n        lines.extend(["", "## ✅ 베스트 프랙티스", ""])\n        categories = {}\n        for practice in self.wisdom_data['best_practices']:\n            cat = practice.get('category', 'general')\n            if cat not in categories:\n                categories[cat] = []\n            categories[cat].append(practice['text'])\n        \n        for category, practices in categories.items():\n            lines.append(f"### {category.title()}")\n            for practice in practices:\n                lines.append(f"- {practice}")\n            lines.append("")\n        \n        lines.extend([\n            "",\n            "---",\n            f"*마지막 업데이트: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*"\n        ])\n        \n        return '\n'.join(lines)\n\n# 싱글톤 인스턴스\n_wisdom_manager = None\n\ndef get_wisdom_manager(project_root: str = ".") -> ProjectWisdomManager:\n    """Wisdom Manager 싱글톤 인스턴스 반환"""\n    global _wisdom_manager\n    if _wisdom_manager is None:\n        _wisdom_manager = ProjectWisdomManager(project_root)\n    return _wisdom_manager\n